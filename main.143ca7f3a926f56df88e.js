/*! For license information please see main.143ca7f3a926f56df88e.js.LICENSE.txt */
(()=>{var t={2588:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(4015),i=r.n(n),o=r(3645),a=r.n(o)()(i());a.push([t.id,"html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section {\r\n  display: block;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n\r\nimg, iframe {\r\n  vertical-align: bottom;\r\n  max-width: 100%;\r\n}\r\n\r\ninput, textarea, select {\r\n  font: inherit;\r\n}\r\n\r\n* {\r\n  -webkit-box-sizing: border-box;\r\n  -moz-box-sizing: border-box;\r\n  box-sizing: border-box;\r\n  -webkit-font-smoothing: antialiased;\r\n  text-rendering: optimizeLegibility;\r\n}\r\n","",{version:3,sources:["webpack://./src/base.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;EAaE,SAAS;EACT,UAAU;EACV,SAAS;EACT,eAAe;EACf,aAAa;EACb,wBAAwB;AAC1B;;AAEA;;EAEE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,YAAY;AACd;AACA;;EAEE,WAAW;EACX,aAAa;AACf;AACA;EACE,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,8BAA8B;EAC9B,2BAA2B;EAC3B,sBAAsB;EACtB,mCAAmC;EACnC,kCAAkC;AACpC",sourcesContent:["html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section {\r\n  display: block;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n\r\nimg, iframe {\r\n  vertical-align: bottom;\r\n  max-width: 100%;\r\n}\r\n\r\ninput, textarea, select {\r\n  font: inherit;\r\n}\r\n\r\n* {\r\n  -webkit-box-sizing: border-box;\r\n  -moz-box-sizing: border-box;\r\n  box-sizing: border-box;\r\n  -webkit-font-smoothing: antialiased;\r\n  text-rendering: optimizeLegibility;\r\n}\r\n"],sourceRoot:""}]);const s=a},5426:(t,e,r)=>{"use strict";r.d(e,{Z:()=>v});var n=r(4015),i=r.n(n),o=r(3645),a=r.n(o),s=r(1667),u=r.n(s),c=r(8451),l=r(3600),h=r(8154),f=a()(i()),d=u()(c.Z),p=u()(l.Z),g=u()(h.Z);f.push([t.id,'@font-face {\r\n  font-family: "Now";\r\n  font-weight: 400;\r\n  src: url('+d+');\r\n}\r\n\r\n@font-face {\r\n  font-family: "Now Alt";\r\n  font-weight: 500;\r\n  src: url('+p+');\r\n}\r\n\r\n@font-face {\r\n  font-family: "Now";\r\n  font-weight: 700;\r\n  src: url('+g+');\r\n}\r\n\r\nbody {\r\n  font-family: "Now";\r\n  padding: 20px 50px 50px;\r\n  font-size: 16px;\r\n}\r\n\r\nh1 {\r\n  font-weight: 700;\r\n  font-size: 24px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.buttonsRow {\r\n  margin: 20px 0;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.actionButton {\r\n  background-color: blueviolet;\r\n  color: rgb(247, 221, 255);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 8px 10px rgba(0, 0, 0, 0.1);\r\n  cursor: pointer;\r\n  transition: all 0.3s ease 0s;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 1em;\r\n  line-height: 1em;\r\n  font-family: "Now";\r\n  vertical-align: middle;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n}\r\n\r\n.actionButton:hover {\r\n  background-color: rgb(150, 73, 223);\r\n  color: #fff;\r\n  box-shadow: 0px 10px 12px rgba(150, 73, 223, 0.4);\r\n  transform: translateY(-5px);\r\n}\r\n\r\n.actionButton:active {\r\n  transform: translateY(0px);\r\n  box-shadow: 0px 8px 10px rgba(150, 73, 223, 0.3);\r\n}\r\n\r\n.actionButton.disabled {\r\n  background-color: #ccc;\r\n  color: #888;\r\n  pointer-events: none;\r\n  cursor: not-allowed;\r\n  box-shadow: 0px 5px 8px rgba(0, 0, 0, 0.06);\r\n}\r\n\r\n.actionButton.disabled:hover {\r\n  background-color: #ccc;\r\n  color: #888;\r\n}\r\n\r\n.hintButton {\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  color: #ddd;\r\n  font-weight: bold;\r\n  font-size: 0.8em;\r\n  line-height: 0.8em;\r\n  border-radius: 50%;\r\n  padding: 6px 6px 4px;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n}\r\n\r\n.hintButton:hover {\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  color: #fff;\r\n}\r\n\r\n.hintButton:hover + .hoverHintContainer .hoverHint {\r\n  visibility: visible;\r\n}\r\n\r\n.disabled .hintButton {\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  pointer-events: none;\r\n}\r\n\r\n.hoverHintContainer {\r\n  position: relative;\r\n}\r\n\r\n.hoverHintContainer .hoverHint {\r\n  left: 8px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n}\r\n\r\n.textControls {\r\n  display: flex;\r\n  gap: 30px;\r\n  visibility: hidden;\r\n}\r\n\r\n.textInput {\r\n  background-color: #fff;\r\n  border: 2px solid #ddd;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  padding: 10px;\r\n  color: #333;\r\n  font-size: 0.8em;\r\n  text-transform: uppercase;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.textInput:focus {\r\n  outline: none;\r\n  border-color: rgb(149, 60, 231);\r\n  color: black;\r\n}\r\n\r\n.textInput.error {\r\n  border-color: orangered;\r\n  color: red;\r\n}\r\n\r\n.textColorPreview {\r\n  display: inline-block;\r\n  background-color: #52644e;\r\n  border-radius: 5px;\r\n  height: 30px;\r\n  width: 30px;\r\n  vertical-align: middle;\r\n}\r\n\r\n#textColorInput {\r\n  width: 100px;\r\n}\r\n\r\n#textSizeInput {\r\n  width: 80px;\r\n}\r\n\r\n#textPrefixInput,\r\n#textSuffixInput {\r\n  width: 80px;\r\n}\r\n\r\n#textPreviewContentInput {\r\n  width: 200px;\r\n}\r\n\r\n.progressInfo {\r\n  display: flex;\r\n  height: 20px;\r\n  margin: 5px 0 10px;\r\n}\r\n\r\n.progressText {\r\n  color: rgb(126, 126, 126);\r\n  font-size: 0.8em;\r\n  line-height: 1em;\r\n  font-style: italic;\r\n}\r\n\r\n.cardPreview {\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  background-position: top left;\r\n  position: relative;\r\n  overflow: visible;\r\n}\r\n\r\n.previewText {\r\n  visibility: hidden;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  text-transform: uppercase;\r\n  user-select: none;\r\n  cursor: move;\r\n  text-align: center;\r\n  line-height: 1.5;\r\n}\r\n\r\n.hint {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  color: #fff;\r\n  font-size: 0.8em;\r\n  padding: 15px;\r\n  border-radius: 5px;\r\n  visibility: hidden;\r\n  white-space: nowrap;\r\n  z-index: 5;\r\n}\r\n\r\n.hint.hintToLeft.animated {\r\n  animation: floatingHorizontal 1s linear 0s infinite;\r\n}\r\n\r\n.hint.hintToLeft:before {\r\n  content: "";\r\n  width: 0px;\r\n  height: 0px;\r\n  position: absolute;\r\n  border-left: 10px solid transparent;\r\n  border-right: 10px solid rgba(0, 0, 0, 0.7);\r\n  border-top: 10px solid transparent;\r\n  border-bottom: 10px solid transparent;\r\n  top: 15px;\r\n  left: -20px;\r\n}\r\n\r\n@keyframes floatingHorizontal {\r\n  from { transform: translate(0px, 0px); }\r\n  65% { transform: translate(10px, 0px); }\r\n  to { transform: translate(0px, 0px); }\r\n}\r\n\r\n.hintCloseButton {\r\n  font-weight: bold;\r\n  font-size: 1.3em;\r\n  margin-left: 10px;\r\n  cursor: pointer;\r\n}\r\n\r\n.resultSection {\r\n  margin-top: 20px;\r\n  padding-top: 10px;\r\n  border-top: 1px dashed #ccc;\r\n}\r\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,4CAAmC;AACrC;;AAEA;EACE,sBAAsB;EACtB,gBAAgB;EAChB,4CAAqC;AACvC;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,4CAAgC;AAClC;;AAEA;EACE,kBAAkB;EAClB,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,aAAa;EACb,SAAS;AACX;;AAEA;EACE,4BAA4B;EAC5B,yBAAyB;EACzB,aAAa;EACb,kBAAkB;EAClB,2CAA2C;EAC3C,eAAe;EACf,4BAA4B;EAC5B,YAAY;EACZ,aAAa;EACb,cAAc;EACd,gBAAgB;EAChB,kBAAkB;EAClB,sBAAsB;EACtB,aAAa;EACb,mBAAmB;EACnB,QAAQ;AACV;;AAEA;EACE,mCAAmC;EACnC,WAAW;EACX,iDAAiD;EACjD,2BAA2B;AAC7B;;AAEA;EACE,0BAA0B;EAC1B,gDAAgD;AAClD;;AAEA;EACE,sBAAsB;EACtB,WAAW;EACX,oBAAoB;EACpB,mBAAmB;EACnB,2CAA2C;AAC7C;;AAEA;EACE,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,oCAAoC;EACpC,WAAW;EACX,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;EAClB,oBAAoB;EACpB,eAAe;EACf,qBAAqB;EACrB,sBAAsB;AACxB;;AAEA;EACE,oCAAoC;EACpC,WAAW;AACb;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,oCAAoC;EACpC,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,SAAS;EACT,QAAQ;EACR,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,SAAS;EACT,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,sBAAsB;EACtB,kBAAkB;EAClB,aAAa;EACb,aAAa;EACb,WAAW;EACX,gBAAgB;EAChB,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,+BAA+B;EAC/B,YAAY;AACd;;AAEA;EACE,uBAAuB;EACvB,UAAU;AACZ;;AAEA;EACE,qBAAqB;EACrB,yBAAyB;EACzB,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,sBAAsB;AACxB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;;EAEE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,gBAAgB;EAChB,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,wBAAwB;EACxB,4BAA4B;EAC5B,6BAA6B;EAC7B,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,yBAAyB;EACzB,iBAAiB;EACjB,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,oCAAoC;EACpC,WAAW;EACX,gBAAgB;EAChB,aAAa;EACb,kBAAkB;EAClB,kBAAkB;EAClB,mBAAmB;EACnB,UAAU;AACZ;;AAEA;EACE,mDAAmD;AACrD;;AAEA;EACE,WAAW;EACX,UAAU;EACV,WAAW;EACX,kBAAkB;EAClB,mCAAmC;EACnC,2CAA2C;EAC3C,kCAAkC;EAClC,qCAAqC;EACrC,SAAS;EACT,WAAW;AACb;;AAEA;EACE,OAAO,8BAA8B,EAAE;EACvC,MAAM,+BAA+B,EAAE;EACvC,KAAK,8BAA8B,EAAE;AACvC;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,2BAA2B;AAC7B",sourcesContent:['@font-face {\r\n  font-family: "Now";\r\n  font-weight: 400;\r\n  src: url(\'./fonts/now.regular.otf\');\r\n}\r\n\r\n@font-face {\r\n  font-family: "Now Alt";\r\n  font-weight: 500;\r\n  src: url(\'./fonts/NowAlt-Medium.otf\');\r\n}\r\n\r\n@font-face {\r\n  font-family: "Now";\r\n  font-weight: 700;\r\n  src: url(\'./fonts/now.bold.otf\');\r\n}\r\n\r\nbody {\r\n  font-family: "Now";\r\n  padding: 20px 50px 50px;\r\n  font-size: 16px;\r\n}\r\n\r\nh1 {\r\n  font-weight: 700;\r\n  font-size: 24px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.buttonsRow {\r\n  margin: 20px 0;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.actionButton {\r\n  background-color: blueviolet;\r\n  color: rgb(247, 221, 255);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 8px 10px rgba(0, 0, 0, 0.1);\r\n  cursor: pointer;\r\n  transition: all 0.3s ease 0s;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 1em;\r\n  line-height: 1em;\r\n  font-family: "Now";\r\n  vertical-align: middle;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n}\r\n\r\n.actionButton:hover {\r\n  background-color: rgb(150, 73, 223);\r\n  color: #fff;\r\n  box-shadow: 0px 10px 12px rgba(150, 73, 223, 0.4);\r\n  transform: translateY(-5px);\r\n}\r\n\r\n.actionButton:active {\r\n  transform: translateY(0px);\r\n  box-shadow: 0px 8px 10px rgba(150, 73, 223, 0.3);\r\n}\r\n\r\n.actionButton.disabled {\r\n  background-color: #ccc;\r\n  color: #888;\r\n  pointer-events: none;\r\n  cursor: not-allowed;\r\n  box-shadow: 0px 5px 8px rgba(0, 0, 0, 0.06);\r\n}\r\n\r\n.actionButton.disabled:hover {\r\n  background-color: #ccc;\r\n  color: #888;\r\n}\r\n\r\n.hintButton {\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  color: #ddd;\r\n  font-weight: bold;\r\n  font-size: 0.8em;\r\n  line-height: 0.8em;\r\n  border-radius: 50%;\r\n  padding: 6px 6px 4px;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n}\r\n\r\n.hintButton:hover {\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  color: #fff;\r\n}\r\n\r\n.hintButton:hover + .hoverHintContainer .hoverHint {\r\n  visibility: visible;\r\n}\r\n\r\n.disabled .hintButton {\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  pointer-events: none;\r\n}\r\n\r\n.hoverHintContainer {\r\n  position: relative;\r\n}\r\n\r\n.hoverHintContainer .hoverHint {\r\n  left: 8px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n}\r\n\r\n.textControls {\r\n  display: flex;\r\n  gap: 30px;\r\n  visibility: hidden;\r\n}\r\n\r\n.textInput {\r\n  background-color: #fff;\r\n  border: 2px solid #ddd;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  padding: 10px;\r\n  color: #333;\r\n  font-size: 0.8em;\r\n  text-transform: uppercase;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.textInput:focus {\r\n  outline: none;\r\n  border-color: rgb(149, 60, 231);\r\n  color: black;\r\n}\r\n\r\n.textInput.error {\r\n  border-color: orangered;\r\n  color: red;\r\n}\r\n\r\n.textColorPreview {\r\n  display: inline-block;\r\n  background-color: #52644e;\r\n  border-radius: 5px;\r\n  height: 30px;\r\n  width: 30px;\r\n  vertical-align: middle;\r\n}\r\n\r\n#textColorInput {\r\n  width: 100px;\r\n}\r\n\r\n#textSizeInput {\r\n  width: 80px;\r\n}\r\n\r\n#textPrefixInput,\r\n#textSuffixInput {\r\n  width: 80px;\r\n}\r\n\r\n#textPreviewContentInput {\r\n  width: 200px;\r\n}\r\n\r\n.progressInfo {\r\n  display: flex;\r\n  height: 20px;\r\n  margin: 5px 0 10px;\r\n}\r\n\r\n.progressText {\r\n  color: rgb(126, 126, 126);\r\n  font-size: 0.8em;\r\n  line-height: 1em;\r\n  font-style: italic;\r\n}\r\n\r\n.cardPreview {\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  background-position: top left;\r\n  position: relative;\r\n  overflow: visible;\r\n}\r\n\r\n.previewText {\r\n  visibility: hidden;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  text-transform: uppercase;\r\n  user-select: none;\r\n  cursor: move;\r\n  text-align: center;\r\n  line-height: 1.5;\r\n}\r\n\r\n.hint {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  color: #fff;\r\n  font-size: 0.8em;\r\n  padding: 15px;\r\n  border-radius: 5px;\r\n  visibility: hidden;\r\n  white-space: nowrap;\r\n  z-index: 5;\r\n}\r\n\r\n.hint.hintToLeft.animated {\r\n  animation: floatingHorizontal 1s linear 0s infinite;\r\n}\r\n\r\n.hint.hintToLeft:before {\r\n  content: "";\r\n  width: 0px;\r\n  height: 0px;\r\n  position: absolute;\r\n  border-left: 10px solid transparent;\r\n  border-right: 10px solid rgba(0, 0, 0, 0.7);\r\n  border-top: 10px solid transparent;\r\n  border-bottom: 10px solid transparent;\r\n  top: 15px;\r\n  left: -20px;\r\n}\r\n\r\n@keyframes floatingHorizontal {\r\n  from { transform: translate(0px, 0px); }\r\n  65% { transform: translate(10px, 0px); }\r\n  to { transform: translate(0px, 0px); }\r\n}\r\n\r\n.hintCloseButton {\r\n  font-weight: bold;\r\n  font-size: 1.3em;\r\n  margin-left: 10px;\r\n  cursor: pointer;\r\n}\r\n\r\n.resultSection {\r\n  margin-top: 20px;\r\n  padding-top: 10px;\r\n  border-top: 1px dashed #ccc;\r\n}\r\n'],sourceRoot:""}]);const v=f},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=t(e);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(t,r,n){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(n)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<t.length;s++){var u=[].concat(t[s]);n&&i[u[0]]||(r&&(u[2]?u[2]="".concat(r," and ").concat(u[2]):u[2]=r),e.push(u))}},e}},4015:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}t.exports=function(t){var r,n,i=(n=4,function(t){if(Array.isArray(t))return t}(r=t)||function(t,e){var r=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=r){var n,i,o=[],a=!0,s=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(o.push(n.value),!e||o.length!==e);a=!0);}catch(t){s=!0,i=t}finally{try{a||null==r.return||r.return()}finally{if(s)throw i}}return o}}(r,n)||function(t,r){if(t){if("string"==typeof t)return e(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,r):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if(!a)return o;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(u," */"),l=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[o].concat(l).concat([c]).join("\n")}return[o].join("\n")}},1667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},3600:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const n=r.p+"fonts/34cd748d760d618c54403a69086e4f99.otf"},8154:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const n=r.p+"fonts/2c606dec87dd9c7fcf5b75f53d46ad83.otf"},8451:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const n=r.p+"fonts/75a37ab505e0a6ec6c41e01041b4f674.otf"},3162:function(t,e,r){var n;void 0===(n=function(){"use strict";function e(t,e,r){var n=new XMLHttpRequest;n.open("GET",t),n.responseType="blob",n.onload=function(){s(n.response,e,r)},n.onerror=function(){console.error("could not download file")},n.send()}function n(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function i(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(r){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof r.g&&r.g.global===r.g?r.g:void 0,a=o.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),s=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(t,r,a){var s=o.URL||o.webkitURL,u=document.createElement("a");r=r||t.name||"download",u.download=r,u.rel="noopener","string"==typeof t?(u.href=t,u.origin===location.origin?i(u):n(u.href)?e(t,r,a):i(u,u.target="_blank")):(u.href=s.createObjectURL(t),setTimeout((function(){s.revokeObjectURL(u.href)}),4e4),setTimeout((function(){i(u)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,r,o){if(r=r||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,o),r);else if(n(t))e(t,r,o);else{var a=document.createElement("a");a.href=t,a.target="_blank",setTimeout((function(){i(a)}))}}:function(t,r,n,i){if((i=i||open("","_blank"))&&(i.document.title=i.document.body.innerText="downloading..."),"string"==typeof t)return e(t,r,n);var s="application/octet-stream"===t.type,u=/constructor/i.test(o.HTMLElement)||o.safari,c=/CriOS\/[\d]+/.test(navigator.userAgent);if((c||s&&u||a)&&"undefined"!=typeof FileReader){var l=new FileReader;l.onloadend=function(){var t=l.result;t=c?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),i?i.location.href=t:location=t,i=null},l.readAsDataURL(t)}else{var h=o.URL||o.webkitURL,f=h.createObjectURL(t);i?i.location=f:location.href=f,i=null,setTimeout((function(){h.revokeObjectURL(f)}),4e4)}});o.saveAs=s.saveAs=s,t.exports=s}.apply(e,[]))||(t.exports=n)},7766:t=>{t.exports='<!DOCTYPE html> <html> <head> <title>Add names in bulk to an Invitation card</title> </head> <body> <h1>Add names in bulk to your invitation card</h1> <section class="previewSection"> <div class="buttonsRow"> <input type="file" id="imageUploadInput" accept="image/*" hidden/> <label class="actionButton imageUploadButton" for="imageUploadInput">Upload your invitation card</label> <input type="file" id="csvUploadInput" accept=".csv" hidden/> <label class="actionButton csvUploadButton disabled" for="csvUploadInput"> Upload guest list <span class="hintButton">?</span> <div class="hoverHintContainer"> <div class="hint hintToLeft hoverHint"> A file with each invitee name in a separate line, saved as .csv or .txt <br/>Use \'#\' in the guest name to indicate where to break into a new line. </div> </div> </label> <button class="actionButton processButton disabled">Generate cards</button> <button class="actionButton downloadButton disabled">Download cards</button> <input type="file" id="fontUploadInput" accept=".ttf,.otf,.woff,.woff2" hidden/> <label class="actionButton fontUploadButton disabled" for="fontUploadInput">Upload font</label> </div> <div class="progressInfo"> <p class="progressText"></p> </div> <div class="textControls"> <div class="textColourGroup"> <span class="textColorPreview"></span> <input type="text" id="textColorInput" class="textInput" placeholder="#000000" maxlength="7"/> </div> <div class="textSizeGroup"> <label class="textControlLabel" for="textSizeInput">Size</label> <input type="number" id="textSizeInput" class="textInput" placeholder="32" min="8"/> </div> <div class="textPrefixGroup"> <label class="textControlLabel" for="textPrefixInput">Prefix</label> <input type="text" id="textPrefixInput" class="textInput" placeholder="dear"/> </div> <div class="textPreviewContentGroup"> <label class="textControlLabel" for="textPreviewContentInput">Example content</label> <input type="text" id="textPreviewContentInput" class="textInput" placeholder="guest 1 & guest 2"/> </div> <div class="textSuffixGroup"> <label class="textControlLabel" for="textSuffixInput">Suffix</label> <input type="text" id="textSuffixInput" class="textInput" placeholder=","/> </div> </div> <div class="cardPreview"> <p class="previewText">Dear John Doe and Jane Citizen</p> <div class="previewTextHint hint hintToLeft animated"> You can drag this text to adjust its position! <span class="hintCloseButton">x</span> </div> </div> </section> <section class="resultSection"></section> </body> </html> '},4043:(t,e,r)=>{t.exports=function t(e,r,n){function i(a,s){if(!r[a]){if(!e[a]){if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var c=r[a]={exports:{}};e[a][0].call(c.exports,(function(t){return i(e[a][1][t]||t)}),c,c.exports,t,e,r,n)}return r[a].exports}for(var o=void 0,a=0;a<n.length;a++)i(n[a]);return i}({1:[function(t,e,r){"use strict";var n=t("./utils"),i=t("./support"),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(t){for(var e,r,i,a,s,u,c,l=[],h=0,f=t.length,d=f,p="string"!==n.getTypeOf(t);h<t.length;)d=f-h,i=p?(e=t[h++],r=h<f?t[h++]:0,h<f?t[h++]:0):(e=t.charCodeAt(h++),r=h<f?t.charCodeAt(h++):0,h<f?t.charCodeAt(h++):0),a=e>>2,s=(3&e)<<4|r>>4,u=1<d?(15&r)<<2|i>>6:64,c=2<d?63&i:64,l.push(o.charAt(a)+o.charAt(s)+o.charAt(u)+o.charAt(c));return l.join("")},r.decode=function(t){var e,r,n,a,s,u,c=0,l=0,h="data:";if(t.substr(0,h.length)===h)throw new Error("Invalid base64 input, it looks like a data url.");var f,d=3*(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(t.charAt(t.length-1)===o.charAt(64)&&d--,t.charAt(t.length-2)===o.charAt(64)&&d--,d%1!=0)throw new Error("Invalid base64 input, bad content length.");for(f=i.uint8array?new Uint8Array(0|d):new Array(0|d);c<t.length;)e=o.indexOf(t.charAt(c++))<<2|(a=o.indexOf(t.charAt(c++)))>>4,r=(15&a)<<4|(s=o.indexOf(t.charAt(c++)))>>2,n=(3&s)<<6|(u=o.indexOf(t.charAt(c++))),f[l++]=e,64!==s&&(f[l++]=r),64!==u&&(f[l++]=n);return f}},{"./support":30,"./utils":32}],2:[function(t,e,r){"use strict";var n=t("./external"),i=t("./stream/DataWorker"),o=t("./stream/Crc32Probe"),a=t("./stream/DataLengthProbe");function s(t,e,r,n,i){this.compressedSize=t,this.uncompressedSize=e,this.crc32=r,this.compression=n,this.compressedContent=i}s.prototype={getContentWorker:function(){var t=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),e=this;return t.on("end",(function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),t},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},s.createWorkerFrom=function(t,e,r){return t.pipe(new o).pipe(new a("uncompressedSize")).pipe(e.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",e)},e.exports=s},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(t,e,r){"use strict";var n=t("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(t){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=t("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(t,e,r){"use strict";var n=t("./utils"),i=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e){return void 0!==t&&t.length?"string"!==n.getTypeOf(t)?function(t,e,r,n){var o=i,a=0+r;t^=-1;for(var s=0;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}(0|e,t,t.length):function(t,e,r,n){var o=i,a=0+r;t^=-1;for(var s=0;s<a;s++)t=t>>>8^o[255&(t^e.charCodeAt(s))];return-1^t}(0|e,t,t.length):0}},{"./utils":32}],5:[function(t,e,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(t,e,r){"use strict";var n;n="undefined"!=typeof Promise?Promise:t("lie"),e.exports={Promise:n}},{lie:37}],7:[function(t,e,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=t("pako"),o=t("./utils"),a=t("./stream/GenericWorker"),s=n?"uint8array":"array";function u(t,e){a.call(this,"FlateWorker/"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={}}r.magic="\b\0",o.inherits(u,a),u.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(o.transformTo(s,t.data),!1)},u.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},u.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},u.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},r.compressWorker=function(t){return new u("Deflate",t)},r.uncompressWorker=function(){return new u("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(t,e,r){"use strict";function n(t,e){var r,n="";for(r=0;r<e;r++)n+=String.fromCharCode(255&t),t>>>=8;return n}function i(t,e,r,i,a,l){var h,f,d=t.file,p=t.compression,g=l!==s.utf8encode,v=o.transformTo("string",l(d.name)),m=o.transformTo("string",s.utf8encode(d.name)),y=d.comment,b=o.transformTo("string",l(y)),w=o.transformTo("string",s.utf8encode(y)),x=m.length!==d.name.length,A=w.length!==y.length,C="",k="",S="",F=d.dir,B=d.date,E={crc32:0,compressedSize:0,uncompressedSize:0};e&&!r||(E.crc32=t.crc32,E.compressedSize=t.compressedSize,E.uncompressedSize=t.uncompressedSize);var T=0;e&&(T|=8),g||!x&&!A||(T|=2048);var O=0,z=0;F&&(O|=16),"UNIX"===a?(z=798,O|=function(t,e){var r=t;return t||(r=e?16893:33204),(65535&r)<<16}(d.unixPermissions,F)):(z=20,O|=function(t){return 63&(t||0)}(d.dosPermissions)),h=B.getUTCHours(),h<<=6,h|=B.getUTCMinutes(),h<<=5,h|=B.getUTCSeconds()/2,f=B.getUTCFullYear()-1980,f<<=4,f|=B.getUTCMonth()+1,f<<=5,f|=B.getUTCDate(),x&&(k=n(1,1)+n(u(v),4)+m,C+="up"+n(k.length,2)+k),A&&(S=n(1,1)+n(u(b),4)+w,C+="uc"+n(S.length,2)+S);var R="";return R+="\n\0",R+=n(T,2),R+=p.magic,R+=n(h,2),R+=n(f,2),R+=n(E.crc32,4),R+=n(E.compressedSize,4),R+=n(E.uncompressedSize,4),R+=n(v.length,2),R+=n(C.length,2),{fileRecord:c.LOCAL_FILE_HEADER+R+v+C,dirRecord:c.CENTRAL_FILE_HEADER+n(z,2)+R+n(b.length,2)+"\0\0\0\0"+n(O,4)+n(i,4)+v+C+b}}var o=t("../utils"),a=t("../stream/GenericWorker"),s=t("../utf8"),u=t("../crc32"),c=t("../signature");function l(t,e,r,n){a.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}o.inherits(l,a),l.prototype.push=function(t){var e=t.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,a.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:r?(e+100*(r-n-1))/r:100}}))},l.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var r=i(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},l.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,r=i(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),e)this.push({data:function(t){return c.DATA_DESCRIPTOR+n(t.crc32,4)+n(t.compressedSize,4)+n(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},l.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var r=this.bytesWritten-t,i=function(t,e,r,i,a){var s=o.transformTo("string",a(i));return c.CENTRAL_DIRECTORY_END+"\0\0\0\0"+n(t,2)+n(t,2)+n(e,4)+n(r,4)+n(s.length,2)+s}(this.dirRecords.length,r,t,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},l.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},l.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on("data",(function(t){e.processChunk(t)})),t.on("end",(function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end()})),t.on("error",(function(t){e.error(t)})),this},l.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},l.prototype.error=function(t){var e=this._sources;if(!a.prototype.error.call(this,t))return!1;for(var r=0;r<e.length;r++)try{e[r].error(t)}catch(t){}return!0},l.prototype.lock=function(){a.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock()},e.exports=l},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(t,e,r){"use strict";var n=t("../compressions"),i=t("./ZipFileWorker");r.generateWorker=function(t,e,r){var o=new i(e.streamFiles,r,e.platform,e.encodeFileName),a=0;try{t.forEach((function(t,r){a++;var i=function(t,e){var r=t||e,i=n[r];if(!i)throw new Error(r+" is not a valid compression method !");return i}(r.options.compression,e.compression),s=r.options.compressionOptions||e.compressionOptions||{},u=r.dir,c=r.date;r._compressWorker(i,s).withStreamInfo("file",{name:t,dir:u,date:c,comment:r.comment||"",unixPermissions:r.unixPermissions,dosPermissions:r.dosPermissions}).pipe(o)})),o.entriesCount=a}catch(t){o.error(t)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(t,e,r){"use strict";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var t=new n;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t}}(n.prototype=t("./object")).loadAsync=t("./load"),n.support=t("./support"),n.defaults=t("./defaults"),n.version="3.7.1",n.loadAsync=function(t,e){return(new n).loadAsync(t,e)},n.external=t("./external"),e.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(t,e,r){"use strict";var n=t("./utils"),i=t("./external"),o=t("./utf8"),a=t("./zipEntries"),s=t("./stream/Crc32Probe"),u=t("./nodejsUtils");function c(t){return new i.Promise((function(e,r){var n=t.decompressed.getContentWorker().pipe(new s);n.on("error",(function(t){r(t)})).on("end",(function(){n.streamInfo.crc32!==t.decompressed.crc32?r(new Error("Corrupted zip : CRC32 mismatch")):e()})).resume()}))}e.exports=function(t,e){var r=this;return e=n.extend(e||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),u.isNode&&u.isStream(t)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",t,!0,e.optimizedBinaryString,e.base64).then((function(t){var r=new a(e);return r.load(t),r})).then((function(t){var r=[i.Promise.resolve(t)],n=t.files;if(e.checkCRC32)for(var o=0;o<n.length;o++)r.push(c(n[o]));return i.Promise.all(r)})).then((function(t){for(var n=t.shift(),i=n.files,o=0;o<i.length;o++){var a=i[o];r.file(a.fileNameStr,a.decompressed,{binary:!0,optimizedBinaryString:!0,date:a.date,dir:a.dir,comment:a.fileCommentStr.length?a.fileCommentStr:null,unixPermissions:a.unixPermissions,dosPermissions:a.dosPermissions,createFolders:e.createFolders})}return n.zipComment.length&&(r.comment=n.zipComment),r}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(t,e,r){"use strict";var n=t("../utils"),i=t("../stream/GenericWorker");function o(t,e){i.call(this,"Nodejs stream input adapter for "+t),this._upstreamEnded=!1,this._bindStream(e)}n.inherits(o,i),o.prototype._bindStream=function(t){var e=this;(this._stream=t).pause(),t.on("data",(function(t){e.push({data:t,meta:{percent:0}})})).on("error",(function(t){e.isPaused?this.generatedError=t:e.error(t)})).on("end",(function(){e.isPaused?e._upstreamEnded=!0:e.end()}))},o.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},e.exports=o},{"../stream/GenericWorker":28,"../utils":32}],13:[function(t,e,r){"use strict";var n=t("readable-stream").Readable;function i(t,e,r){n.call(this,e),this._helper=t;var i=this;t.on("data",(function(t,e){i.push(t)||i._helper.pause(),r&&r(e)})).on("error",(function(t){i.emit("error",t)})).on("end",(function(){i.push(null)}))}t("../utils").inherits(i,n),i.prototype._read=function(){this._helper.resume()},e.exports=i},{"../utils":32,"readable-stream":16}],14:[function(t,e,r){"use strict";e.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(t,e){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(t,e);if("number"==typeof t)throw new Error('The "data" argument must not be a number');return new Buffer(t,e)},allocBuffer:function(t){if(Buffer.alloc)return Buffer.alloc(t);var e=new Buffer(t);return e.fill(0),e},isBuffer:function(t){return Buffer.isBuffer(t)},isStream:function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pause&&"function"==typeof t.resume}}},{}],15:[function(t,e,r){"use strict";function n(t,e,r){var n,i=o.getTypeOf(e),s=o.extend(r||{},u);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(t=g(t)),s.createFolders&&(n=p(t))&&v.call(this,n,!0);var h="string"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!h),(e instanceof c&&0===e.uncompressedSize||s.dir||!e||0===e.length)&&(s.base64=!1,s.binary=!0,e="",s.compression="STORE",i="string");var m;m=e instanceof c||e instanceof a?e:f.isNode&&f.isStream(e)?new d(t,e):o.prepareContent(t,e,s.binary,s.optimizedBinaryString,s.base64);var y=new l(t,m,s);this.files[t]=y}var i=t("./utf8"),o=t("./utils"),a=t("./stream/GenericWorker"),s=t("./stream/StreamHelper"),u=t("./defaults"),c=t("./compressedObject"),l=t("./zipObject"),h=t("./generate"),f=t("./nodejsUtils"),d=t("./nodejs/NodejsStreamInputAdapter"),p=function(t){"/"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return 0<e?t.substring(0,e):""},g=function(t){return"/"!==t.slice(-1)&&(t+="/"),t},v=function(t,e){return e=void 0!==e?e:u.createFolders,t=g(t),this.files[t]||n.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function m(t){return"[object RegExp]"===Object.prototype.toString.call(t)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(t){var e,r,n;for(e in this.files)n=this.files[e],(r=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(r,n)},filter:function(t){var e=[];return this.forEach((function(r,n){t(r,n)&&e.push(n)})),e},file:function(t,e,r){if(1!==arguments.length)return t=this.root+t,n.call(this,t,e,r),this;if(m(t)){var i=t;return this.filter((function(t,e){return!e.dir&&i.test(t)}))}var o=this.files[this.root+t];return o&&!o.dir?o:null},folder:function(t){if(!t)return this;if(m(t))return this.filter((function(e,r){return r.dir&&t.test(e)}));var e=this.root+t,r=v.call(this,e),n=this.clone();return n.root=r.name,n},remove:function(t){t=this.root+t;var e=this.files[t];if(e||("/"!==t.slice(-1)&&(t+="/"),e=this.files[t]),e&&!e.dir)delete this.files[t];else for(var r=this.filter((function(e,r){return r.name.slice(0,t.length)===t})),n=0;n<r.length;n++)delete this.files[r[n].name];return this},generate:function(t){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(t){var e,r={};try{if((r=o.extend(t||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");o.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";e=h.generateWorker(this,r,n)}catch(t){(e=new a("error")).error(t)}return new s(e,r.type||"string",r.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return(t=t||{}).type||(t.type="nodebuffer"),this.generateInternalStream(t).toNodejsStream(e)}};e.exports=y},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(t,e,r){e.exports=t("stream")},{stream:void 0}],17:[function(t,e,r){"use strict";var n=t("./DataReader");function i(t){n.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e]}t("../utils").inherits(i,n),i.prototype.byteAt=function(t){return this.data[this.zero+t]},i.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),r=t.charCodeAt(1),n=t.charCodeAt(2),i=t.charCodeAt(3),o=this.length-4;0<=o;--o)if(this.data[o]===e&&this.data[o+1]===r&&this.data[o+2]===n&&this.data[o+3]===i)return o-this.zero;return-1},i.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),r=t.charCodeAt(1),n=t.charCodeAt(2),i=t.charCodeAt(3),o=this.readData(4);return e===o[0]&&r===o[1]&&n===o[2]&&i===o[3]},i.prototype.readData=function(t){if(this.checkOffset(t),0===t)return[];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./DataReader":18}],18:[function(t,e,r){"use strict";var n=t("../utils");function i(t){this.data=t,this.length=t.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(t){},readInt:function(t){var e,r=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)r=(r<<8)+this.byteAt(e);return this.index+=t,r},readString:function(t){return n.transformTo("string",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},e.exports=i},{"../utils":32}],19:[function(t,e,r){"use strict";var n=t("./Uint8ArrayReader");function i(t){n.call(this,t)}t("../utils").inherits(i,n),i.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(t,e,r){"use strict";var n=t("./DataReader");function i(t){n.call(this,t)}t("../utils").inherits(i,n),i.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},i.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},i.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},i.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./DataReader":18}],21:[function(t,e,r){"use strict";var n=t("./ArrayReader");function i(t){n.call(this,t)}t("../utils").inherits(i,n),i.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(t,e,r){"use strict";var n=t("../utils"),i=t("../support"),o=t("./ArrayReader"),a=t("./StringReader"),s=t("./NodeBufferReader"),u=t("./Uint8ArrayReader");e.exports=function(t){var e=n.getTypeOf(t);return n.checkSupport(e),"string"!==e||i.uint8array?"nodebuffer"===e?new s(t):i.uint8array?new u(n.transformTo("uint8array",t)):new o(n.transformTo("array",t)):new a(t)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(t,e,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(t,e,r){"use strict";var n=t("./GenericWorker"),i=t("../utils");function o(t){n.call(this,"ConvertWorker to "+t),this.destType=t}i.inherits(o,n),o.prototype.processChunk=function(t){this.push({data:i.transformTo(this.destType,t.data),meta:t.meta})},e.exports=o},{"../utils":32,"./GenericWorker":28}],25:[function(t,e,r){"use strict";var n=t("./GenericWorker"),i=t("../crc32");function o(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}t("../utils").inherits(o,n),o.prototype.processChunk=function(t){this.streamInfo.crc32=i(t.data,this.streamInfo.crc32||0),this.push(t)},e.exports=o},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(t,e,r){"use strict";var n=t("../utils"),i=t("./GenericWorker");function o(t){i.call(this,"DataLengthProbe for "+t),this.propName=t,this.withStreamInfo(t,0)}n.inherits(o,i),o.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length}i.prototype.processChunk.call(this,t)},e.exports=o},{"../utils":32,"./GenericWorker":28}],27:[function(t,e,r){"use strict";var n=t("../utils"),i=t("./GenericWorker");function o(t){i.call(this,"DataWorker");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,t.then((function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=n.getTypeOf(t),e.isPaused||e._tickAndRepeat()}),(function(t){e.error(t)}))}n.inherits(o,i),o.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},o.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},o.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":t=this.data.substring(this.index,e);break;case"uint8array":t=this.data.subarray(this.index,e);break;case"array":case"nodebuffer":t=this.data.slice(this.index,e)}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},e.exports=o},{"../utils":32,"./GenericWorker":28}],28:[function(t,e,r){"use strict";function n(t){this.name=t||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(t){this.emit("data",t)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(t){this.emit("error",t)}return!0},error:function(t){return!this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit("error",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(t,e){if(this._listeners[t])for(var r=0;r<this._listeners[t].length;r++)this._listeners[t][r].call(this,e)},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on("data",(function(t){e.processChunk(t)})),t.on("end",(function(){e.end()})),t.on("error",(function(t){e.error(t)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var t=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t)},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var t="Worker "+this.name;return this.previous?this.previous+" -> "+t:t}},e.exports=n},{}],29:[function(t,e,r){"use strict";var n=t("../utils"),i=t("./ConvertWorker"),o=t("./GenericWorker"),a=t("../base64"),s=t("../support"),u=t("../external"),c=null;if(s.nodestream)try{c=t("../nodejs/NodejsStreamOutputAdapter")}catch(t){}function l(t,e,r){var a=e;switch(e){case"blob":case"arraybuffer":a="uint8array";break;case"base64":a="string"}try{this._internalType=a,this._outputType=e,this._mimeType=r,n.checkSupport(a),this._worker=t.pipe(new i(a)),t.lock()}catch(t){this._worker=new o("error"),this._worker.error(t)}}l.prototype={accumulate:function(t){return function(t,e){return new u.Promise((function(r,i){var o=[],s=t._internalType,u=t._outputType,c=t._mimeType;t.on("data",(function(t,r){o.push(t),e&&e(r)})).on("error",(function(t){o=[],i(t)})).on("end",(function(){try{var t=function(t,e,r){switch(t){case"blob":return n.newBlob(n.transformTo("arraybuffer",e),r);case"base64":return a.encode(e);default:return n.transformTo(t,e)}}(u,function(t,e){var r,n=0,i=null,o=0;for(r=0;r<e.length;r++)o+=e[r].length;switch(t){case"string":return e.join("");case"array":return Array.prototype.concat.apply([],e);case"uint8array":for(i=new Uint8Array(o),r=0;r<e.length;r++)i.set(e[r],n),n+=e[r].length;return i;case"nodebuffer":return Buffer.concat(e);default:throw new Error("concat : unsupported type '"+t+"'")}}(s,o),c);r(t)}catch(t){i(t)}o=[]})).resume()}))}(this,t)},on:function(t,e){var r=this;return"data"===t?this._worker.on(t,(function(t){e.call(r,t.data,t.meta)})):this._worker.on(t,(function(){n.delay(e,arguments,r)})),this},resume:function(){return n.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(n.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new c(this,{objectMode:"nodebuffer"!==this._outputType},t)}},e.exports=l},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(t,e,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob("application/zip").size}catch(t){r.blob=!1}}}try{r.nodestream=!!t("readable-stream").Readable}catch(t){r.nodestream=!1}},{"readable-stream":16}],31:[function(t,e,r){"use strict";for(var n=t("./utils"),i=t("./support"),o=t("./nodejsUtils"),a=t("./stream/GenericWorker"),s=new Array(256),u=0;u<256;u++)s[u]=252<=u?6:248<=u?5:240<=u?4:224<=u?3:192<=u?2:1;function c(){a.call(this,"utf-8 decode"),this.leftOver=null}function l(){a.call(this,"utf-8 encode")}s[254]=s[254]=1,r.utf8encode=function(t){return i.nodebuffer?o.newBufferFrom(t,"utf-8"):function(t){var e,r,n,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(n=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(n-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(e=i.uint8array?new Uint8Array(u):new Array(u),o=a=0;a<u;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(n=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(n-56320),o++),r<128?e[a++]=r:(r<2048?e[a++]=192|r>>>6:(r<65536?e[a++]=224|r>>>12:(e[a++]=240|r>>>18,e[a++]=128|r>>>12&63),e[a++]=128|r>>>6&63),e[a++]=128|63&r);return e}(t)},r.utf8decode=function(t){return i.nodebuffer?n.transformTo("nodebuffer",t).toString("utf-8"):function(t){var e,r,i,o,a=t.length,u=new Array(2*a);for(e=r=0;e<a;)if((i=t[e++])<128)u[r++]=i;else if(4<(o=s[i]))u[r++]=65533,e+=o-1;else{for(i&=2===o?31:3===o?15:7;1<o&&e<a;)i=i<<6|63&t[e++],o--;1<o?u[r++]=65533:i<65536?u[r++]=i:(i-=65536,u[r++]=55296|i>>10&1023,u[r++]=56320|1023&i)}return u.length!==r&&(u.subarray?u=u.subarray(0,r):u.length=r),n.applyFromCharCode(u)}(t=n.transformTo(i.uint8array?"uint8array":"array",t))},n.inherits(c,a),c.prototype.processChunk=function(t){var e=n.transformTo(i.uint8array?"uint8array":"array",t.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var o=e;(e=new Uint8Array(o.length+this.leftOver.length)).set(this.leftOver,0),e.set(o,this.leftOver.length)}else e=this.leftOver.concat(e);this.leftOver=null}var a=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0||0===r?e:r+s[t[r]]>e?r:e}(e),u=e;a!==e.length&&(i.uint8array?(u=e.subarray(0,a),this.leftOver=e.subarray(a,e.length)):(u=e.slice(0,a),this.leftOver=e.slice(a,e.length))),this.push({data:r.utf8decode(u),meta:t.meta})},c.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},r.Utf8DecodeWorker=c,n.inherits(l,a),l.prototype.processChunk=function(t){this.push({data:r.utf8encode(t.data),meta:t.meta})},r.Utf8EncodeWorker=l},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(t,e,r){"use strict";var n=t("./support"),i=t("./base64"),o=t("./nodejsUtils"),a=t("set-immediate-shim"),s=t("./external");function u(t){return t}function c(t,e){for(var r=0;r<t.length;++r)e[r]=255&t.charCodeAt(r);return e}r.newBlob=function(t,e){r.checkSupport("blob");try{return new Blob([t],{type:e})}catch(r){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(e)}catch(t){throw new Error("Bug : can't construct the Blob.")}}};var l={stringifyByChunk:function(t,e,r){var n=[],i=0,o=t.length;if(o<=r)return String.fromCharCode.apply(null,t);for(;i<o;)"array"===e||"nodebuffer"===e?n.push(String.fromCharCode.apply(null,t.slice(i,Math.min(i+r,o)))):n.push(String.fromCharCode.apply(null,t.subarray(i,Math.min(i+r,o)))),i+=r;return n.join("")},stringifyByChar:function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e},applyCanBeUsed:{uint8array:function(){try{return n.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return!1}}(),nodebuffer:function(){try{return n.nodebuffer&&1===String.fromCharCode.apply(null,o.allocBuffer(1)).length}catch(t){return!1}}()}};function h(t){var e=65536,n=r.getTypeOf(t),i=!0;if("uint8array"===n?i=l.applyCanBeUsed.uint8array:"nodebuffer"===n&&(i=l.applyCanBeUsed.nodebuffer),i)for(;1<e;)try{return l.stringifyByChunk(t,n,e)}catch(t){e=Math.floor(e/2)}return l.stringifyByChar(t)}function f(t,e){for(var r=0;r<t.length;r++)e[r]=t[r];return e}r.applyFromCharCode=h;var d={};d.string={string:u,array:function(t){return c(t,new Array(t.length))},arraybuffer:function(t){return d.string.uint8array(t).buffer},uint8array:function(t){return c(t,new Uint8Array(t.length))},nodebuffer:function(t){return c(t,o.allocBuffer(t.length))}},d.array={string:h,array:u,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return o.newBufferFrom(t)}},d.arraybuffer={string:function(t){return h(new Uint8Array(t))},array:function(t){return f(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:u,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return o.newBufferFrom(new Uint8Array(t))}},d.uint8array={string:h,array:function(t){return f(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:u,nodebuffer:function(t){return o.newBufferFrom(t)}},d.nodebuffer={string:h,array:function(t){return f(t,new Array(t.length))},arraybuffer:function(t){return d.nodebuffer.uint8array(t).buffer},uint8array:function(t){return f(t,new Uint8Array(t.length))},nodebuffer:u},r.transformTo=function(t,e){if(e=e||"",!t)return e;r.checkSupport(t);var n=r.getTypeOf(e);return d[n][t](e)},r.getTypeOf=function(t){return"string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":n.nodebuffer&&o.isBuffer(t)?"nodebuffer":n.uint8array&&t instanceof Uint8Array?"uint8array":n.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(t){if(!n[t.toLowerCase()])throw new Error(t+" is not supported by this platform")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(t){var e,r,n="";for(r=0;r<(t||"").length;r++)n+="\\x"+((e=t.charCodeAt(r))<16?"0":"")+e.toString(16).toUpperCase();return n},r.delay=function(t,e,r){a((function(){t.apply(r||null,e||[])}))},r.inherits=function(t,e){function r(){}r.prototype=e.prototype,t.prototype=new r},r.extend=function(){var t,e,r={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===r[e]&&(r[e]=arguments[t][e]);return r},r.prepareContent=function(t,e,o,a,u){return s.Promise.resolve(e).then((function(t){return n.blob&&(t instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(t)))&&"undefined"!=typeof FileReader?new s.Promise((function(e,r){var n=new FileReader;n.onload=function(t){e(t.target.result)},n.onerror=function(t){r(t.target.error)},n.readAsArrayBuffer(t)})):t})).then((function(e){var l=r.getTypeOf(e);return l?("arraybuffer"===l?e=r.transformTo("uint8array",e):"string"===l&&(u?e=i.decode(e):o&&!0!==a&&(e=function(t){return c(t,n.uint8array?new Uint8Array(t.length):new Array(t.length))}(e))),e):s.Promise.reject(new Error("Can't read the data of '"+t+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(t,e,r){"use strict";var n=t("./reader/readerFor"),i=t("./utils"),o=t("./signature"),a=t("./zipEntry"),s=(t("./utf8"),t("./support"));function u(t){this.files=[],this.loadOptions=t}u.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(e)+", expected "+i.pretty(t)+")")}},isSignature:function(t,e){var r=this.reader.index;this.reader.setIndex(t);var n=this.reader.readString(4)===e;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=s.uint8array?"uint8array":"array",r=i.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,r,n=this.zip64EndOfCentralSize-44;0<n;)t=this.reader.readInt(2),e=this.reader.readInt(4),r=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(o.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(o.CENTRAL_FILE_HEADER);)(t=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(o.CENTRAL_DIRECTORY_END);if(t<0)throw this.isSignature(0,o.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(t);var e=t;if(this.checkSignature(o.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(t),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,o.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=e-r;if(0<n)this.isSignature(e,o.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(t){this.reader=n(t)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},e.exports=u},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(t,e,r){"use strict";var n=t("./reader/readerFor"),i=t("./utils"),o=t("./compressedObject"),a=t("./crc32"),s=t("./utf8"),u=t("./compressions"),c=t("./support");function l(t,e){this.options=t,this.loadOptions=e}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,r;if(t.skip(22),this.fileNameLength=t.readInt(2),r=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(e=function(t){for(var e in u)if(u.hasOwnProperty(e)&&u[e].magic===t)return u[e];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new o(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize))},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==t&&(this.dosPermissions=63&this.externalFileAttributes),3==t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(t){var e,r,n,i=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index+4<i;)e=t.readInt(2),r=t.readInt(2),n=t.readData(r),this.extraFields[e]={id:e,length:r,value:n};t.setIndex(i)},handleUTF8:function(){var t=c.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=s.utf8decode(this.fileName),this.fileCommentStr=s.utf8decode(this.fileComment);else{var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else{var r=i.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var o=i.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(o)}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=n(t.value);return 1!==e.readInt(1)||a(this.fileName)!==e.readInt(4)?null:s.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=n(t.value);return 1!==e.readInt(1)||a(this.fileComment)!==e.readInt(4)?null:s.utf8decode(e.readData(t.length-5))}return null}},e.exports=l},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(t,e,r){"use strict";function n(t,e,r){this.name=t,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=e,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var i=t("./stream/StreamHelper"),o=t("./stream/DataWorker"),a=t("./utf8"),s=t("./compressedObject"),u=t("./stream/GenericWorker");n.prototype={internalStream:function(t){var e=null,r="string";try{if(!t)throw new Error("No output type specified.");var n="string"===(r=t.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),e=this._decompressWorker();var o=!this._dataBinary;o&&!n&&(e=e.pipe(new a.Utf8EncodeWorker)),!o&&n&&(e=e.pipe(new a.Utf8DecodeWorker))}catch(t){(e=new u("error")).error(t)}return new i(e,r,"")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||"nodebuffer").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof s&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),s.createWorkerFrom(r,t,e)},_decompressWorker:function(){return this._data instanceof s?this._data.getContentWorker():this._data instanceof u?this._data:new o(this._data)}};for(var c=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},h=0;h<c.length;h++)n.prototype[c[h]]=l;e.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(t,e,n){(function(t){"use strict";var r,n,i=t.MutationObserver||t.WebKitMutationObserver;if(i){var o=0,a=new i(l),s=t.document.createTextNode("");a.observe(s,{characterData:!0}),r=function(){s.data=o=++o%2}}else if(t.setImmediate||void 0===t.MessageChannel)r="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){l(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(l,0)};else{var u=new t.MessageChannel;u.port1.onmessage=l,r=function(){u.port2.postMessage(0)}}var c=[];function l(){var t,e;n=!0;for(var r=c.length;r;){for(e=c,c=[],t=-1;++t<r;)e[t]();r=c.length}n=!1}e.exports=function(t){1!==c.push(t)||n||r()}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(t,e,r){"use strict";var n=t("immediate");function i(){}var o={},a=["REJECTED"],s=["FULFILLED"],u=["PENDING"];function c(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,t!==i&&d(this,t)}function l(t,e,r){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function h(t,e,r){n((function(){var n;try{n=e(r)}catch(n){return o.reject(t,n)}n===t?o.reject(t,new TypeError("Cannot resolve promise with itself")):o.resolve(t,n)}))}function f(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function d(t,e){var r=!1;function n(e){r||(r=!0,o.reject(t,e))}function i(e){r||(r=!0,o.resolve(t,e))}var a=p((function(){e(i,n)}));"error"===a.status&&n(a.value)}function p(t,e){var r={};try{r.value=t(e),r.status="success"}catch(t){r.status="error",r.value=t}return r}(e.exports=c).prototype.finally=function(t){if("function"!=typeof t)return this;var e=this.constructor;return this.then((function(r){return e.resolve(t()).then((function(){return r}))}),(function(r){return e.resolve(t()).then((function(){throw r}))}))},c.prototype.catch=function(t){return this.then(null,t)},c.prototype.then=function(t,e){if("function"!=typeof t&&this.state===s||"function"!=typeof e&&this.state===a)return this;var r=new this.constructor(i);return this.state!==u?h(r,this.state===s?t:e,this.outcome):this.queue.push(new l(r,t,e)),r},l.prototype.callFulfilled=function(t){o.resolve(this.promise,t)},l.prototype.otherCallFulfilled=function(t){h(this.promise,this.onFulfilled,t)},l.prototype.callRejected=function(t){o.reject(this.promise,t)},l.prototype.otherCallRejected=function(t){h(this.promise,this.onRejected,t)},o.resolve=function(t,e){var r=p(f,e);if("error"===r.status)return o.reject(t,r.value);var n=r.value;if(n)d(t,n);else{t.state=s,t.outcome=e;for(var i=-1,a=t.queue.length;++i<a;)t.queue[i].callFulfilled(e)}return t},o.reject=function(t,e){t.state=a,t.outcome=e;for(var r=-1,n=t.queue.length;++r<n;)t.queue[r].callRejected(e);return t},c.resolve=function(t){return t instanceof this?t:o.resolve(new this(i),t)},c.reject=function(t){var e=new this(i);return o.reject(e,t)},c.all=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var r=t.length,n=!1;if(!r)return this.resolve([]);for(var a=new Array(r),s=0,u=-1,c=new this(i);++u<r;)l(t[u],u);return c;function l(t,i){e.resolve(t).then((function(t){a[i]=t,++s!==r||n||(n=!0,o.resolve(c,a))}),(function(t){n||(n=!0,o.reject(c,t))}))}},c.race=function(t){if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var e=t.length,r=!1;if(!e)return this.resolve([]);for(var n,a=-1,s=new this(i);++a<e;)n=t[a],this.resolve(n).then((function(t){r||(r=!0,o.resolve(s,t))}),(function(t){r||(r=!0,o.reject(s,t))}));return s}},{immediate:36}],38:[function(t,e,r){"use strict";var n={};(0,t("./lib/utils/common").assign)(n,t("./lib/deflate"),t("./lib/inflate"),t("./lib/zlib/constants")),e.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(t,e,r){"use strict";var n=t("./zlib/deflate"),i=t("./utils/common"),o=t("./utils/strings"),a=t("./zlib/messages"),s=t("./zlib/zstream"),u=Object.prototype.toString;function c(t){if(!(this instanceof c))return new c(t);this.options=i.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},t||{});var e=this.options;e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(0!==r)throw new Error(a[r]);if(e.header&&n.deflateSetHeader(this.strm,e.header),e.dictionary){var l;if(l="string"==typeof e.dictionary?o.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,0!==(r=n.deflateSetDictionary(this.strm,l)))throw new Error(a[r]);this._dict_set=!0}}function l(t,e){var r=new c(e);if(r.push(t,!0),r.err)throw r.msg||a[r.err];return r.result}c.prototype.push=function(t,e){var r,a,s=this.strm,c=this.options.chunkSize;if(this.ended)return!1;a=e===~~e?e:!0===e?4:0,"string"==typeof t?s.input=o.string2buf(t):"[object ArrayBuffer]"===u.call(t)?s.input=new Uint8Array(t):s.input=t,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new i.Buf8(c),s.next_out=0,s.avail_out=c),1!==(r=n.deflate(s,a))&&0!==r)return this.onEnd(r),!(this.ended=!0);0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(o.buf2binstring(i.shrinkBuf(s.output,s.next_out))):this.onData(i.shrinkBuf(s.output,s.next_out)))}while((0<s.avail_in||0===s.avail_out)&&1!==r);return 4===a?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):2!==a||(this.onEnd(0),!(s.avail_out=0))},c.prototype.onData=function(t){this.chunks.push(t)},c.prototype.onEnd=function(t){0===t&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Deflate=c,r.deflate=l,r.deflateRaw=function(t,e){return(e=e||{}).raw=!0,l(t,e)},r.gzip=function(t,e){return(e=e||{}).gzip=!0,l(t,e)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(t,e,r){"use strict";var n=t("./zlib/inflate"),i=t("./utils/common"),o=t("./utils/strings"),a=t("./zlib/constants"),s=t("./zlib/messages"),u=t("./zlib/zstream"),c=t("./zlib/gzheader"),l=Object.prototype.toString;function h(t){if(!(this instanceof h))return new h(t);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&0<=e.windowBits&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(0<=e.windowBits&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),15<e.windowBits&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,e.windowBits);if(r!==a.Z_OK)throw new Error(s[r]);this.header=new c,n.inflateGetHeader(this.strm,this.header)}function f(t,e){var r=new h(e);if(r.push(t,!0),r.err)throw r.msg||s[r.err];return r.result}h.prototype.push=function(t,e){var r,s,u,c,h,f,d=this.strm,p=this.options.chunkSize,g=this.options.dictionary,v=!1;if(this.ended)return!1;s=e===~~e?e:!0===e?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof t?d.input=o.binstring2buf(t):"[object ArrayBuffer]"===l.call(t)?d.input=new Uint8Array(t):d.input=t,d.next_in=0,d.avail_in=d.input.length;do{if(0===d.avail_out&&(d.output=new i.Buf8(p),d.next_out=0,d.avail_out=p),(r=n.inflate(d,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&g&&(f="string"==typeof g?o.string2buf(g):"[object ArrayBuffer]"===l.call(g)?new Uint8Array(g):g,r=n.inflateSetDictionary(this.strm,f)),r===a.Z_BUF_ERROR&&!0===v&&(r=a.Z_OK,v=!1),r!==a.Z_STREAM_END&&r!==a.Z_OK)return this.onEnd(r),!(this.ended=!0);d.next_out&&(0!==d.avail_out&&r!==a.Z_STREAM_END&&(0!==d.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(d.output,d.next_out),c=d.next_out-u,h=o.buf2string(d.output,u),d.next_out=c,d.avail_out=p-c,c&&i.arraySet(d.output,d.output,u,c,0),this.onData(h)):this.onData(i.shrinkBuf(d.output,d.next_out)))),0===d.avail_in&&0===d.avail_out&&(v=!0)}while((0<d.avail_in||0===d.avail_out)&&r!==a.Z_STREAM_END);return r===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),!(d.avail_out=0))},h.prototype.onData=function(t){this.chunks.push(t)},h.prototype.onEnd=function(t){t===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Inflate=h,r.inflate=f,r.inflateRaw=function(t,e){return(e=e||{}).raw=!0,f(t,e)},r.ungzip=f},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(t,e,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(t[n]=r[n])}}return t},r.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var i={arraySet:function(t,e,r,n,i){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+n),i);else for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){var e,r,n,i,o,a;for(e=n=0,r=t.length;e<r;e++)n+=t[e].length;for(a=new Uint8Array(n),e=i=0,r=t.length;e<r;e++)o=t[e],a.set(o,i),i+=o.length;return a}},o={arraySet:function(t,e,r,n,i){for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){return[].concat.apply([],t)}};r.setTyped=function(t){t?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,o))},r.setTyped(n)},{}],42:[function(t,e,r){"use strict";var n=t("./common"),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(t){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){o=!1}for(var a=new n.Buf8(256),s=0;s<256;s++)a[s]=252<=s?6:248<=s?5:240<=s?4:224<=s?3:192<=s?2:1;function u(t,e){if(e<65537&&(t.subarray&&o||!t.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var r="",a=0;a<e;a++)r+=String.fromCharCode(t[a]);return r}a[254]=a[254]=1,r.string2buf=function(t){var e,r,i,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(e=new n.Buf8(u),o=a=0;a<u;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),r<128?e[a++]=r:(r<2048?e[a++]=192|r>>>6:(r<65536?e[a++]=224|r>>>12:(e[a++]=240|r>>>18,e[a++]=128|r>>>12&63),e[a++]=128|r>>>6&63),e[a++]=128|63&r);return e},r.buf2binstring=function(t){return u(t,t.length)},r.binstring2buf=function(t){for(var e=new n.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},r.buf2string=function(t,e){var r,n,i,o,s=e||t.length,c=new Array(2*s);for(r=n=0;r<s;)if((i=t[r++])<128)c[n++]=i;else if(4<(o=a[i]))c[n++]=65533,r+=o-1;else{for(i&=2===o?31:3===o?15:7;1<o&&r<s;)i=i<<6|63&t[r++],o--;1<o?c[n++]=65533:i<65536?c[n++]=i:(i-=65536,c[n++]=55296|i>>10&1023,c[n++]=56320|1023&i)}return u(c,n)},r.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0||0===r?e:r+a[t[r]]>e?r:e}},{"./common":41}],43:[function(t,e,r){"use strict";e.exports=function(t,e,r,n){for(var i=65535&t|0,o=t>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;o=o+(i=i+e[n++]|0)|0,--a;);i%=65521,o%=65521}return i|o<<16|0}},{}],44:[function(t,e,r){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(t,e,r){"use strict";var n=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e,r,i){var o=n,a=i+r;t^=-1;for(var s=i;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}},{}],46:[function(t,e,r){"use strict";var n,i=t("../utils/common"),o=t("./trees"),a=t("./adler32"),s=t("./crc32"),u=t("./messages"),c=-2,l=258,h=262,f=113;function d(t,e){return t.msg=u[e],e}function p(t){return(t<<1)-(4<t?9:0)}function g(t){for(var e=t.length;0<=--e;)t[e]=0}function v(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(i.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function m(t,e){o._tr_flush_block(t,0<=t.block_start?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,v(t.strm)}function y(t,e){t.pending_buf[t.pending++]=e}function b(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function w(t,e){var r,n,i=t.max_chain_length,o=t.strstart,a=t.prev_length,s=t.nice_match,u=t.strstart>t.w_size-h?t.strstart-(t.w_size-h):0,c=t.window,f=t.w_mask,d=t.prev,p=t.strstart+l,g=c[o+a-1],v=c[o+a];t.prev_length>=t.good_match&&(i>>=2),s>t.lookahead&&(s=t.lookahead);do{if(c[(r=e)+a]===v&&c[r+a-1]===g&&c[r]===c[o]&&c[++r]===c[o+1]){o+=2,r++;do{}while(c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&o<p);if(n=l-(p-o),o=p-l,a<n){if(t.match_start=e,s<=(a=n))break;g=c[o+a-1],v=c[o+a]}}}while((e=d[e&f])>u&&0!=--i);return a<=t.lookahead?a:t.lookahead}function x(t){var e,r,n,o,u,c,l,f,d,p,g=t.w_size;do{if(o=t.window_size-t.lookahead-t.strstart,t.strstart>=g+(g-h)){for(i.arraySet(t.window,t.window,g,g,0),t.match_start-=g,t.strstart-=g,t.block_start-=g,e=r=t.hash_size;n=t.head[--e],t.head[e]=g<=n?n-g:0,--r;);for(e=r=g;n=t.prev[--e],t.prev[e]=g<=n?n-g:0,--r;);o+=g}if(0===t.strm.avail_in)break;if(c=t.strm,l=t.window,f=t.strstart+t.lookahead,p=void 0,(d=o)<(p=c.avail_in)&&(p=d),r=0===p?0:(c.avail_in-=p,i.arraySet(l,c.input,c.next_in,p,f),1===c.state.wrap?c.adler=a(c.adler,l,p,f):2===c.state.wrap&&(c.adler=s(c.adler,l,p,f)),c.next_in+=p,c.total_in+=p,p),t.lookahead+=r,t.lookahead+t.insert>=3)for(u=t.strstart-t.insert,t.ins_h=t.window[u],t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+3-1])&t.hash_mask,t.prev[u&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=u,u++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<h&&0!==t.strm.avail_in)}function A(t,e){for(var r,n;;){if(t.lookahead<h){if(x(t),t.lookahead<h&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-h&&(t.match_length=w(t,r)),t.match_length>=3)if(n=o._tr_tally(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){for(t.match_length--;t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart,0!=--t.match_length;);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(m(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,4===e?(m(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(m(t,!1),0===t.strm.avail_out)?1:2}function C(t,e){for(var r,n,i;;){if(t.lookahead<h){if(x(t),t.lookahead<h&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-h&&(t.match_length=w(t,r),t.match_length<=5&&(1===t.strategy||3===t.match_length&&4096<t.strstart-t.match_start)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){for(i=t.strstart+t.lookahead-3,n=o._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;++t.strstart<=i&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!=--t.prev_length;);if(t.match_available=0,t.match_length=2,t.strstart++,n&&(m(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if((n=o._tr_tally(t,0,t.window[t.strstart-1]))&&m(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(n=o._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,4===e?(m(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(m(t,!1),0===t.strm.avail_out)?1:2}function k(t,e,r,n,i){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=n,this.func=i}function S(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(1146),this.dyn_dtree=new i.Buf16(122),this.bl_tree=new i.Buf16(78),g(this.dyn_ltree),g(this.dyn_dtree),g(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(16),this.heap=new i.Buf16(573),g(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(573),g(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function F(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=2,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:f,t.adler=2===e.wrap?0:1,e.last_flush=0,o._tr_init(e),0):d(t,c)}function B(t){var e=F(t);return 0===e&&function(t){t.window_size=2*t.w_size,g(t.head),t.max_lazy_match=n[t.level].max_lazy,t.good_match=n[t.level].good_length,t.nice_match=n[t.level].nice_length,t.max_chain_length=n[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=2,t.match_available=0,t.ins_h=0}(t.state),e}function E(t,e,r,n,o,a){if(!t)return c;var s=1;if(-1===e&&(e=6),n<0?(s=0,n=-n):15<n&&(s=2,n-=16),o<1||9<o||8!==r||n<8||15<n||e<0||9<e||a<0||4<a)return d(t,c);8===n&&(n=9);var u=new S;return(t.state=u).strm=t,u.wrap=s,u.gzhead=null,u.w_bits=n,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+3-1)/3),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=e,u.strategy=a,u.method=r,B(t)}n=[new k(0,0,0,0,(function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(x(t),0===t.lookahead&&0===e)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var n=t.block_start+r;if((0===t.strstart||t.strstart>=n)&&(t.lookahead=t.strstart-n,t.strstart=n,m(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-h&&(m(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(m(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(m(t,!1),t.strm.avail_out),1)})),new k(4,4,8,4,A),new k(4,5,16,8,A),new k(4,6,32,32,A),new k(4,4,16,16,C),new k(8,16,32,32,C),new k(8,16,128,128,C),new k(8,32,128,256,C),new k(32,128,258,1024,C),new k(32,258,258,4096,C)],r.deflateInit=function(t,e){return E(t,e,8,15,8,0)},r.deflateInit2=E,r.deflateReset=B,r.deflateResetKeep=F,r.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?c:(t.state.gzhead=e,0):c},r.deflate=function(t,e){var r,i,a,u;if(!t||!t.state||5<e||e<0)return t?d(t,c):c;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||666===i.status&&4!==e)return d(t,0===t.avail_out?-5:c);if(i.strm=t,r=i.last_flush,i.last_flush=e,42===i.status)if(2===i.wrap)t.adler=0,y(i,31),y(i,139),y(i,8),i.gzhead?(y(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),y(i,255&i.gzhead.time),y(i,i.gzhead.time>>8&255),y(i,i.gzhead.time>>16&255),y(i,i.gzhead.time>>24&255),y(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),y(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(y(i,255&i.gzhead.extra.length),y(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=s(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(y(i,0),y(i,0),y(i,0),y(i,0),y(i,0),y(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),y(i,3),i.status=f);else{var h=8+(i.w_bits-8<<4)<<8;h|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(h|=32),h+=31-h%31,i.status=f,b(i,h),0!==i.strstart&&(b(i,t.adler>>>16),b(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),v(t),a=i.pending,i.pending!==i.pending_buf_size));)y(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),v(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,y(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),v(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,y(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&v(t),i.pending+2<=i.pending_buf_size&&(y(i,255&t.adler),y(i,t.adler>>8&255),t.adler=0,i.status=f)):i.status=f),0!==i.pending){if(v(t),0===t.avail_out)return i.last_flush=-1,0}else if(0===t.avail_in&&p(e)<=p(r)&&4!==e)return d(t,-5);if(666===i.status&&0!==t.avail_in)return d(t,-5);if(0!==t.avail_in||0!==i.lookahead||0!==e&&666!==i.status){var w=2===i.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(x(t),0===t.lookahead)){if(0===e)return 1;break}if(t.match_length=0,r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(m(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(m(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(m(t,!1),0===t.strm.avail_out)?1:2}(i,e):3===i.strategy?function(t,e){for(var r,n,i,a,s=t.window;;){if(t.lookahead<=l){if(x(t),t.lookahead<=l&&0===e)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&0<t.strstart&&(n=s[i=t.strstart-1])===s[++i]&&n===s[++i]&&n===s[++i]){a=t.strstart+l;do{}while(n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&i<a);t.match_length=l-(a-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(r=o._tr_tally(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(m(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(m(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(m(t,!1),0===t.strm.avail_out)?1:2}(i,e):n[i.level].func(i,e);if(3!==w&&4!==w||(i.status=666),1===w||3===w)return 0===t.avail_out&&(i.last_flush=-1),0;if(2===w&&(1===e?o._tr_align(i):5!==e&&(o._tr_stored_block(i,0,0,!1),3===e&&(g(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),v(t),0===t.avail_out))return i.last_flush=-1,0}return 4!==e?0:i.wrap<=0?1:(2===i.wrap?(y(i,255&t.adler),y(i,t.adler>>8&255),y(i,t.adler>>16&255),y(i,t.adler>>24&255),y(i,255&t.total_in),y(i,t.total_in>>8&255),y(i,t.total_in>>16&255),y(i,t.total_in>>24&255)):(b(i,t.adler>>>16),b(i,65535&t.adler)),v(t),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?0:1)},r.deflateEnd=function(t){var e;return t&&t.state?42!==(e=t.state.status)&&69!==e&&73!==e&&91!==e&&103!==e&&e!==f&&666!==e?d(t,c):(t.state=null,e===f?d(t,-3):0):c},r.deflateSetDictionary=function(t,e){var r,n,o,s,u,l,h,f,d=e.length;if(!t||!t.state)return c;if(2===(s=(r=t.state).wrap)||1===s&&42!==r.status||r.lookahead)return c;for(1===s&&(t.adler=a(t.adler,e,d,0)),r.wrap=0,d>=r.w_size&&(0===s&&(g(r.head),r.strstart=0,r.block_start=0,r.insert=0),f=new i.Buf8(r.w_size),i.arraySet(f,e,d-r.w_size,r.w_size,0),e=f,d=r.w_size),u=t.avail_in,l=t.next_in,h=t.input,t.avail_in=d,t.next_in=0,t.input=e,x(r);r.lookahead>=3;){for(n=r.strstart,o=r.lookahead-2;r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+3-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--o;);r.strstart=n,r.lookahead=2,x(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,t.next_in=l,t.input=h,t.avail_in=u,r.wrap=s,0},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(t,e,r){"use strict";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(t,e,r){"use strict";e.exports=function(t,e){var r,n,i,o,a,s,u,c,l,h,f,d,p,g,v,m,y,b,w,x,A,C,k,S,F;r=t.state,n=t.next_in,S=t.input,i=n+(t.avail_in-5),o=t.next_out,F=t.output,a=o-(e-t.avail_out),s=o+(t.avail_out-257),u=r.dmax,c=r.wsize,l=r.whave,h=r.wnext,f=r.window,d=r.hold,p=r.bits,g=r.lencode,v=r.distcode,m=(1<<r.lenbits)-1,y=(1<<r.distbits)-1;t:do{p<15&&(d+=S[n++]<<p,p+=8,d+=S[n++]<<p,p+=8),b=g[d&m];e:for(;;){if(d>>>=w=b>>>24,p-=w,0==(w=b>>>16&255))F[o++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=g[(65535&b)+(d&(1<<w)-1)];continue e}if(32&w){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}x=65535&b,(w&=15)&&(p<w&&(d+=S[n++]<<p,p+=8),x+=d&(1<<w)-1,d>>>=w,p-=w),p<15&&(d+=S[n++]<<p,p+=8,d+=S[n++]<<p,p+=8),b=v[d&y];r:for(;;){if(d>>>=w=b>>>24,p-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=v[(65535&b)+(d&(1<<w)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(A=65535&b,p<(w&=15)&&(d+=S[n++]<<p,(p+=8)<w&&(d+=S[n++]<<p,p+=8)),u<(A+=d&(1<<w)-1)){t.msg="invalid distance too far back",r.mode=30;break t}if(d>>>=w,p-=w,(w=o-a)<A){if(l<(w=A-w)&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(k=f,(C=0)===h){if(C+=c-w,w<x){for(x-=w;F[o++]=f[C++],--w;);C=o-A,k=F}}else if(h<w){if(C+=c+h-w,(w-=h)<x){for(x-=w;F[o++]=f[C++],--w;);if(C=0,h<x){for(x-=w=h;F[o++]=f[C++],--w;);C=o-A,k=F}}}else if(C+=h-w,w<x){for(x-=w;F[o++]=f[C++],--w;);C=o-A,k=F}for(;2<x;)F[o++]=k[C++],F[o++]=k[C++],F[o++]=k[C++],x-=3;x&&(F[o++]=k[C++],1<x&&(F[o++]=k[C++]))}else{for(C=o-A;F[o++]=F[C++],F[o++]=F[C++],F[o++]=F[C++],2<(x-=3););x&&(F[o++]=F[C++],1<x&&(F[o++]=F[C++]))}break}}break}}while(n<i&&o<s);n-=x=p>>3,d&=(1<<(p-=x<<3))-1,t.next_in=n,t.next_out=o,t.avail_in=n<i?i-n+5:5-(n-i),t.avail_out=o<s?s-o+257:257-(o-s),r.hold=d,r.bits=p}},{}],49:[function(t,e,r){"use strict";var n=t("../utils/common"),i=t("./adler32"),o=t("./crc32"),a=t("./inffast"),s=t("./inftrees"),u=-2;function c(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function l(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function h(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new n.Buf32(852),e.distcode=e.distdyn=new n.Buf32(592),e.sane=1,e.back=-1,0):u}function f(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,h(t)):u}function d(t,e){var r,n;return t&&t.state?(n=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||15<e)?u:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,f(t))):u}function p(t,e){var r,n;return t?(n=new l,(t.state=n).window=null,0!==(r=d(t,e))&&(t.state=null),r):u}var g,v,m=!0;function y(t){if(m){var e;for(g=new n.Buf32(512),v=new n.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(1,t.lens,0,288,g,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(2,t.lens,0,32,v,0,t.work,{bits:5}),m=!1}t.lencode=g,t.lenbits=9,t.distcode=v,t.distbits=5}function b(t,e,r,i){var o,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new n.Buf8(a.wsize)),i>=a.wsize?(n.arraySet(a.window,e,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(i<(o=a.wsize-a.wnext)&&(o=i),n.arraySet(a.window,e,r-i,o,a.wnext),(i-=o)?(n.arraySet(a.window,e,r-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}r.inflateReset=f,r.inflateReset2=d,r.inflateResetKeep=h,r.inflateInit=function(t){return p(t,15)},r.inflateInit2=p,r.inflate=function(t,e){var r,l,h,f,d,p,g,v,m,w,x,A,C,k,S,F,B,E,T,O,z,R,P,D,N=0,I=new n.Buf8(4),j=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return u;12===(r=t.state).mode&&(r.mode=13),d=t.next_out,h=t.output,g=t.avail_out,f=t.next_in,l=t.input,p=t.avail_in,v=r.hold,m=r.bits,w=p,x=g,R=0;t:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;m<16;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}if(2&r.wrap&&35615===v){I[r.check=0]=255&v,I[1]=v>>>8&255,r.check=o(r.check,I,2,0),m=v=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&v)<<8)+(v>>8))%31){t.msg="incorrect header check",r.mode=30;break}if(8!=(15&v)){t.msg="unknown compression method",r.mode=30;break}if(m-=4,z=8+(15&(v>>>=4)),0===r.wbits)r.wbits=z;else if(z>r.wbits){t.msg="invalid window size",r.mode=30;break}r.dmax=1<<z,t.adler=r.check=1,r.mode=512&v?10:12,m=v=0;break;case 2:for(;m<16;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}if(r.flags=v,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=v>>8&1),512&r.flags&&(I[0]=255&v,I[1]=v>>>8&255,r.check=o(r.check,I,2,0)),m=v=0,r.mode=3;case 3:for(;m<32;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}r.head&&(r.head.time=v),512&r.flags&&(I[0]=255&v,I[1]=v>>>8&255,I[2]=v>>>16&255,I[3]=v>>>24&255,r.check=o(r.check,I,4,0)),m=v=0,r.mode=4;case 4:for(;m<16;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}r.head&&(r.head.xflags=255&v,r.head.os=v>>8),512&r.flags&&(I[0]=255&v,I[1]=v>>>8&255,r.check=o(r.check,I,2,0)),m=v=0,r.mode=5;case 5:if(1024&r.flags){for(;m<16;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}r.length=v,r.head&&(r.head.extra_len=v),512&r.flags&&(I[0]=255&v,I[1]=v>>>8&255,r.check=o(r.check,I,2,0)),m=v=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(p<(A=r.length)&&(A=p),A&&(r.head&&(z=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,l,f,A,z)),512&r.flags&&(r.check=o(r.check,l,A,f)),p-=A,f+=A,r.length-=A),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===p)break t;for(A=0;z=l[f+A++],r.head&&z&&r.length<65536&&(r.head.name+=String.fromCharCode(z)),z&&A<p;);if(512&r.flags&&(r.check=o(r.check,l,A,f)),p-=A,f+=A,z)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===p)break t;for(A=0;z=l[f+A++],r.head&&z&&r.length<65536&&(r.head.comment+=String.fromCharCode(z)),z&&A<p;);if(512&r.flags&&(r.check=o(r.check,l,A,f)),p-=A,f+=A,z)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;m<16;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}if(v!==(65535&r.check)){t.msg="header crc mismatch",r.mode=30;break}m=v=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=12;break;case 10:for(;m<32;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}t.adler=r.check=c(v),m=v=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=d,t.avail_out=g,t.next_in=f,t.avail_in=p,r.hold=v,r.bits=m,2;t.adler=r.check=1,r.mode=12;case 12:if(5===e||6===e)break t;case 13:if(r.last){v>>>=7&m,m-=7&m,r.mode=27;break}for(;m<3;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}switch(r.last=1&v,m-=1,3&(v>>>=1)){case 0:r.mode=14;break;case 1:if(y(r),r.mode=20,6!==e)break;v>>>=2,m-=2;break t;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=30}v>>>=2,m-=2;break;case 14:for(v>>>=7&m,m-=7&m;m<32;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}if((65535&v)!=(v>>>16^65535)){t.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&v,m=v=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(A=r.length){if(p<A&&(A=p),g<A&&(A=g),0===A)break t;n.arraySet(h,l,f,A,d),p-=A,f+=A,g-=A,d+=A,r.length-=A;break}r.mode=12;break;case 17:for(;m<14;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}if(r.nlen=257+(31&v),v>>>=5,m-=5,r.ndist=1+(31&v),v>>>=5,m-=5,r.ncode=4+(15&v),v>>>=4,m-=4,286<r.nlen||30<r.ndist){t.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;m<3;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}r.lens[j[r.have++]]=7&v,v>>>=3,m-=3}for(;r.have<19;)r.lens[j[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,P={bits:r.lenbits},R=s(0,r.lens,0,19,r.lencode,0,r.work,P),r.lenbits=P.bits,R){t.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;F=(N=r.lencode[v&(1<<r.lenbits)-1])>>>16&255,B=65535&N,!((S=N>>>24)<=m);){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}if(B<16)v>>>=S,m-=S,r.lens[r.have++]=B;else{if(16===B){for(D=S+2;m<D;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}if(v>>>=S,m-=S,0===r.have){t.msg="invalid bit length repeat",r.mode=30;break}z=r.lens[r.have-1],A=3+(3&v),v>>>=2,m-=2}else if(17===B){for(D=S+3;m<D;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}m-=S,z=0,A=3+(7&(v>>>=S)),v>>>=3,m-=3}else{for(D=S+7;m<D;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}m-=S,z=0,A=11+(127&(v>>>=S)),v>>>=7,m-=7}if(r.have+A>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=30;break}for(;A--;)r.lens[r.have++]=z}}if(30===r.mode)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,P={bits:r.lenbits},R=s(1,r.lens,0,r.nlen,r.lencode,0,r.work,P),r.lenbits=P.bits,R){t.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,P={bits:r.distbits},R=s(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,P),r.distbits=P.bits,R){t.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(6<=p&&258<=g){t.next_out=d,t.avail_out=g,t.next_in=f,t.avail_in=p,r.hold=v,r.bits=m,a(t,x),d=t.next_out,h=t.output,g=t.avail_out,f=t.next_in,l=t.input,p=t.avail_in,v=r.hold,m=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;F=(N=r.lencode[v&(1<<r.lenbits)-1])>>>16&255,B=65535&N,!((S=N>>>24)<=m);){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}if(F&&0==(240&F)){for(E=S,T=F,O=B;F=(N=r.lencode[O+((v&(1<<E+T)-1)>>E)])>>>16&255,B=65535&N,!(E+(S=N>>>24)<=m);){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}v>>>=E,m-=E,r.back+=E}if(v>>>=S,m-=S,r.back+=S,r.length=B,0===F){r.mode=26;break}if(32&F){r.back=-1,r.mode=12;break}if(64&F){t.msg="invalid literal/length code",r.mode=30;break}r.extra=15&F,r.mode=22;case 22:if(r.extra){for(D=r.extra;m<D;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}r.length+=v&(1<<r.extra)-1,v>>>=r.extra,m-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;F=(N=r.distcode[v&(1<<r.distbits)-1])>>>16&255,B=65535&N,!((S=N>>>24)<=m);){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}if(0==(240&F)){for(E=S,T=F,O=B;F=(N=r.distcode[O+((v&(1<<E+T)-1)>>E)])>>>16&255,B=65535&N,!(E+(S=N>>>24)<=m);){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}v>>>=E,m-=E,r.back+=E}if(v>>>=S,m-=S,r.back+=S,64&F){t.msg="invalid distance code",r.mode=30;break}r.offset=B,r.extra=15&F,r.mode=24;case 24:if(r.extra){for(D=r.extra;m<D;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}r.offset+=v&(1<<r.extra)-1,v>>>=r.extra,m-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===g)break t;if(A=x-g,r.offset>A){if((A=r.offset-A)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=30;break}C=A>r.wnext?(A-=r.wnext,r.wsize-A):r.wnext-A,A>r.length&&(A=r.length),k=r.window}else k=h,C=d-r.offset,A=r.length;for(g<A&&(A=g),g-=A,r.length-=A;h[d++]=k[C++],--A;);0===r.length&&(r.mode=21);break;case 26:if(0===g)break t;h[d++]=r.length,g--,r.mode=21;break;case 27:if(r.wrap){for(;m<32;){if(0===p)break t;p--,v|=l[f++]<<m,m+=8}if(x-=g,t.total_out+=x,r.total+=x,x&&(t.adler=r.check=r.flags?o(r.check,h,x,d-x):i(r.check,h,x,d-x)),x=g,(r.flags?v:c(v))!==r.check){t.msg="incorrect data check",r.mode=30;break}m=v=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;m<32;){if(0===p)break t;p--,v+=l[f++]<<m,m+=8}if(v!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=30;break}m=v=0}r.mode=29;case 29:R=1;break t;case 30:R=-3;break t;case 31:return-4;default:return u}return t.next_out=d,t.avail_out=g,t.next_in=f,t.avail_in=p,r.hold=v,r.bits=m,(r.wsize||x!==t.avail_out&&r.mode<30&&(r.mode<27||4!==e))&&b(t,t.output,t.next_out,x-t.avail_out)?(r.mode=31,-4):(w-=t.avail_in,x-=t.avail_out,t.total_in+=w,t.total_out+=x,r.total+=x,r.wrap&&x&&(t.adler=r.check=r.flags?o(r.check,h,x,t.next_out-x):i(r.check,h,x,t.next_out-x)),t.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==w&&0===x||4===e)&&0===R&&(R=-5),R)},r.inflateEnd=function(t){if(!t||!t.state)return u;var e=t.state;return e.window&&(e.window=null),t.state=null,0},r.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?u:((r.head=e).done=!1,0):u},r.inflateSetDictionary=function(t,e){var r,n=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?u:11===r.mode&&i(1,e,n,0)!==r.check?-3:b(t,e,n,n)?(r.mode=31,-4):(r.havedict=1,0):u},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(t,e,r){"use strict";var n=t("../utils/common"),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,r,u,c,l,h,f){var d,p,g,v,m,y,b,w,x,A=f.bits,C=0,k=0,S=0,F=0,B=0,E=0,T=0,O=0,z=0,R=0,P=null,D=0,N=new n.Buf16(16),I=new n.Buf16(16),j=null,U=0;for(C=0;C<=15;C++)N[C]=0;for(k=0;k<u;k++)N[e[r+k]]++;for(B=A,F=15;1<=F&&0===N[F];F--);if(F<B&&(B=F),0===F)return c[l++]=20971520,c[l++]=20971520,f.bits=1,0;for(S=1;S<F&&0===N[S];S++);for(B<S&&(B=S),C=O=1;C<=15;C++)if(O<<=1,(O-=N[C])<0)return-1;if(0<O&&(0===t||1!==F))return-1;for(I[1]=0,C=1;C<15;C++)I[C+1]=I[C]+N[C];for(k=0;k<u;k++)0!==e[r+k]&&(h[I[e[r+k]]++]=k);if(y=0===t?(P=j=h,19):1===t?(P=i,D-=257,j=o,U-=257,256):(P=a,j=s,-1),C=S,m=l,T=k=R=0,g=-1,v=(z=1<<(E=B))-1,1===t&&852<z||2===t&&592<z)return 1;for(;;){for(b=C-T,x=h[k]<y?(w=0,h[k]):h[k]>y?(w=j[U+h[k]],P[D+h[k]]):(w=96,0),d=1<<C-T,S=p=1<<E;c[m+(R>>T)+(p-=d)]=b<<24|w<<16|x|0,0!==p;);for(d=1<<C-1;R&d;)d>>=1;if(0!==d?(R&=d-1,R+=d):R=0,k++,0==--N[C]){if(C===F)break;C=e[r+h[k]]}if(B<C&&(R&v)!==g){for(0===T&&(T=B),m+=S,O=1<<(E=C-T);E+T<F&&!((O-=N[E+T])<=0);)E++,O<<=1;if(z+=1<<E,1===t&&852<z||2===t&&592<z)return 1;c[g=R&v]=B<<24|E<<16|m-l|0}}return 0!==R&&(c[m+R]=C-T<<24|64<<16|0),f.bits=B,0}},{"../utils/common":41}],51:[function(t,e,r){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(t,e,r){"use strict";var n=t("../utils/common");function i(t){for(var e=t.length;0<=--e;)t[e]=0}var o=256,a=286,s=30,u=15,c=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],l=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],h=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],f=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],d=new Array(576);i(d);var p=new Array(60);i(p);var g=new Array(512);i(g);var v=new Array(256);i(v);var m=new Array(29);i(m);var y,b,w,x=new Array(s);function A(t,e,r,n,i){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=t&&t.length}function C(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function k(t){return t<256?g[t]:g[256+(t>>>7)]}function S(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function F(t,e,r){t.bi_valid>16-r?(t.bi_buf|=e<<t.bi_valid&65535,S(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=r-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function B(t,e,r){F(t,r[2*e],r[2*e+1])}function E(t,e){for(var r=0;r|=1&t,t>>>=1,r<<=1,0<--e;);return r>>>1}function T(t,e,r){var n,i,o=new Array(16),a=0;for(n=1;n<=u;n++)o[n]=a=a+r[n-1]<<1;for(i=0;i<=e;i++){var s=t[2*i+1];0!==s&&(t[2*i]=E(o[s]++,s))}}function O(t){var e;for(e=0;e<a;e++)t.dyn_ltree[2*e]=0;for(e=0;e<s;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function z(t){8<t.bi_valid?S(t,t.bi_buf):0<t.bi_valid&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function R(t,e,r,n){var i=2*e,o=2*r;return t[i]<t[o]||t[i]===t[o]&&n[e]<=n[r]}function P(t,e,r){for(var n=t.heap[r],i=r<<1;i<=t.heap_len&&(i<t.heap_len&&R(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!R(e,n,t.heap[i],t.depth));)t.heap[r]=t.heap[i],r=i,i<<=1;t.heap[r]=n}function D(t,e,r){var n,i,a,s,u=0;if(0!==t.last_lit)for(;n=t.pending_buf[t.d_buf+2*u]<<8|t.pending_buf[t.d_buf+2*u+1],i=t.pending_buf[t.l_buf+u],u++,0===n?B(t,i,e):(B(t,(a=v[i])+o+1,e),0!==(s=c[a])&&F(t,i-=m[a],s),B(t,a=k(--n),r),0!==(s=l[a])&&F(t,n-=x[a],s)),u<t.last_lit;);B(t,256,e)}function N(t,e){var r,n,i,o=e.dyn_tree,a=e.stat_desc.static_tree,s=e.stat_desc.has_stree,c=e.stat_desc.elems,l=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<c;r++)0!==o[2*r]?(t.heap[++t.heap_len]=l=r,t.depth[r]=0):o[2*r+1]=0;for(;t.heap_len<2;)o[2*(i=t.heap[++t.heap_len]=l<2?++l:0)]=1,t.depth[i]=0,t.opt_len--,s&&(t.static_len-=a[2*i+1]);for(e.max_code=l,r=t.heap_len>>1;1<=r;r--)P(t,o,r);for(i=c;r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],P(t,o,1),n=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=n,o[2*i]=o[2*r]+o[2*n],t.depth[i]=(t.depth[r]>=t.depth[n]?t.depth[r]:t.depth[n])+1,o[2*r+1]=o[2*n+1]=i,t.heap[1]=i++,P(t,o,1),2<=t.heap_len;);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,n,i,o,a,s,c=e.dyn_tree,l=e.max_code,h=e.stat_desc.static_tree,f=e.stat_desc.has_stree,d=e.stat_desc.extra_bits,p=e.stat_desc.extra_base,g=e.stat_desc.max_length,v=0;for(o=0;o<=u;o++)t.bl_count[o]=0;for(c[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<573;r++)g<(o=c[2*c[2*(n=t.heap[r])+1]+1]+1)&&(o=g,v++),c[2*n+1]=o,l<n||(t.bl_count[o]++,a=0,p<=n&&(a=d[n-p]),s=c[2*n],t.opt_len+=s*(o+a),f&&(t.static_len+=s*(h[2*n+1]+a)));if(0!==v){do{for(o=g-1;0===t.bl_count[o];)o--;t.bl_count[o]--,t.bl_count[o+1]+=2,t.bl_count[g]--,v-=2}while(0<v);for(o=g;0!==o;o--)for(n=t.bl_count[o];0!==n;)l<(i=t.heap[--r])||(c[2*i+1]!==o&&(t.opt_len+=(o-c[2*i+1])*c[2*i],c[2*i+1]=o),n--)}}(t,e),T(o,l,t.bl_count)}function I(t,e,r){var n,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),e[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=e[2*(n+1)+1],++s<u&&i===a||(s<c?t.bl_tree[2*i]+=s:0!==i?(i!==o&&t.bl_tree[2*i]++,t.bl_tree[32]++):s<=10?t.bl_tree[34]++:t.bl_tree[36]++,o=i,c=(s=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4))}function j(t,e,r){var n,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),n=0;n<=r;n++)if(i=a,a=e[2*(n+1)+1],!(++s<u&&i===a)){if(s<c)for(;B(t,i,t.bl_tree),0!=--s;);else 0!==i?(i!==o&&(B(t,i,t.bl_tree),s--),B(t,16,t.bl_tree),F(t,s-3,2)):s<=10?(B(t,17,t.bl_tree),F(t,s-3,3)):(B(t,18,t.bl_tree),F(t,s-11,7));o=i,c=(s=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4)}}i(x);var U=!1;function M(t,e,r,i){F(t,0+(i?1:0),3),function(t,e,r,i){z(t),S(t,r),S(t,~r),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r)}r._tr_init=function(t){U||(function(){var t,e,r,n,i,o=new Array(16);for(n=r=0;n<28;n++)for(m[n]=r,t=0;t<1<<c[n];t++)v[r++]=n;for(v[r-1]=n,n=i=0;n<16;n++)for(x[n]=i,t=0;t<1<<l[n];t++)g[i++]=n;for(i>>=7;n<s;n++)for(x[n]=i<<7,t=0;t<1<<l[n]-7;t++)g[256+i++]=n;for(e=0;e<=u;e++)o[e]=0;for(t=0;t<=143;)d[2*t+1]=8,t++,o[8]++;for(;t<=255;)d[2*t+1]=9,t++,o[9]++;for(;t<=279;)d[2*t+1]=7,t++,o[7]++;for(;t<=287;)d[2*t+1]=8,t++,o[8]++;for(T(d,287,o),t=0;t<s;t++)p[2*t+1]=5,p[2*t]=E(t,5);y=new A(d,c,257,a,u),b=new A(p,l,0,s,u),w=new A(new Array(0),h,0,19,7)}(),U=!0),t.l_desc=new C(t.dyn_ltree,y),t.d_desc=new C(t.dyn_dtree,b),t.bl_desc=new C(t.bl_tree,w),t.bi_buf=0,t.bi_valid=0,O(t)},r._tr_stored_block=M,r._tr_flush_block=function(t,e,r,n){var i,a,s=0;0<t.level?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<o;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),N(t,t.l_desc),N(t,t.d_desc),s=function(t){var e;for(I(t,t.dyn_ltree,t.l_desc.max_code),I(t,t.dyn_dtree,t.d_desc.max_code),N(t,t.bl_desc),e=18;3<=e&&0===t.bl_tree[2*f[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),i=t.opt_len+3+7>>>3,(a=t.static_len+3+7>>>3)<=i&&(i=a)):i=a=r+5,r+4<=i&&-1!==e?M(t,e,r,n):4===t.strategy||a===i?(F(t,2+(n?1:0),3),D(t,d,p)):(F(t,4+(n?1:0),3),function(t,e,r,n){var i;for(F(t,e-257,5),F(t,r-1,5),F(t,n-4,4),i=0;i<n;i++)F(t,t.bl_tree[2*f[i]+1],3);j(t,t.dyn_ltree,e-1),j(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),D(t,t.dyn_ltree,t.dyn_dtree)),O(t),n&&z(t)},r._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(v[r]+o+1)]++,t.dyn_dtree[2*k(e)]++),t.last_lit===t.lit_bufsize-1},r._tr_align=function(t){F(t,2,3),B(t,256,d),function(t){16===t.bi_valid?(S(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},{"../utils/common":41}],53:[function(t,e,r){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(t,e,r){"use strict";e.exports="function"==typeof setImmediate?setImmediate:function(){var t=[].slice.apply(arguments);t.splice(1,0,0),setTimeout.apply(null,t)}},{}]},{},[10])(10)},9591:(t,e,r)=>{"use strict";var n={};(0,r(4236).assign)(n,r(4555),r(8843),r(1619)),t.exports=n},4555:(t,e,r)=>{"use strict";var n=r(405),i=r(4236),o=r(9373),a=r(8898),s=r(2292),u=Object.prototype.toString;function c(t){if(!(this instanceof c))return new c(t);this.options=i.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(0!==r)throw new Error(a[r]);if(e.header&&n.deflateSetHeader(this.strm,e.header),e.dictionary){var l;if(l="string"==typeof e.dictionary?o.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,0!==(r=n.deflateSetDictionary(this.strm,l)))throw new Error(a[r]);this._dict_set=!0}}function l(t,e){var r=new c(e);if(r.push(t,!0),r.err)throw r.msg||a[r.err];return r.result}c.prototype.push=function(t,e){var r,a,s=this.strm,c=this.options.chunkSize;if(this.ended)return!1;a=e===~~e?e:!0===e?4:0,"string"==typeof t?s.input=o.string2buf(t):"[object ArrayBuffer]"===u.call(t)?s.input=new Uint8Array(t):s.input=t,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new i.Buf8(c),s.next_out=0,s.avail_out=c),1!==(r=n.deflate(s,a))&&0!==r)return this.onEnd(r),this.ended=!0,!1;0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(o.buf2binstring(i.shrinkBuf(s.output,s.next_out))):this.onData(i.shrinkBuf(s.output,s.next_out)))}while((s.avail_in>0||0===s.avail_out)&&1!==r);return 4===a?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):2!==a||(this.onEnd(0),s.avail_out=0,!0)},c.prototype.onData=function(t){this.chunks.push(t)},c.prototype.onEnd=function(t){0===t&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Deflate=c,e.deflate=l,e.deflateRaw=function(t,e){return(e=e||{}).raw=!0,l(t,e)},e.gzip=function(t,e){return(e=e||{}).gzip=!0,l(t,e)}},8843:(t,e,r)=>{"use strict";var n=r(7948),i=r(4236),o=r(9373),a=r(1619),s=r(8898),u=r(2292),c=r(2401),l=Object.prototype.toString;function h(t){if(!(this instanceof h))return new h(t);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,e.windowBits);if(r!==a.Z_OK)throw new Error(s[r]);if(this.header=new c,n.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=o.string2buf(e.dictionary):"[object ArrayBuffer]"===l.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(r=n.inflateSetDictionary(this.strm,e.dictionary))!==a.Z_OK))throw new Error(s[r])}function f(t,e){var r=new h(e);if(r.push(t,!0),r.err)throw r.msg||s[r.err];return r.result}h.prototype.push=function(t,e){var r,s,u,c,h,f=this.strm,d=this.options.chunkSize,p=this.options.dictionary,g=!1;if(this.ended)return!1;s=e===~~e?e:!0===e?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof t?f.input=o.binstring2buf(t):"[object ArrayBuffer]"===l.call(t)?f.input=new Uint8Array(t):f.input=t,f.next_in=0,f.avail_in=f.input.length;do{if(0===f.avail_out&&(f.output=new i.Buf8(d),f.next_out=0,f.avail_out=d),(r=n.inflate(f,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&p&&(r=n.inflateSetDictionary(this.strm,p)),r===a.Z_BUF_ERROR&&!0===g&&(r=a.Z_OK,g=!1),r!==a.Z_STREAM_END&&r!==a.Z_OK)return this.onEnd(r),this.ended=!0,!1;f.next_out&&(0!==f.avail_out&&r!==a.Z_STREAM_END&&(0!==f.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(f.output,f.next_out),c=f.next_out-u,h=o.buf2string(f.output,u),f.next_out=c,f.avail_out=d-c,c&&i.arraySet(f.output,f.output,u,c,0),this.onData(h)):this.onData(i.shrinkBuf(f.output,f.next_out)))),0===f.avail_in&&0===f.avail_out&&(g=!0)}while((f.avail_in>0||0===f.avail_out)&&r!==a.Z_STREAM_END);return r===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),f.avail_out=0,!0)},h.prototype.onData=function(t){this.chunks.push(t)},h.prototype.onEnd=function(t){t===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Inflate=h,e.inflate=f,e.inflateRaw=function(t,e){return(e=e||{}).raw=!0,f(t,e)},e.ungzip=f},4236:(t,e)=>{"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function n(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var i in r)n(r,i)&&(t[i]=r[i])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var i={arraySet:function(t,e,r,n,i){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+n),i);else for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){var e,r,n,i,o,a;for(n=0,e=0,r=t.length;e<r;e++)n+=t[e].length;for(a=new Uint8Array(n),i=0,e=0,r=t.length;e<r;e++)o=t[e],a.set(o,i),i+=o.length;return a}},o={arraySet:function(t,e,r,n,i){for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,i)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,o))},e.setTyped(r)},9373:(t,e,r)=>{"use strict";var n=r(4236),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(t){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){o=!1}for(var a=new n.Buf8(256),s=0;s<256;s++)a[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1;function u(t,e){if(e<65534&&(t.subarray&&o||!t.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var r="",a=0;a<e;a++)r+=String.fromCharCode(t[a]);return r}a[254]=a[254]=1,e.string2buf=function(t){var e,r,i,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(e=new n.Buf8(u),a=0,o=0;a<u;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),r<128?e[a++]=r:r<2048?(e[a++]=192|r>>>6,e[a++]=128|63&r):r<65536?(e[a++]=224|r>>>12,e[a++]=128|r>>>6&63,e[a++]=128|63&r):(e[a++]=240|r>>>18,e[a++]=128|r>>>12&63,e[a++]=128|r>>>6&63,e[a++]=128|63&r);return e},e.buf2binstring=function(t){return u(t,t.length)},e.binstring2buf=function(t){for(var e=new n.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},e.buf2string=function(t,e){var r,n,i,o,s=e||t.length,c=new Array(2*s);for(n=0,r=0;r<s;)if((i=t[r++])<128)c[n++]=i;else if((o=a[i])>4)c[n++]=65533,r+=o-1;else{for(i&=2===o?31:3===o?15:7;o>1&&r<s;)i=i<<6|63&t[r++],o--;o>1?c[n++]=65533:i<65536?c[n++]=i:(i-=65536,c[n++]=55296|i>>10&1023,c[n++]=56320|1023&i)}return u(c,n)},e.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+a[t[r]]>e?r:e}},6069:t=>{"use strict";t.exports=function(t,e,r,n){for(var i=65535&t|0,o=t>>>16&65535|0,a=0;0!==r;){r-=a=r>2e3?2e3:r;do{o=o+(i=i+e[n++]|0)|0}while(--a);i%=65521,o%=65521}return i|o<<16|0}},1619:t=>{"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},2869:t=>{"use strict";var e=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();t.exports=function(t,r,n,i){var o=e,a=i+n;t^=-1;for(var s=i;s<a;s++)t=t>>>8^o[255&(t^r[s])];return-1^t}},405:(t,e,r)=>{"use strict";var n,i=r(4236),o=r(342),a=r(6069),s=r(2869),u=r(8898),c=-2,l=258,h=262,f=103,d=113,p=666;function g(t,e){return t.msg=u[e],e}function v(t){return(t<<1)-(t>4?9:0)}function m(t){for(var e=t.length;--e>=0;)t[e]=0}function y(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(i.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function b(t,e){o._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,y(t.strm)}function w(t,e){t.pending_buf[t.pending++]=e}function x(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function A(t,e){var r,n,i=t.max_chain_length,o=t.strstart,a=t.prev_length,s=t.nice_match,u=t.strstart>t.w_size-h?t.strstart-(t.w_size-h):0,c=t.window,f=t.w_mask,d=t.prev,p=t.strstart+l,g=c[o+a-1],v=c[o+a];t.prev_length>=t.good_match&&(i>>=2),s>t.lookahead&&(s=t.lookahead);do{if(c[(r=e)+a]===v&&c[r+a-1]===g&&c[r]===c[o]&&c[++r]===c[o+1]){o+=2,r++;do{}while(c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&o<p);if(n=l-(p-o),o=p-l,n>a){if(t.match_start=e,a=n,n>=s)break;g=c[o+a-1],v=c[o+a]}}}while((e=d[e&f])>u&&0!=--i);return a<=t.lookahead?a:t.lookahead}function C(t){var e,r,n,o,u,c,l,f,d,p,g=t.w_size;do{if(o=t.window_size-t.lookahead-t.strstart,t.strstart>=g+(g-h)){i.arraySet(t.window,t.window,g,g,0),t.match_start-=g,t.strstart-=g,t.block_start-=g,e=r=t.hash_size;do{n=t.head[--e],t.head[e]=n>=g?n-g:0}while(--r);e=r=g;do{n=t.prev[--e],t.prev[e]=n>=g?n-g:0}while(--r);o+=g}if(0===t.strm.avail_in)break;if(c=t.strm,l=t.window,f=t.strstart+t.lookahead,d=o,p=void 0,(p=c.avail_in)>d&&(p=d),r=0===p?0:(c.avail_in-=p,i.arraySet(l,c.input,c.next_in,p,f),1===c.state.wrap?c.adler=a(c.adler,l,p,f):2===c.state.wrap&&(c.adler=s(c.adler,l,p,f)),c.next_in+=p,c.total_in+=p,p),t.lookahead+=r,t.lookahead+t.insert>=3)for(u=t.strstart-t.insert,t.ins_h=t.window[u],t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+3-1])&t.hash_mask,t.prev[u&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=u,u++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<h&&0!==t.strm.avail_in)}function k(t,e){for(var r,n;;){if(t.lookahead<h){if(C(t),t.lookahead<h&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-h&&(t.match_length=A(t,r)),t.match_length>=3)if(n=o._tr_tally(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(b(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,4===e?(b(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(b(t,!1),0===t.strm.avail_out)?1:2}function S(t,e){for(var r,n,i;;){if(t.lookahead<h){if(C(t),t.lookahead<h&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-h&&(t.match_length=A(t,r),t.match_length<=5&&(1===t.strategy||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){i=t.strstart+t.lookahead-3,n=o._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=i&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,n&&(b(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if((n=o._tr_tally(t,0,t.window[t.strstart-1]))&&b(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(n=o._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,4===e?(b(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(b(t,!1),0===t.strm.avail_out)?1:2}function F(t,e,r,n,i){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=n,this.func=i}function B(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(1146),this.dyn_dtree=new i.Buf16(122),this.bl_tree=new i.Buf16(78),m(this.dyn_ltree),m(this.dyn_dtree),m(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(16),this.heap=new i.Buf16(573),m(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(573),m(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function E(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=2,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:d,t.adler=2===e.wrap?0:1,e.last_flush=0,o._tr_init(e),0):g(t,c)}function T(t){var e,r=E(t);return 0===r&&((e=t.state).window_size=2*e.w_size,m(e.head),e.max_lazy_match=n[e.level].max_lazy,e.good_match=n[e.level].good_length,e.nice_match=n[e.level].nice_length,e.max_chain_length=n[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0),r}function O(t,e,r,n,o,a){if(!t)return c;var s=1;if(-1===e&&(e=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),o<1||o>9||8!==r||n<8||n>15||e<0||e>9||a<0||a>4)return g(t,c);8===n&&(n=9);var u=new B;return t.state=u,u.strm=t,u.wrap=s,u.gzhead=null,u.w_bits=n,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+3-1)/3),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=e,u.strategy=a,u.method=r,T(t)}n=[new F(0,0,0,0,(function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(C(t),0===t.lookahead&&0===e)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var n=t.block_start+r;if((0===t.strstart||t.strstart>=n)&&(t.lookahead=t.strstart-n,t.strstart=n,b(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-h&&(b(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(b(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(b(t,!1),t.strm.avail_out),1)})),new F(4,4,8,4,k),new F(4,5,16,8,k),new F(4,6,32,32,k),new F(4,4,16,16,S),new F(8,16,32,32,S),new F(8,16,128,128,S),new F(8,32,128,256,S),new F(32,128,258,1024,S),new F(32,258,258,4096,S)],e.deflateInit=function(t,e){return O(t,e,8,15,8,0)},e.deflateInit2=O,e.deflateReset=T,e.deflateResetKeep=E,e.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?c:(t.state.gzhead=e,0):c},e.deflate=function(t,e){var r,i,a,u;if(!t||!t.state||e>5||e<0)return t?g(t,c):c;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||i.status===p&&4!==e)return g(t,0===t.avail_out?-5:c);if(i.strm=t,r=i.last_flush,i.last_flush=e,42===i.status)if(2===i.wrap)t.adler=0,w(i,31),w(i,139),w(i,8),i.gzhead?(w(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),w(i,255&i.gzhead.time),w(i,i.gzhead.time>>8&255),w(i,i.gzhead.time>>16&255),w(i,i.gzhead.time>>24&255),w(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),w(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(w(i,255&i.gzhead.extra.length),w(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=s(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(w(i,0),w(i,0),w(i,0),w(i,0),w(i,0),w(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),w(i,3),i.status=d);else{var h=8+(i.w_bits-8<<4)<<8;h|=(i.strategy>=2||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(h|=32),h+=31-h%31,i.status=d,x(i,h),0!==i.strstart&&(x(i,t.adler>>>16),x(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),y(t),a=i.pending,i.pending!==i.pending_buf_size));)w(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),y(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,w(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),y(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,w(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.status=f)}else i.status=f;if(i.status===f&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&y(t),i.pending+2<=i.pending_buf_size&&(w(i,255&t.adler),w(i,t.adler>>8&255),t.adler=0,i.status=d)):i.status=d),0!==i.pending){if(y(t),0===t.avail_out)return i.last_flush=-1,0}else if(0===t.avail_in&&v(e)<=v(r)&&4!==e)return g(t,-5);if(i.status===p&&0!==t.avail_in)return g(t,-5);if(0!==t.avail_in||0!==i.lookahead||0!==e&&i.status!==p){var A=2===i.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(C(t),0===t.lookahead)){if(0===e)return 1;break}if(t.match_length=0,r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(b(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(b(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(b(t,!1),0===t.strm.avail_out)?1:2}(i,e):3===i.strategy?function(t,e){for(var r,n,i,a,s=t.window;;){if(t.lookahead<=l){if(C(t),t.lookahead<=l&&0===e)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=s[i=t.strstart-1])===s[++i]&&n===s[++i]&&n===s[++i]){a=t.strstart+l;do{}while(n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&i<a);t.match_length=l-(a-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(r=o._tr_tally(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(b(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(b(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(b(t,!1),0===t.strm.avail_out)?1:2}(i,e):n[i.level].func(i,e);if(3!==A&&4!==A||(i.status=p),1===A||3===A)return 0===t.avail_out&&(i.last_flush=-1),0;if(2===A&&(1===e?o._tr_align(i):5!==e&&(o._tr_stored_block(i,0,0,!1),3===e&&(m(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),y(t),0===t.avail_out))return i.last_flush=-1,0}return 4!==e?0:i.wrap<=0?1:(2===i.wrap?(w(i,255&t.adler),w(i,t.adler>>8&255),w(i,t.adler>>16&255),w(i,t.adler>>24&255),w(i,255&t.total_in),w(i,t.total_in>>8&255),w(i,t.total_in>>16&255),w(i,t.total_in>>24&255)):(x(i,t.adler>>>16),x(i,65535&t.adler)),y(t),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?0:1)},e.deflateEnd=function(t){var e;return t&&t.state?42!==(e=t.state.status)&&69!==e&&73!==e&&91!==e&&e!==f&&e!==d&&e!==p?g(t,c):(t.state=null,e===d?g(t,-3):0):c},e.deflateSetDictionary=function(t,e){var r,n,o,s,u,l,h,f,d=e.length;if(!t||!t.state)return c;if(2===(s=(r=t.state).wrap)||1===s&&42!==r.status||r.lookahead)return c;for(1===s&&(t.adler=a(t.adler,e,d,0)),r.wrap=0,d>=r.w_size&&(0===s&&(m(r.head),r.strstart=0,r.block_start=0,r.insert=0),f=new i.Buf8(r.w_size),i.arraySet(f,e,d-r.w_size,r.w_size,0),e=f,d=r.w_size),u=t.avail_in,l=t.next_in,h=t.input,t.avail_in=d,t.next_in=0,t.input=e,C(r);r.lookahead>=3;){n=r.strstart,o=r.lookahead-2;do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+3-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++}while(--o);r.strstart=n,r.lookahead=2,C(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,t.next_in=l,t.input=h,t.avail_in=u,r.wrap=s,0},e.deflateInfo="pako deflate (from Nodeca project)"},2401:t=>{"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},4264:t=>{"use strict";t.exports=function(t,e){var r,n,i,o,a,s,u,c,l,h,f,d,p,g,v,m,y,b,w,x,A,C,k,S,F;r=t.state,n=t.next_in,S=t.input,i=n+(t.avail_in-5),o=t.next_out,F=t.output,a=o-(e-t.avail_out),s=o+(t.avail_out-257),u=r.dmax,c=r.wsize,l=r.whave,h=r.wnext,f=r.window,d=r.hold,p=r.bits,g=r.lencode,v=r.distcode,m=(1<<r.lenbits)-1,y=(1<<r.distbits)-1;t:do{p<15&&(d+=S[n++]<<p,p+=8,d+=S[n++]<<p,p+=8),b=g[d&m];e:for(;;){if(d>>>=w=b>>>24,p-=w,0==(w=b>>>16&255))F[o++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=g[(65535&b)+(d&(1<<w)-1)];continue e}if(32&w){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}x=65535&b,(w&=15)&&(p<w&&(d+=S[n++]<<p,p+=8),x+=d&(1<<w)-1,d>>>=w,p-=w),p<15&&(d+=S[n++]<<p,p+=8,d+=S[n++]<<p,p+=8),b=v[d&y];r:for(;;){if(d>>>=w=b>>>24,p-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=v[(65535&b)+(d&(1<<w)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(A=65535&b,p<(w&=15)&&(d+=S[n++]<<p,(p+=8)<w&&(d+=S[n++]<<p,p+=8)),(A+=d&(1<<w)-1)>u){t.msg="invalid distance too far back",r.mode=30;break t}if(d>>>=w,p-=w,A>(w=o-a)){if((w=A-w)>l&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(C=0,k=f,0===h){if(C+=c-w,w<x){x-=w;do{F[o++]=f[C++]}while(--w);C=o-A,k=F}}else if(h<w){if(C+=c+h-w,(w-=h)<x){x-=w;do{F[o++]=f[C++]}while(--w);if(C=0,h<x){x-=w=h;do{F[o++]=f[C++]}while(--w);C=o-A,k=F}}}else if(C+=h-w,w<x){x-=w;do{F[o++]=f[C++]}while(--w);C=o-A,k=F}for(;x>2;)F[o++]=k[C++],F[o++]=k[C++],F[o++]=k[C++],x-=3;x&&(F[o++]=k[C++],x>1&&(F[o++]=k[C++]))}else{C=o-A;do{F[o++]=F[C++],F[o++]=F[C++],F[o++]=F[C++],x-=3}while(x>2);x&&(F[o++]=F[C++],x>1&&(F[o++]=F[C++]))}break}}break}}while(n<i&&o<s);n-=x=p>>3,d&=(1<<(p-=x<<3))-1,t.next_in=n,t.next_out=o,t.avail_in=n<i?i-n+5:5-(n-i),t.avail_out=o<s?s-o+257:257-(o-s),r.hold=d,r.bits=p}},7948:(t,e,r)=>{"use strict";var n=r(4236),i=r(6069),o=r(2869),a=r(4264),s=r(9241),u=-2,c=12,l=30;function h(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function f(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function d(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new n.Buf32(852),e.distcode=e.distdyn=new n.Buf32(592),e.sane=1,e.back=-1,0):u}function p(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,d(t)):u}function g(t,e){var r,n;return t&&t.state?(n=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?u:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,p(t))):u}function v(t,e){var r,n;return t?(n=new f,t.state=n,n.window=null,0!==(r=g(t,e))&&(t.state=null),r):u}var m,y,b=!0;function w(t){if(b){var e;for(m=new n.Buf32(512),y=new n.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(1,t.lens,0,288,m,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(2,t.lens,0,32,y,0,t.work,{bits:5}),b=!1}t.lencode=m,t.lenbits=9,t.distcode=y,t.distbits=5}function x(t,e,r,i){var o,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new n.Buf8(a.wsize)),i>=a.wsize?(n.arraySet(a.window,e,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((o=a.wsize-a.wnext)>i&&(o=i),n.arraySet(a.window,e,r-i,o,a.wnext),(i-=o)?(n.arraySet(a.window,e,r-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}e.inflateReset=p,e.inflateReset2=g,e.inflateResetKeep=d,e.inflateInit=function(t){return v(t,15)},e.inflateInit2=v,e.inflate=function(t,e){var r,f,d,p,g,v,m,y,b,A,C,k,S,F,B,E,T,O,z,R,P,D,N,I,j=0,U=new n.Buf8(4),M=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return u;(r=t.state).mode===c&&(r.mode=13),g=t.next_out,d=t.output,m=t.avail_out,p=t.next_in,f=t.input,v=t.avail_in,y=r.hold,b=r.bits,A=v,C=m,D=0;t:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;b<16;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(2&r.wrap&&35615===y){r.check=0,U[0]=255&y,U[1]=y>>>8&255,r.check=o(r.check,U,2,0),y=0,b=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&y)<<8)+(y>>8))%31){t.msg="incorrect header check",r.mode=l;break}if(8!=(15&y)){t.msg="unknown compression method",r.mode=l;break}if(b-=4,P=8+(15&(y>>>=4)),0===r.wbits)r.wbits=P;else if(P>r.wbits){t.msg="invalid window size",r.mode=l;break}r.dmax=1<<P,t.adler=r.check=1,r.mode=512&y?10:c,y=0,b=0;break;case 2:for(;b<16;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(r.flags=y,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=l;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=l;break}r.head&&(r.head.text=y>>8&1),512&r.flags&&(U[0]=255&y,U[1]=y>>>8&255,r.check=o(r.check,U,2,0)),y=0,b=0,r.mode=3;case 3:for(;b<32;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.head&&(r.head.time=y),512&r.flags&&(U[0]=255&y,U[1]=y>>>8&255,U[2]=y>>>16&255,U[3]=y>>>24&255,r.check=o(r.check,U,4,0)),y=0,b=0,r.mode=4;case 4:for(;b<16;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.head&&(r.head.xflags=255&y,r.head.os=y>>8),512&r.flags&&(U[0]=255&y,U[1]=y>>>8&255,r.check=o(r.check,U,2,0)),y=0,b=0,r.mode=5;case 5:if(1024&r.flags){for(;b<16;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.length=y,r.head&&(r.head.extra_len=y),512&r.flags&&(U[0]=255&y,U[1]=y>>>8&255,r.check=o(r.check,U,2,0)),y=0,b=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((k=r.length)>v&&(k=v),k&&(r.head&&(P=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,f,p,k,P)),512&r.flags&&(r.check=o(r.check,f,k,p)),v-=k,p+=k,r.length-=k),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===v)break t;k=0;do{P=f[p+k++],r.head&&P&&r.length<65536&&(r.head.name+=String.fromCharCode(P))}while(P&&k<v);if(512&r.flags&&(r.check=o(r.check,f,k,p)),v-=k,p+=k,P)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===v)break t;k=0;do{P=f[p+k++],r.head&&P&&r.length<65536&&(r.head.comment+=String.fromCharCode(P))}while(P&&k<v);if(512&r.flags&&(r.check=o(r.check,f,k,p)),v-=k,p+=k,P)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;b<16;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(y!==(65535&r.check)){t.msg="header crc mismatch",r.mode=l;break}y=0,b=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=c;break;case 10:for(;b<32;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}t.adler=r.check=h(y),y=0,b=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=g,t.avail_out=m,t.next_in=p,t.avail_in=v,r.hold=y,r.bits=b,2;t.adler=r.check=1,r.mode=c;case c:if(5===e||6===e)break t;case 13:if(r.last){y>>>=7&b,b-=7&b,r.mode=27;break}for(;b<3;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}switch(r.last=1&y,b-=1,3&(y>>>=1)){case 0:r.mode=14;break;case 1:if(w(r),r.mode=20,6===e){y>>>=2,b-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=l}y>>>=2,b-=2;break;case 14:for(y>>>=7&b,b-=7&b;b<32;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if((65535&y)!=(y>>>16^65535)){t.msg="invalid stored block lengths",r.mode=l;break}if(r.length=65535&y,y=0,b=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(k=r.length){if(k>v&&(k=v),k>m&&(k=m),0===k)break t;n.arraySet(d,f,p,k,g),v-=k,p+=k,m-=k,g+=k,r.length-=k;break}r.mode=c;break;case 17:for(;b<14;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(r.nlen=257+(31&y),y>>>=5,b-=5,r.ndist=1+(31&y),y>>>=5,b-=5,r.ncode=4+(15&y),y>>>=4,b-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=l;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;b<3;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.lens[M[r.have++]]=7&y,y>>>=3,b-=3}for(;r.have<19;)r.lens[M[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,N={bits:r.lenbits},D=s(0,r.lens,0,19,r.lencode,0,r.work,N),r.lenbits=N.bits,D){t.msg="invalid code lengths set",r.mode=l;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;E=(j=r.lencode[y&(1<<r.lenbits)-1])>>>16&255,T=65535&j,!((B=j>>>24)<=b);){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(T<16)y>>>=B,b-=B,r.lens[r.have++]=T;else{if(16===T){for(I=B+2;b<I;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(y>>>=B,b-=B,0===r.have){t.msg="invalid bit length repeat",r.mode=l;break}P=r.lens[r.have-1],k=3+(3&y),y>>>=2,b-=2}else if(17===T){for(I=B+3;b<I;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}b-=B,P=0,k=3+(7&(y>>>=B)),y>>>=3,b-=3}else{for(I=B+7;b<I;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}b-=B,P=0,k=11+(127&(y>>>=B)),y>>>=7,b-=7}if(r.have+k>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=l;break}for(;k--;)r.lens[r.have++]=P}}if(r.mode===l)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=l;break}if(r.lenbits=9,N={bits:r.lenbits},D=s(1,r.lens,0,r.nlen,r.lencode,0,r.work,N),r.lenbits=N.bits,D){t.msg="invalid literal/lengths set",r.mode=l;break}if(r.distbits=6,r.distcode=r.distdyn,N={bits:r.distbits},D=s(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,N),r.distbits=N.bits,D){t.msg="invalid distances set",r.mode=l;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(v>=6&&m>=258){t.next_out=g,t.avail_out=m,t.next_in=p,t.avail_in=v,r.hold=y,r.bits=b,a(t,C),g=t.next_out,d=t.output,m=t.avail_out,p=t.next_in,f=t.input,v=t.avail_in,y=r.hold,b=r.bits,r.mode===c&&(r.back=-1);break}for(r.back=0;E=(j=r.lencode[y&(1<<r.lenbits)-1])>>>16&255,T=65535&j,!((B=j>>>24)<=b);){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(E&&0==(240&E)){for(O=B,z=E,R=T;E=(j=r.lencode[R+((y&(1<<O+z)-1)>>O)])>>>16&255,T=65535&j,!(O+(B=j>>>24)<=b);){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}y>>>=O,b-=O,r.back+=O}if(y>>>=B,b-=B,r.back+=B,r.length=T,0===E){r.mode=26;break}if(32&E){r.back=-1,r.mode=c;break}if(64&E){t.msg="invalid literal/length code",r.mode=l;break}r.extra=15&E,r.mode=22;case 22:if(r.extra){for(I=r.extra;b<I;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.length+=y&(1<<r.extra)-1,y>>>=r.extra,b-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;E=(j=r.distcode[y&(1<<r.distbits)-1])>>>16&255,T=65535&j,!((B=j>>>24)<=b);){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(0==(240&E)){for(O=B,z=E,R=T;E=(j=r.distcode[R+((y&(1<<O+z)-1)>>O)])>>>16&255,T=65535&j,!(O+(B=j>>>24)<=b);){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}y>>>=O,b-=O,r.back+=O}if(y>>>=B,b-=B,r.back+=B,64&E){t.msg="invalid distance code",r.mode=l;break}r.offset=T,r.extra=15&E,r.mode=24;case 24:if(r.extra){for(I=r.extra;b<I;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.offset+=y&(1<<r.extra)-1,y>>>=r.extra,b-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=l;break}r.mode=25;case 25:if(0===m)break t;if(k=C-m,r.offset>k){if((k=r.offset-k)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=l;break}k>r.wnext?(k-=r.wnext,S=r.wsize-k):S=r.wnext-k,k>r.length&&(k=r.length),F=r.window}else F=d,S=g-r.offset,k=r.length;k>m&&(k=m),m-=k,r.length-=k;do{d[g++]=F[S++]}while(--k);0===r.length&&(r.mode=21);break;case 26:if(0===m)break t;d[g++]=r.length,m--,r.mode=21;break;case 27:if(r.wrap){for(;b<32;){if(0===v)break t;v--,y|=f[p++]<<b,b+=8}if(C-=m,t.total_out+=C,r.total+=C,C&&(t.adler=r.check=r.flags?o(r.check,d,C,g-C):i(r.check,d,C,g-C)),C=m,(r.flags?y:h(y))!==r.check){t.msg="incorrect data check",r.mode=l;break}y=0,b=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;b<32;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(y!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=l;break}y=0,b=0}r.mode=29;case 29:D=1;break t;case l:D=-3;break t;case 31:return-4;default:return u}return t.next_out=g,t.avail_out=m,t.next_in=p,t.avail_in=v,r.hold=y,r.bits=b,(r.wsize||C!==t.avail_out&&r.mode<l&&(r.mode<27||4!==e))&&x(t,t.output,t.next_out,C-t.avail_out)?(r.mode=31,-4):(A-=t.avail_in,C-=t.avail_out,t.total_in+=A,t.total_out+=C,r.total+=C,r.wrap&&C&&(t.adler=r.check=r.flags?o(r.check,d,C,t.next_out-C):i(r.check,d,C,t.next_out-C)),t.data_type=r.bits+(r.last?64:0)+(r.mode===c?128:0)+(20===r.mode||15===r.mode?256:0),(0===A&&0===C||4===e)&&0===D&&(D=-5),D)},e.inflateEnd=function(t){if(!t||!t.state)return u;var e=t.state;return e.window&&(e.window=null),t.state=null,0},e.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?u:(r.head=e,e.done=!1,0):u},e.inflateSetDictionary=function(t,e){var r,n=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?u:11===r.mode&&i(1,e,n,0)!==r.check?-3:x(t,e,n,n)?(r.mode=31,-4):(r.havedict=1,0):u},e.inflateInfo="pako inflate (from Nodeca project)"},9241:(t,e,r)=>{"use strict";var n=r(4236),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,r,u,c,l,h,f){var d,p,g,v,m,y,b,w,x,A=f.bits,C=0,k=0,S=0,F=0,B=0,E=0,T=0,O=0,z=0,R=0,P=null,D=0,N=new n.Buf16(16),I=new n.Buf16(16),j=null,U=0;for(C=0;C<=15;C++)N[C]=0;for(k=0;k<u;k++)N[e[r+k]]++;for(B=A,F=15;F>=1&&0===N[F];F--);if(B>F&&(B=F),0===F)return c[l++]=20971520,c[l++]=20971520,f.bits=1,0;for(S=1;S<F&&0===N[S];S++);for(B<S&&(B=S),O=1,C=1;C<=15;C++)if(O<<=1,(O-=N[C])<0)return-1;if(O>0&&(0===t||1!==F))return-1;for(I[1]=0,C=1;C<15;C++)I[C+1]=I[C]+N[C];for(k=0;k<u;k++)0!==e[r+k]&&(h[I[e[r+k]]++]=k);if(0===t?(P=j=h,y=19):1===t?(P=i,D-=257,j=o,U-=257,y=256):(P=a,j=s,y=-1),R=0,k=0,C=S,m=l,E=B,T=0,g=-1,v=(z=1<<B)-1,1===t&&z>852||2===t&&z>592)return 1;for(;;){b=C-T,h[k]<y?(w=0,x=h[k]):h[k]>y?(w=j[U+h[k]],x=P[D+h[k]]):(w=96,x=0),d=1<<C-T,S=p=1<<E;do{c[m+(R>>T)+(p-=d)]=b<<24|w<<16|x|0}while(0!==p);for(d=1<<C-1;R&d;)d>>=1;if(0!==d?(R&=d-1,R+=d):R=0,k++,0==--N[C]){if(C===F)break;C=e[r+h[k]]}if(C>B&&(R&v)!==g){for(0===T&&(T=B),m+=S,O=1<<(E=C-T);E+T<F&&!((O-=N[E+T])<=0);)E++,O<<=1;if(z+=1<<E,1===t&&z>852||2===t&&z>592)return 1;c[g=R&v]=B<<24|E<<16|m-l|0}}return 0!==R&&(c[m+R]=C-T<<24|64<<16|0),f.bits=B,0}},8898:t=>{"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},342:(t,e,r)=>{"use strict";var n=r(4236);function i(t){for(var e=t.length;--e>=0;)t[e]=0}var o=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],a=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],u=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],c=new Array(576);i(c);var l=new Array(60);i(l);var h=new Array(512);i(h);var f=new Array(256);i(f);var d=new Array(29);i(d);var p,g,v,m=new Array(30);function y(t,e,r,n,i){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=t&&t.length}function b(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function w(t){return t<256?h[t]:h[256+(t>>>7)]}function x(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function A(t,e,r){t.bi_valid>16-r?(t.bi_buf|=e<<t.bi_valid&65535,x(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=r-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function C(t,e,r){A(t,r[2*e],r[2*e+1])}function k(t,e){var r=0;do{r|=1&t,t>>>=1,r<<=1}while(--e>0);return r>>>1}function S(t,e,r){var n,i,o=new Array(16),a=0;for(n=1;n<=15;n++)o[n]=a=a+r[n-1]<<1;for(i=0;i<=e;i++){var s=t[2*i+1];0!==s&&(t[2*i]=k(o[s]++,s))}}function F(t){var e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function B(t){t.bi_valid>8?x(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function E(t,e,r,n){var i=2*e,o=2*r;return t[i]<t[o]||t[i]===t[o]&&n[e]<=n[r]}function T(t,e,r){for(var n=t.heap[r],i=r<<1;i<=t.heap_len&&(i<t.heap_len&&E(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!E(e,n,t.heap[i],t.depth));)t.heap[r]=t.heap[i],r=i,i<<=1;t.heap[r]=n}function O(t,e,r){var n,i,s,u,c=0;if(0!==t.last_lit)do{n=t.pending_buf[t.d_buf+2*c]<<8|t.pending_buf[t.d_buf+2*c+1],i=t.pending_buf[t.l_buf+c],c++,0===n?C(t,i,e):(C(t,(s=f[i])+256+1,e),0!==(u=o[s])&&A(t,i-=d[s],u),C(t,s=w(--n),r),0!==(u=a[s])&&A(t,n-=m[s],u))}while(c<t.last_lit);C(t,256,e)}function z(t,e){var r,n,i,o=e.dyn_tree,a=e.stat_desc.static_tree,s=e.stat_desc.has_stree,u=e.stat_desc.elems,c=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<u;r++)0!==o[2*r]?(t.heap[++t.heap_len]=c=r,t.depth[r]=0):o[2*r+1]=0;for(;t.heap_len<2;)o[2*(i=t.heap[++t.heap_len]=c<2?++c:0)]=1,t.depth[i]=0,t.opt_len--,s&&(t.static_len-=a[2*i+1]);for(e.max_code=c,r=t.heap_len>>1;r>=1;r--)T(t,o,r);i=u;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],T(t,o,1),n=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=n,o[2*i]=o[2*r]+o[2*n],t.depth[i]=(t.depth[r]>=t.depth[n]?t.depth[r]:t.depth[n])+1,o[2*r+1]=o[2*n+1]=i,t.heap[1]=i++,T(t,o,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,n,i,o,a,s,u=e.dyn_tree,c=e.max_code,l=e.stat_desc.static_tree,h=e.stat_desc.has_stree,f=e.stat_desc.extra_bits,d=e.stat_desc.extra_base,p=e.stat_desc.max_length,g=0;for(o=0;o<=15;o++)t.bl_count[o]=0;for(u[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<573;r++)(o=u[2*u[2*(n=t.heap[r])+1]+1]+1)>p&&(o=p,g++),u[2*n+1]=o,n>c||(t.bl_count[o]++,a=0,n>=d&&(a=f[n-d]),s=u[2*n],t.opt_len+=s*(o+a),h&&(t.static_len+=s*(l[2*n+1]+a)));if(0!==g){do{for(o=p-1;0===t.bl_count[o];)o--;t.bl_count[o]--,t.bl_count[o+1]+=2,t.bl_count[p]--,g-=2}while(g>0);for(o=p;0!==o;o--)for(n=t.bl_count[o];0!==n;)(i=t.heap[--r])>c||(u[2*i+1]!==o&&(t.opt_len+=(o-u[2*i+1])*u[2*i],u[2*i+1]=o),n--)}}(t,e),S(o,c,t.bl_count)}function R(t,e,r){var n,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),e[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=e[2*(n+1)+1],++s<u&&i===a||(s<c?t.bl_tree[2*i]+=s:0!==i?(i!==o&&t.bl_tree[2*i]++,t.bl_tree[32]++):s<=10?t.bl_tree[34]++:t.bl_tree[36]++,s=0,o=i,0===a?(u=138,c=3):i===a?(u=6,c=3):(u=7,c=4))}function P(t,e,r){var n,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),n=0;n<=r;n++)if(i=a,a=e[2*(n+1)+1],!(++s<u&&i===a)){if(s<c)do{C(t,i,t.bl_tree)}while(0!=--s);else 0!==i?(i!==o&&(C(t,i,t.bl_tree),s--),C(t,16,t.bl_tree),A(t,s-3,2)):s<=10?(C(t,17,t.bl_tree),A(t,s-3,3)):(C(t,18,t.bl_tree),A(t,s-11,7));s=0,o=i,0===a?(u=138,c=3):i===a?(u=6,c=3):(u=7,c=4)}}i(m);var D=!1;function N(t,e,r,i){A(t,0+(i?1:0),3),function(t,e,r,i){B(t),x(t,r),x(t,~r),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r)}e._tr_init=function(t){D||(function(){var t,e,r,n,i,u=new Array(16);for(r=0,n=0;n<28;n++)for(d[n]=r,t=0;t<1<<o[n];t++)f[r++]=n;for(f[r-1]=n,i=0,n=0;n<16;n++)for(m[n]=i,t=0;t<1<<a[n];t++)h[i++]=n;for(i>>=7;n<30;n++)for(m[n]=i<<7,t=0;t<1<<a[n]-7;t++)h[256+i++]=n;for(e=0;e<=15;e++)u[e]=0;for(t=0;t<=143;)c[2*t+1]=8,t++,u[8]++;for(;t<=255;)c[2*t+1]=9,t++,u[9]++;for(;t<=279;)c[2*t+1]=7,t++,u[7]++;for(;t<=287;)c[2*t+1]=8,t++,u[8]++;for(S(c,287,u),t=0;t<30;t++)l[2*t+1]=5,l[2*t]=k(t,5);p=new y(c,o,257,286,15),g=new y(l,a,0,30,15),v=new y(new Array(0),s,0,19,7)}(),D=!0),t.l_desc=new b(t.dyn_ltree,p),t.d_desc=new b(t.dyn_dtree,g),t.bl_desc=new b(t.bl_tree,v),t.bi_buf=0,t.bi_valid=0,F(t)},e._tr_stored_block=N,e._tr_flush_block=function(t,e,r,n){var i,o,a=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),z(t,t.l_desc),z(t,t.d_desc),a=function(t){var e;for(R(t,t.dyn_ltree,t.l_desc.max_code),R(t,t.dyn_dtree,t.d_desc.max_code),z(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*u[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),i=t.opt_len+3+7>>>3,(o=t.static_len+3+7>>>3)<=i&&(i=o)):i=o=r+5,r+4<=i&&-1!==e?N(t,e,r,n):4===t.strategy||o===i?(A(t,2+(n?1:0),3),O(t,c,l)):(A(t,4+(n?1:0),3),function(t,e,r,n){var i;for(A(t,e-257,5),A(t,r-1,5),A(t,n-4,4),i=0;i<n;i++)A(t,t.bl_tree[2*u[i]+1],3);P(t,t.dyn_ltree,e-1),P(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),O(t,t.dyn_ltree,t.dyn_dtree)),F(t),n&&B(t)},e._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(f[r]+256+1)]++,t.dyn_dtree[2*w(e)]++),t.last_lit===t.lit_bufsize-1},e._tr_align=function(t){A(t,2,3),C(t,256,c),function(t){16===t.bi_valid?(x(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},2292:t=>{"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},3379:(t,e,r)=>{"use strict";var n,i=function(){var t={};return function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}t[e]=r}return t[e]}}(),o=[];function a(t){for(var e=-1,r=0;r<o.length;r++)if(o[r].identifier===t){e=r;break}return e}function s(t,e){for(var r={},n=[],i=0;i<t.length;i++){var s=t[i],u=e.base?s[0]+e.base:s[0],c=r[u]||0,l="".concat(u," ").concat(c);r[u]=c+1;var h=a(l),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==h?(o[h].references++,o[h].updater(f)):o.push({identifier:l,updater:g(f,e),references:1}),n.push(l)}return n}function u(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var o=r.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,l=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function h(t,e,r,n){var i=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=l(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function f(t,e,r){var n=r.css,i=r.media,o=r.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var d=null,p=0;function g(t,e){var r,n,i;if(e.singleton){var o=p++;r=d||(d=u(e)),n=h.bind(null,r,o,!1),i=h.bind(null,r,o,!0)}else r=u(e),n=f.bind(null,r,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var r=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<r.length;n++){var i=a(r[n]);o[i].references--}for(var u=s(t,e),c=0;c<r.length;c++){var l=a(r[c]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}r=u}}}},2194:(t,e,r)=>{"use strict";r(7766);var n=r(3379),i=r.n(n),o=r(2588);i()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;var a=r(5426);i()(a.Z,{insert:"head",singleton:!1}),a.Z.locals;var s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},s(t,e)};function u(t,e){function r(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var c=function(){return c=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},c.apply(this,arguments)};function l(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}u((n=n.apply(t,e||[])).next())}))}function h(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function f(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n}for(var d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",p=new Uint8Array(256),g=0;g<d.length;g++)p[d.charCodeAt(g)]=g;var v,m=function(t){var e,r,n,i,o,a=.75*t.length,s=t.length,u=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var c=new Uint8Array(a);for(e=0;e<s;e+=4)r=p[t.charCodeAt(e)],n=p[t.charCodeAt(e+1)],i=p[t.charCodeAt(e+2)],o=p[t.charCodeAt(e+3)],c[u++]=r<<2|n>>4,c[u++]=(15&n)<<4|i>>2,c[u++]=(3&i)<<6|63&o;return c},y=/^(data)?:?([\w\/\+]+)?;?(charset=[\w-]+|base64)?.*,/i,b=function(t){return t.charCodeAt(0)},w=function(t,e){return C(t.toString(16),e,"0").toUpperCase()},x=function(t){return w(t,2)},A=function(t){return String.fromCharCode(t)},C=function(t,e,r){for(var n="",i=0,o=e-t.length;i<o;i++)n+=r;return n+t},k=function(t,e,r){for(var n=t.length,i=0;i<n;i++)e[r++]=t.charCodeAt(i);return n},S=function(t,e){return void 0===e&&(e=4),t+"-"+Math.floor(Math.random()*Math.pow(10,e))},F=function(t){return t.replace(/\t|\u0085|\u2028|\u2029/g,"    ").replace(/[\b\v]/g,"")},B=["\\n","\\f","\\r","\\u000B"],E=function(t){return/^[\n\f\r\u000B]$/.test(t)},T=function(t){return t.split(/[\n\f\r\u000B]/)},O=function(t){return t.replace(/[\n\f\r\u000B]/g," ")},z=function(t,e){var r,n=t.charCodeAt(e),i=e+1,o=1;return n>=55296&&n<=56319&&t.length>i&&(r=t.charCodeAt(i))>=56320&&r<=57343&&(o=2),[t.slice(e,e+o),o]},R=/^D:(\d\d\d\d)(\d\d)?(\d\d)?(\d\d)?(\d\d)?(\d\d)?([+\-Z])?(\d\d)?'?(\d\d)?'?$/,P=function(t){var e=t.match(R);if(e){var r=e[1],n=e[2],i=void 0===n?"01":n,o=e[3],a=void 0===o?"01":o,s=e[4],u=void 0===s?"00":s,c=e[5],l=void 0===c?"00":c,h=e[6],f=void 0===h?"00":h,d=e[7],p=void 0===d?"Z":d,g=e[8],v=void 0===g?"00":g,m=e[9];return new Date(r+"-"+i+"-"+a+"T"+u+":"+l+":"+f+("Z"===p?"Z":""+p+v+":"+(void 0===m?"00":m)))}},D=function(t,e){for(var r,n,i=0;i<t.length;){var o=t.substring(i).match(e);if(!o)return{match:n,pos:i};n=o,i+=(null!==(r=o.index)&&void 0!==r?r:0)+o[0].length}return{match:n,pos:i}},N=function(t){return t[t.length-1]},I=function(t){if(t instanceof Uint8Array)return t;for(var e=t.length,r=new Uint8Array(e),n=0;n<e;n++)r[n]=t.charCodeAt(n);return r},j=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=t.length,n=[],i=0;i<r;i++){var o=t[i];n[i]=o instanceof Uint8Array?o:I(o)}var a=0;for(i=0;i<r;i++)a+=t[i].length;for(var s=new Uint8Array(a),u=0,c=0;c<r;c++)for(var l=n[c],h=0,f=l.length;h<f;h++)s[u++]=l[h];return s},U=function(t){for(var e="",r=0,n=t.length;r<n;r++)e+=A(t[r]);return e},M=function(t,e){return t.id-e.id},W=function(t){for(var e=t.length,r=0,n=Math.floor(e/2);r<n;r++){var i=r,o=e-r-1,a=t[r];t[i]=t[o],t[o]=a}return t},V=function(t){if("string"==typeof t)return function(t){var e=t.trim(),r=e.substring(0,100).match(y);if(!r)return m(e);var n=r[0],i=e.substring(n.length);return m(i)}(t);if(t instanceof ArrayBuffer)return new Uint8Array(t);if(t instanceof Uint8Array)return t;throw new TypeError("`input` must be one of `string | ArrayBuffer | Uint8Array`")},q=function(){return new Promise((function(t){setTimeout((function(){return t()}),0)}))},L=function(t){return Math.floor((t-65536)/1024)+55296},G=function(t){return(t-65536)%1024+56320};!function(t){t.BigEndian="BigEndian",t.LittleEndian="LittleEndian"}(v||(v={}));for(var K="�".codePointAt(0),H=function(t,e){if(void 0===e&&(e=!0),t.length<=1)return String.fromCodePoint(K);for(var r=e?J(t):v.BigEndian,n=e?2:0,i=[];t.length-n>=2;){var o=Y(t[n++],t[n++],r);if(X(o))if(t.length-n<2)i.push(K);else{var a=Y(t[n++],t[n++],r);Z(a)?i.push(o,a):i.push(K)}else Z(o)?(n+=2,i.push(K)):i.push(o)}return n<t.length&&i.push(K),String.fromCodePoint.apply(String,i)},X=function(t){return t>=55296&&t<=56319},Z=function(t){return t>=56320&&t<=57343},Y=function(t,e,r){if(r===v.LittleEndian)return e<<8|t;if(r===v.BigEndian)return t<<8|e;throw new Error("Invalid byteOrder: "+r)},J=function(t){return Q(t)?v.BigEndian:_(t)?v.LittleEndian:v.BigEndian},Q=function(t){return 254===t[0]&&255===t[1]},_=function(t){return 255===t[0]&&254===t[1]},$=function(t){return Q(t)||_(t)},tt=function(t){return Math.ceil(t.toString(2).length/8)},et=function(t){for(var e=new Uint8Array(tt(t)),r=1;r<=e.length;r++)e[r-1]=t>>8*(e.length-r);return e},rt=function(t){throw new Error(t)},nt=r(9591),it=r.n(nt),ot="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",at=new Uint8Array(256),st=0;st<ot.length;st++)at[ot.charCodeAt(st)]=st;var ut,ct=function(t){return function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e}(it().inflate(function(t){var e,r,n,i,o,a=.75*t.length,s=t.length,u=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var c=new Uint8Array(a);for(e=0;e<s;e+=4)r=at[t.charCodeAt(e)],n=at[t.charCodeAt(e+1)],i=at[t.charCodeAt(e+2)],o=at[t.charCodeAt(e+3)],c[u++]=r<<2|n>>4,c[u++]=(15&n)<<4|i>>2,c[u++]=(3&i)<<6|63&o;return c}(t)))},lt={Courier:"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","Courier-Bold":"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","Courier-Oblique":"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","Courier-BoldOblique":"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",Helvetica:"","Helvetica-Bold":"","Helvetica-Oblique":"","Helvetica-BoldOblique":"","Times-Roman":"","Times-Bold":"","Times-Italic":"","Times-BoldItalic":"",Symbol:"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",ZapfDingbats:"eJxtmNtu20YQhl+F4FULyMGeD7pz3AY1ChtG7NpFA18w1NomIlECSRcxgrx7SVk7+wOdG8H5OJydf2Z2d5gf9cV+t0v9VK/r+6vXsXlOlbHe28paq229qj/t++m62aXZ4J/m8PRb1z9/baZxefK63Z6eXN5dVMvTCh83u277xr/6kLrnl2XNq7TpXnczuZyabdee98/b2VzM/x4/dd/T5qab2pd6PQ2vaVVfvDRD005puE3Lu7eH1HbN9hTjx4/77/X6y5lcnUmjVzHIVVDicVX/1W/SsO36dLMfu6nb9/X6TAoBD+5euvZbn8axXtuZ36dhPJrVQqgPQoh5hev91LWLkIv94W1Ygq9+aX+tZAx2tfz64284/sblN/rqfLP/mqrbt3FKu7G67Nv9cNgPzZQ2H6rz7bb6vLgZq89pTMO/M/xfEqturJpqSM/d7GJIm2oamk3aNcO3av80O5xh3yyKmm1193ZIT02bqovTKjP+MAf++7zsZvZ3276kYyWWXB0z99S18/PbafPHQ71W4fjn/fxnFO+ZvkrT0LVzTr78qB/+nk38bHM9exgP8zr1z9U7jt6840YW5uSJKcZOCaBBnKgm5mU8MVNYyMwWFvO7Ukagkmgg6sDWQ5yFFqjzUrLEaQ3BEmiwNsMSaZS0vgWfOkPHWQowNeTUc0kumnxZvsgPxlGai6VTGUqAVCTQ6QkWnc77DKEiLktSUBJKqHIQZ86d8gCpHYoiEzMsb1ubYy8vW50DChB5ZhGqrijD0EqUIeiaEHIfCg5Kpuu0ApiToaGPSY0uaQsyr65L2oKi1yFt1PLaQ3lzfXTgXodGoJYzglndSLDMPg1sTPJpQJHJigw0QrGERqD9YhyTOgONQDUyuF1zaxuokc/BW2ztXCMrGZ9WMW1oQZHIXWNBkSCfRZEL5BMUiZw6CzVSFCfUSGZFNjIldoKDkonTKQiJIGzWmFd3BizJJ9SINoLDriOfUCOZS+zg+KGD1qGiLNMLxtJD1/ns00ON6EzyUCM6vbxhoBKaqbG3DFQCNiL1iHccBPV0DHhQH/JW8EW90dkyFKGywCJU0WkVSvSGeiSUODWFFD0HYdPQVoiRgfPMA+/nnRgiAyNYSjpWNQcNSMrtFCUH4ZIRpSCWocFCSuhCEY6hoUClc0WC52BJlCYYLQdhN+hygRRRlo5BKRRLS6oihSqh+ZzzRGG1Mo4Iz1LoP0qsxDGFzk0JE42ji0jCPejomJKCuwil4m5CiRMEUMVSzVLDUstSx1Juc0oVWMpqY295qVltmtWmWW2a1aZZbZrVplltmtWmWW2G1WZYbYbVZlhthtVmWG2G1WZYbYbVZlhtltVmWW2W1WZZbZbVZlltltVmWW2W1QYjQCh7E2aAQHeGhCFgPoNoy8KNb2wxBhmGKBxoUZXlLGsLI6AsftEDHV0wIURVbANLcTKlGGBIKPOAxCmhePCKUwFzAmpDFRQvjA9R06Hq8TONvshgKDCuRAZTXigUxjxNFfKRo3CLhnIJBMFRvMZpqpNBMlQJzGT5WFQMVQI/AikPMIhEU1aDjqJvQwmjSHB05cC9jbYwc5UtAHNLhDw41ha+lEqF4JaH3gmB61SYcqInxTDmQK8v08vjqv4zDf1N0w3Lf4A8/vwPpfK11w=="};!function(t){t.Courier="Courier",t.CourierBold="Courier-Bold",t.CourierOblique="Courier-Oblique",t.CourierBoldOblique="Courier-BoldOblique",t.Helvetica="Helvetica",t.HelveticaBold="Helvetica-Bold",t.HelveticaOblique="Helvetica-Oblique",t.HelveticaBoldOblique="Helvetica-BoldOblique",t.TimesRoman="Times-Roman",t.TimesRomanBold="Times-Bold",t.TimesRomanItalic="Times-Italic",t.TimesRomanBoldItalic="Times-BoldItalic",t.Symbol="Symbol",t.ZapfDingbats="ZapfDingbats"}(ut||(ut={}));for(var ht={},ft=function(){function t(){var t=this;this.getWidthOfGlyph=function(e){return t.CharWidths[e]},this.getXAxisKerningForPair=function(e,r){return(t.KernPairXAmounts[e]||{})[r]}}return t.load=function(e){var r=ht[e];if(r)return r;var n=ct(lt[e]),i=Object.assign(new t,JSON.parse(n));return i.CharWidths=i.CharMetrics.reduce((function(t,e){return t[e.N]=e.WX,t}),{}),i.KernPairXAmounts=i.KernPairs.reduce((function(t,e){var r=e[0],n=e[1],i=e[2];return t[r]||(t[r]={}),t[r][n]=i,t}),{}),ht[e]=i,i},t}(),dt=ct("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"),pt=JSON.parse(dt),gt=function(t,e){var r=this;this.canEncodeUnicodeCodePoint=function(t){return t in r.unicodeMappings},this.encodeUnicodeCodePoint=function(t){var e=r.unicodeMappings[t];if(!e){var n=String.fromCharCode(t),i="0x"+function(t,e,r){for(var n="",i=0,o=4-t.length;i<o;i++)n+="0";return n+t}(t.toString(16)),o=r.name+' cannot encode "'+n+'" ('+i+")";throw new Error(o)}return{code:e[0],name:e[1]}},this.name=t,this.supportedCodePoints=Object.keys(e).map(Number).sort((function(t,e){return t-e})),this.unicodeMappings=e},vt={Symbol:new gt("Symbol",pt.symbol),ZapfDingbats:new gt("ZapfDingbats",pt.zapfdingbats),WinAnsi:new gt("WinAnsi",pt.win1252)},mt=function(t){return Object.keys(t).map((function(e){return t[e]}))},yt=mt(ut),bt=function(t){return yt.includes(t)},wt=function(t,e){return t.x===e.x&&t.y===e.y&&t.width===e.width&&t.height===e.height},xt=function(t){return"`"+t+"`"},At=function(t){var e=typeof t;return"string"===e?"'"+t+"'":"undefined"===e?xt(t):t},Ct=function(t,e,r){Array.isArray(r)||(r=mt(r));for(var n=0,i=r.length;n<i;n++)if(t===r[n])return;throw new TypeError(function(t,e,r){for(var n=new Array(r.length),i=0,o=r.length;i<o;i++){var a=r[i];n[i]=At(a)}var s=n.join(" or ");return xt(e)+" must be one of "+s+", but was actually "+At(t)}(t,e,r))},kt=function(t,e,r){Array.isArray(r)||(r=mt(r)),Ct(t,e,r.concat(void 0))},St=function(t,e){return"null"===e?null===t:"undefined"===e?void 0===t:"string"===e?"string"==typeof t:"number"===e?"number"==typeof t&&!isNaN(t):"boolean"===e?"boolean"==typeof t:"symbol"===e?"symbol"==typeof t:"bigint"===e?"bigint"==typeof t:e===Date?t instanceof Date:e===Array?t instanceof Array:e===Uint8Array?t instanceof Uint8Array:e===ArrayBuffer?t instanceof ArrayBuffer:e===Function?t instanceof Function:t instanceof e[0]},Ft=function(t,e,r){for(var n=0,i=r.length;n<i;n++)if(St(t,r[n]))return;throw new TypeError(function(t,e,r){for(var n=new Array(r.length),i=0,o=r.length;i<o;i++){var a=r[i];"null"===a&&(n[i]=xt("null")),"undefined"===a&&(n[i]=xt("undefined")),"string"===a?n[i]=xt("string"):"number"===a?n[i]=xt("number"):"boolean"===a?n[i]=xt("boolean"):"symbol"===a?n[i]=xt("symbol"):"bigint"===a?n[i]=xt("bigint"):a===Array?n[i]=xt("Array"):a===Uint8Array?n[i]=xt("Uint8Array"):a===ArrayBuffer?n[i]=xt("ArrayBuffer"):n[i]=xt(a[1])}var s,u=n.join(" or ");return xt(e)+" must be of type "+u+", but was actually of type "+xt(null===(s=t)?"null":void 0===s?"undefined":"string"==typeof s?"string":isNaN(s)?"NaN":"number"==typeof s?"number":"boolean"==typeof s?"boolean":"symbol"==typeof s?"symbol":"bigint"==typeof s?"bigint":s.constructor&&s.constructor.name?s.constructor.name:s.name?s.name:s.constructor?String(s.constructor):String(s))}(t,e,r))},Bt=function(t,e,r){Ft(t,e,r.concat("undefined"))},Et=function(t,e,r){for(var n=0,i=t.length;n<i;n++)Ft(t[n],e,r)},Tt=function(t,e,r,n){if(Ft(t,e,["number"]),Ft(r,"min",["number"]),Ft(n,"max",["number"]),n=Math.max(r,n),t<r||t>n)throw new Error(xt(e)+" must be at least "+r+" and at most "+n+", but was actually "+t)},Ot=function(t,e,r,n){Ft(t,e,["number","undefined"]),"number"==typeof t&&Tt(t,e,r,n)},zt=function(t,e,r){if(Ft(t,e,["number"]),t%r!=0)throw new Error(xt(e)+" must be a multiple of "+r+", but was actually "+t)},Rt=function(t,e){if(![1,0].includes(Math.sign(t)))throw new Error(xt(e)+" must be a positive number or 0, but was actually "+t)},Pt=new Uint16Array(256),Dt=0;Dt<256;Dt++)Pt[Dt]=Dt;Pt[22]=b(""),Pt[24]=b("˘"),Pt[25]=b("ˇ"),Pt[26]=b("ˆ"),Pt[27]=b("˙"),Pt[28]=b("˝"),Pt[29]=b("˛"),Pt[30]=b("˚"),Pt[31]=b("˜"),Pt[127]=b("�"),Pt[128]=b("•"),Pt[129]=b("†"),Pt[130]=b("‡"),Pt[131]=b("…"),Pt[132]=b("—"),Pt[133]=b("–"),Pt[134]=b("ƒ"),Pt[135]=b("⁄"),Pt[136]=b("‹"),Pt[137]=b("›"),Pt[138]=b("−"),Pt[139]=b("‰"),Pt[140]=b("„"),Pt[141]=b("“"),Pt[142]=b("”"),Pt[143]=b("‘"),Pt[144]=b("’"),Pt[145]=b("‚"),Pt[146]=b("™"),Pt[147]=b("ﬁ"),Pt[148]=b("ﬂ"),Pt[149]=b("Ł"),Pt[150]=b("Œ"),Pt[151]=b("Š"),Pt[152]=b("Ÿ"),Pt[153]=b("Ž"),Pt[154]=b("ı"),Pt[155]=b("ł"),Pt[156]=b("œ"),Pt[157]=b("š"),Pt[158]=b("ž"),Pt[159]=b("�"),Pt[160]=b("€"),Pt[173]=b("�");var Nt=function(t){for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=Pt[t[r]];return String.fromCodePoint.apply(String,e)};const It=function(){function t(t){this.populate=t,this.value=void 0}return t.prototype.getValue=function(){return this.value},t.prototype.access=function(){return this.value||(this.value=this.populate()),this.value},t.prototype.invalidate=function(){this.value=void 0},t.populatedBy=function(e){return new t(e)},t}();var jt,Ut,Mt=function(t){function e(e,r){var n="Method "+e+"."+r+"() not implemented";return t.call(this,n)||this}return u(e,t),e}(Error),Wt=function(t){function e(e){var r="Cannot construct "+e+" - it has a private constructor";return t.call(this,r)||this}return u(e,t),e}(Error),Vt=function(t){function e(e,r){var n=function(t){var e,r;return null!==(e=null==t?void 0:t.name)&&void 0!==e?e:null===(r=null==t?void 0:t.constructor)||void 0===r?void 0:r.name},i="Expected instance of "+(Array.isArray(e)?e.map(n):[n(e)]).join(" or ")+", but got instance of "+(r?n(r):r);return t.call(this,i)||this}return u(e,t),e}(Error),qt=function(t){function e(e){var r=e+" stream encoding not supported";return t.call(this,r)||this}return u(e,t),e}(Error),Lt=function(t){function e(e,r){var n="Cannot call "+e+"."+r+"() more than once";return t.call(this,n)||this}return u(e,t),e}(Error),Gt=(u((function(t){var e="Missing catalog (ref="+t+")";return Ut.call(this,e)||this}),Ut=Error),function(t){function e(){return t.call(this,"Can't embed page with missing Contents")||this}return u(e,t),e}(Error)),Kt=function(t){function e(e){var r,n,i,o="Unrecognized stream type: "+(null!==(i=null!==(n=null===(r=null==e?void 0:e.contructor)||void 0===r?void 0:r.name)&&void 0!==n?n:null==e?void 0:e.name)&&void 0!==i?i:e);return t.call(this,o)||this}return u(e,t),e}(Error),Ht=function(t){function e(){return t.call(this,"Found mismatched contexts while embedding pages. All pages in the array passed to `PDFDocument.embedPages()` must be from the same document.")||this}return u(e,t),e}(Error),Xt=function(t){function e(e){var r="Attempted to convert PDFArray with "+e+" elements to rectangle, but must have exactly 4 elements.";return t.call(this,r)||this}return u(e,t),e}(Error),Zt=function(t){function e(e){var r='Attempted to convert "'+e+'" to a date, but it does not match the PDF date string format.';return t.call(this,r)||this}return u(e,t),e}(Error),Yt=function(t){function e(e,r){var n="Invalid targetIndex specified: targetIndex="+e+" must be less than Count="+r;return t.call(this,n)||this}return u(e,t),e}(Error),Jt=function(t){function e(e,r){var n="Failed to "+r+" at targetIndex="+e+" due to corrupt page tree: It is likely that one or more 'Count' entries are invalid";return t.call(this,n)||this}return u(e,t),e}(Error),Qt=function(t){function e(e,r,n){var i="index should be at least "+r+" and at most "+n+", but was actually "+e;return t.call(this,i)||this}return u(e,t),e}(Error),_t=function(t){function e(){return t.call(this,"Attempted to set invalid field value")||this}return u(e,t),e}(Error),$t=function(t){function e(){return t.call(this,"Attempted to select multiple values for single-select field")||this}return u(e,t),e}(Error),te=function(t){function e(e){var r="No /DA (default appearance) entry found for field: "+e;return t.call(this,r)||this}return u(e,t),e}(Error),ee=function(t){function e(e){var r="No Tf operator found for DA of field: "+e;return t.call(this,r)||this}return u(e,t),e}(Error),re=function(t){function e(e,r){var n="Failed to parse number (line:"+e.line+" col:"+e.column+" offset="+e.offset+'): "'+r+'"';return t.call(this,n)||this}return u(e,t),e}(Error),ne=function(t){function e(e,r){var n="Failed to parse PDF document (line:"+e.line+" col:"+e.column+" offset="+e.offset+"): "+r;return t.call(this,n)||this}return u(e,t),e}(Error),ie=function(t){function e(e,r,n){var i="Expected next byte to be "+r+" but it was actually "+n;return t.call(this,e,i)||this}return u(e,t),e}(ne),oe=function(t){function e(e,r){var n="Failed to parse PDF object starting with the following byte: "+r;return t.call(this,e,n)||this}return u(e,t),e}(ne),ae=function(t){function e(e){return t.call(this,e,"Failed to parse invalid PDF object")||this}return u(e,t),e}(ne),se=function(t){function e(e){return t.call(this,e,"Failed to parse PDF stream")||this}return u(e,t),e}(ne),ue=function(t){function e(e){return t.call(this,e,"Failed to parse PDF literal string due to unbalanced parenthesis")||this}return u(e,t),e}(ne),ce=function(t){function e(e){return t.call(this,e,"Parser stalled")||this}return u(e,t),e}(ne),le=function(t){function e(e){return t.call(this,e,"No PDF header found")||this}return u(e,t),e}(ne),he=function(t){function e(e,r){var n="Did not find expected keyword '"+U(r)+"'";return t.call(this,e,n)||this}return u(e,t),e}(ne);!function(t){t[t.Null=0]="Null",t[t.Backspace=8]="Backspace",t[t.Tab=9]="Tab",t[t.Newline=10]="Newline",t[t.FormFeed=12]="FormFeed",t[t.CarriageReturn=13]="CarriageReturn",t[t.Space=32]="Space",t[t.ExclamationPoint=33]="ExclamationPoint",t[t.Hash=35]="Hash",t[t.Percent=37]="Percent",t[t.LeftParen=40]="LeftParen",t[t.RightParen=41]="RightParen",t[t.Plus=43]="Plus",t[t.Minus=45]="Minus",t[t.Dash=45]="Dash",t[t.Period=46]="Period",t[t.ForwardSlash=47]="ForwardSlash",t[t.Zero=48]="Zero",t[t.One=49]="One",t[t.Two=50]="Two",t[t.Three=51]="Three",t[t.Four=52]="Four",t[t.Five=53]="Five",t[t.Six=54]="Six",t[t.Seven=55]="Seven",t[t.Eight=56]="Eight",t[t.Nine=57]="Nine",t[t.LessThan=60]="LessThan",t[t.GreaterThan=62]="GreaterThan",t[t.A=65]="A",t[t.D=68]="D",t[t.E=69]="E",t[t.F=70]="F",t[t.O=79]="O",t[t.P=80]="P",t[t.R=82]="R",t[t.LeftSquareBracket=91]="LeftSquareBracket",t[t.BackSlash=92]="BackSlash",t[t.RightSquareBracket=93]="RightSquareBracket",t[t.a=97]="a",t[t.b=98]="b",t[t.d=100]="d",t[t.e=101]="e",t[t.f=102]="f",t[t.i=105]="i",t[t.j=106]="j",t[t.l=108]="l",t[t.m=109]="m",t[t.n=110]="n",t[t.o=111]="o",t[t.r=114]="r",t[t.s=115]="s",t[t.t=116]="t",t[t.u=117]="u",t[t.x=120]="x",t[t.LeftCurly=123]="LeftCurly",t[t.RightCurly=125]="RightCurly",t[t.Tilde=126]="Tilde"}(jt||(jt={}));const fe=jt,de=function(){function t(t,e){this.major=String(t),this.minor=String(e)}return t.prototype.toString=function(){var t=A(129);return"%PDF-"+this.major+"."+this.minor+"\n%"+t+t+t+t},t.prototype.sizeInBytes=function(){return 12+this.major.length+this.minor.length},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=fe.Percent,t[e++]=fe.P,t[e++]=fe.D,t[e++]=fe.F,t[e++]=fe.Dash,e+=k(this.major,t,e),t[e++]=fe.Period,e+=k(this.minor,t,e),t[e++]=fe.Newline,t[e++]=fe.Percent,t[e++]=129,t[e++]=129,t[e++]=129,t[e++]=129,e-r},t.forVersion=function(e,r){return new t(e,r)},t}(),pe=function(){function t(){}return t.prototype.clone=function(t){throw new Mt(this.constructor.name,"clone")},t.prototype.toString=function(){throw new Mt(this.constructor.name,"toString")},t.prototype.sizeInBytes=function(){throw new Mt(this.constructor.name,"sizeInBytes")},t.prototype.copyBytesInto=function(t,e){throw new Mt(this.constructor.name,"copyBytesInto")},t}(),ge=function(t){function e(e){var r=t.call(this)||this;return r.numberValue=e,r.stringValue=function(t){var e,r=String(t);if(Math.abs(t)<1){if(e=parseInt(t.toString().split("e-")[1])){var n=t<0;n&&(t*=-1),t*=Math.pow(10,e-1),r="0."+new Array(e).join("0")+t.toString().substring(2),n&&(r="-"+r)}}else(e=parseInt(t.toString().split("+")[1]))>20&&(e-=20,r=(t/=Math.pow(10,e)).toString()+new Array(e+1).join("0"));return r}(e),r}return u(e,t),e.prototype.asNumber=function(){return this.numberValue},e.prototype.value=function(){return this.numberValue},e.prototype.clone=function(){return e.of(this.numberValue)},e.prototype.toString=function(){return this.stringValue},e.prototype.sizeInBytes=function(){return this.stringValue.length},e.prototype.copyBytesInto=function(t,e){return e+=k(this.stringValue,t,e),this.stringValue.length},e.of=function(t){return new e(t)},e}(pe);var ve=function(t){function e(e){var r=t.call(this)||this;return r.array=[],r.context=e,r}return u(e,t),e.prototype.size=function(){return this.array.length},e.prototype.push=function(t){this.array.push(t)},e.prototype.insert=function(t,e){this.array.splice(t,0,e)},e.prototype.indexOf=function(t){var e=this.array.indexOf(t);return-1===e?void 0:e},e.prototype.remove=function(t){this.array.splice(t,1)},e.prototype.set=function(t,e){this.array[t]=e},e.prototype.get=function(t){return this.array[t]},e.prototype.lookupMaybe=function(t){for(var e,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];return(e=this.context).lookupMaybe.apply(e,f([this.get(t)],r))},e.prototype.lookup=function(t){for(var e,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];return(e=this.context).lookup.apply(e,f([this.get(t)],r))},e.prototype.asRectangle=function(){if(4!==this.size())throw new Xt(this.size());var t=this.lookup(0,ge).asNumber(),e=this.lookup(1,ge).asNumber();return{x:t,y:e,width:this.lookup(2,ge).asNumber()-t,height:this.lookup(3,ge).asNumber()-e}},e.prototype.asArray=function(){return this.array.slice()},e.prototype.clone=function(t){for(var r=e.withContext(t||this.context),n=0,i=this.size();n<i;n++)r.push(this.array[n]);return r},e.prototype.toString=function(){for(var t="[ ",e=0,r=this.size();e<r;e++)t+=this.get(e).toString(),t+=" ";return t+"]"},e.prototype.sizeInBytes=function(){for(var t=3,e=0,r=this.size();e<r;e++)t+=this.get(e).sizeInBytes()+1;return t},e.prototype.copyBytesInto=function(t,e){var r=e;t[e++]=fe.LeftSquareBracket,t[e++]=fe.Space;for(var n=0,i=this.size();n<i;n++)e+=this.get(n).copyBytesInto(t,e),t[e++]=fe.Space;return t[e++]=fe.RightSquareBracket,e-r},e.withContext=function(t){return new e(t)},e}(pe);const me=ve;var ye={};const be=function(t){function e(e,r){var n=this;if(e!==ye)throw new Wt("PDFBool");return(n=t.call(this)||this).value=r,n}return u(e,t),e.prototype.asBoolean=function(){return this.value},e.prototype.clone=function(){return this},e.prototype.toString=function(){return String(this.value)},e.prototype.sizeInBytes=function(){return this.value?4:5},e.prototype.copyBytesInto=function(t,e){return this.value?(t[e++]=fe.t,t[e++]=fe.r,t[e++]=fe.u,t[e++]=fe.e,4):(t[e++]=fe.f,t[e++]=fe.a,t[e++]=fe.l,t[e++]=fe.s,t[e++]=fe.e,5)},e.True=new e(ye,!0),e.False=new e(ye,!1),e}(pe),we=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.asNull=function(){return null},e.prototype.clone=function(){return this},e.prototype.toString=function(){return"null"},e.prototype.sizeInBytes=function(){return 4},e.prototype.copyBytesInto=function(t,e){return t[e++]=fe.n,t[e++]=fe.u,t[e++]=fe.l,t[e++]=fe.l,4},e}(pe));var xe=function(t){function e(e,r){var n=t.call(this)||this;return n.dict=e,n.context=r,n}return u(e,t),e.prototype.keys=function(){return Array.from(this.dict.keys())},e.prototype.values=function(){return Array.from(this.dict.values())},e.prototype.entries=function(){return Array.from(this.dict.entries())},e.prototype.set=function(t,e){this.dict.set(t,e)},e.prototype.get=function(t,e){void 0===e&&(e=!1);var r=this.dict.get(t);if(r!==we||e)return r},e.prototype.has=function(t){var e=this.dict.get(t);return void 0!==e&&e!==we},e.prototype.lookupMaybe=function(t){for(var e,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];var i=r.includes(we),o=(e=this.context).lookupMaybe.apply(e,f([this.get(t,i)],r));if(o!==we||i)return o},e.prototype.lookup=function(t){for(var e,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];var i=r.includes(we),o=(e=this.context).lookup.apply(e,f([this.get(t,i)],r));if(o!==we||i)return o},e.prototype.delete=function(t){return this.dict.delete(t)},e.prototype.asMap=function(){return new Map(this.dict)},e.prototype.clone=function(t){for(var r=e.withContext(t||this.context),n=this.entries(),i=0,o=n.length;i<o;i++){var a=n[i],s=a[0],u=a[1];r.set(s,u)}return r},e.prototype.toString=function(){for(var t="<<\n",e=this.entries(),r=0,n=e.length;r<n;r++){var i=e[r],o=i[0],a=i[1];t+=o.toString()+" "+a.toString()+"\n"}return t+">>"},e.prototype.sizeInBytes=function(){for(var t=5,e=this.entries(),r=0,n=e.length;r<n;r++){var i=e[r],o=i[0],a=i[1];t+=o.sizeInBytes()+a.sizeInBytes()+2}return t},e.prototype.copyBytesInto=function(t,e){var r=e;t[e++]=fe.LessThan,t[e++]=fe.LessThan,t[e++]=fe.Newline;for(var n=this.entries(),i=0,o=n.length;i<o;i++){var a=n[i],s=a[0],u=a[1];e+=s.copyBytesInto(t,e),t[e++]=fe.Space,e+=u.copyBytesInto(t,e),t[e++]=fe.Newline}return t[e++]=fe.GreaterThan,t[e++]=fe.GreaterThan,e-r},e.withContext=function(t){return new e(new Map,t)},e.fromMapWithContext=function(t,r){return new e(t,r)},e}(pe);const Ae=xe;var Ce=new Uint8Array(256);Ce[fe.LeftParen]=1,Ce[fe.RightParen]=1,Ce[fe.LessThan]=1,Ce[fe.GreaterThan]=1,Ce[fe.LeftSquareBracket]=1,Ce[fe.RightSquareBracket]=1,Ce[fe.LeftCurly]=1,Ce[fe.RightCurly]=1,Ce[fe.ForwardSlash]=1,Ce[fe.Percent]=1;var ke=new Uint8Array(256);ke[fe.Null]=1,ke[fe.Tab]=1,ke[fe.Newline]=1,ke[fe.FormFeed]=1,ke[fe.CarriageReturn]=1,ke[fe.Space]=1;for(var Se=new Uint8Array(256),Fe=0;Fe<256;Fe++)Se[Fe]=ke[Fe]||Ce[Fe]?1:0;Se[fe.Hash]=1;var Be={},Ee=new Map,Te=function(t){function e(e,r){var n=this;if(e!==Be)throw new Wt("PDFName");n=t.call(this)||this;for(var i,o="/",a=0,s=r.length;a<s;a++){var u=r[a],c=b(u);o+=(i=c)>=fe.ExclamationPoint&&i<=fe.Tilde&&!Se[i]?u:"#"+x(c)}return n.encodedName=o,n}return u(e,t),e.prototype.asBytes=function(){for(var t=[],e="",r=!1,n=function(e){void 0!==e&&t.push(e),r=!1},i=1,o=this.encodedName.length;i<o;i++){var a=this.encodedName[i],s=b(a),u=this.encodedName[i+1];r?s>=fe.Zero&&s<=fe.Nine||s>=fe.a&&s<=fe.f||s>=fe.A&&s<=fe.F?2!==(e+=a).length&&(u>="0"&&u<="9"||u>="a"&&u<="f"||u>="A"&&u<="F")||(n(parseInt(e,16)),e=""):n(s):s===fe.Hash?r=!0:n(s)}return new Uint8Array(t)},e.prototype.decodeText=function(){var t=this.asBytes();return String.fromCharCode.apply(String,Array.from(t))},e.prototype.asString=function(){return this.encodedName},e.prototype.value=function(){return this.encodedName},e.prototype.clone=function(){return this},e.prototype.toString=function(){return this.encodedName},e.prototype.sizeInBytes=function(){return this.encodedName.length},e.prototype.copyBytesInto=function(t,e){return e+=k(this.encodedName,t,e),this.encodedName.length},e.of=function(t){var r=function(t){return t.replace(/#([\dABCDEF]{2})/g,(function(t,e){return function(t){return A(parseInt(t,16))}(e)}))}(t),n=Ee.get(r);return n||(n=new e(Be,r),Ee.set(r,n)),n},e.Length=e.of("Length"),e.FlateDecode=e.of("FlateDecode"),e.Resources=e.of("Resources"),e.Font=e.of("Font"),e.XObject=e.of("XObject"),e.ExtGState=e.of("ExtGState"),e.Contents=e.of("Contents"),e.Type=e.of("Type"),e.Parent=e.of("Parent"),e.MediaBox=e.of("MediaBox"),e.Page=e.of("Page"),e.Annots=e.of("Annots"),e.TrimBox=e.of("TrimBox"),e.ArtBox=e.of("ArtBox"),e.BleedBox=e.of("BleedBox"),e.CropBox=e.of("CropBox"),e.Rotate=e.of("Rotate"),e.Title=e.of("Title"),e.Author=e.of("Author"),e.Subject=e.of("Subject"),e.Creator=e.of("Creator"),e.Keywords=e.of("Keywords"),e.Producer=e.of("Producer"),e.CreationDate=e.of("CreationDate"),e.ModDate=e.of("ModDate"),e}(pe);const Oe=Te;var ze=function(t){function e(e){var r=t.call(this)||this;return r.dict=e,r}return u(e,t),e.prototype.clone=function(t){throw new Mt(this.constructor.name,"clone")},e.prototype.getContentsString=function(){throw new Mt(this.constructor.name,"getContentsString")},e.prototype.getContents=function(){throw new Mt(this.constructor.name,"getContents")},e.prototype.getContentsSize=function(){throw new Mt(this.constructor.name,"getContentsSize")},e.prototype.updateDict=function(){var t=this.getContentsSize();this.dict.set(Oe.Length,ge.of(t))},e.prototype.sizeInBytes=function(){return this.updateDict(),this.dict.sizeInBytes()+this.getContentsSize()+18},e.prototype.toString=function(){this.updateDict();var t=this.dict.toString();return t+="\nstream\n",(t+=this.getContentsString())+"\nendstream"},e.prototype.copyBytesInto=function(t,e){this.updateDict();var r=e;e+=this.dict.copyBytesInto(t,e),t[e++]=fe.Newline,t[e++]=fe.s,t[e++]=fe.t,t[e++]=fe.r,t[e++]=fe.e,t[e++]=fe.a,t[e++]=fe.m,t[e++]=fe.Newline;for(var n=this.getContents(),i=0,o=n.length;i<o;i++)t[e++]=n[i];return t[e++]=fe.Newline,t[e++]=fe.e,t[e++]=fe.n,t[e++]=fe.d,t[e++]=fe.s,t[e++]=fe.t,t[e++]=fe.r,t[e++]=fe.e,t[e++]=fe.a,t[e++]=fe.m,e-r},e}(pe);const Re=ze,Pe=function(t){function e(e,r){var n=t.call(this,e)||this;return n.contents=r,n}return u(e,t),e.prototype.asUint8Array=function(){return this.contents.slice()},e.prototype.clone=function(t){return e.of(this.dict.clone(t),this.contents.slice())},e.prototype.getContentsString=function(){return U(this.contents)},e.prototype.getContents=function(){return this.contents},e.prototype.getContentsSize=function(){return this.contents.length},e.of=function(t,r){return new e(t,r)},e}(Re);var De={},Ne=new Map;const Ie=function(t){function e(e,r,n){var i=this;if(e!==De)throw new Wt("PDFRef");return(i=t.call(this)||this).objectNumber=r,i.generationNumber=n,i.tag=r+" "+n+" R",i}return u(e,t),e.prototype.clone=function(){return this},e.prototype.toString=function(){return this.tag},e.prototype.sizeInBytes=function(){return this.tag.length},e.prototype.copyBytesInto=function(t,e){return e+=k(this.tag,t,e),this.tag.length},e.of=function(t,r){void 0===r&&(r=0);var n=t+" "+r+" R",i=Ne.get(n);return i||(i=new e(De,t,r),Ne.set(n,i)),i},e}(pe);var je=function(){function t(t,e){this.name=t,this.args=e||[]}return t.prototype.clone=function(e){for(var r=new Array(this.args.length),n=0,i=r.length;n<i;n++){var o=this.args[n];r[n]=o instanceof pe?o.clone(e):o}return t.of(this.name,r)},t.prototype.toString=function(){for(var t="",e=0,r=this.args.length;e<r;e++)t+=String(this.args[e])+" ";return t+this.name},t.prototype.sizeInBytes=function(){for(var t=0,e=0,r=this.args.length;e<r;e++){var n=this.args[e];t+=(n instanceof pe?n.sizeInBytes():n.length)+1}return t+this.name.length},t.prototype.copyBytesInto=function(t,e){for(var r=e,n=0,i=this.args.length;n<i;n++){var o=this.args[n];e+=o instanceof pe?o.copyBytesInto(t,e):k(o,t,e),t[e++]=fe.Space}return(e+=k(this.name,t,e))-r},t.of=function(e,r){return new t(e,r)},t}();const Ue=je;var Me;!function(t){t.NonStrokingColor="sc",t.NonStrokingColorN="scn",t.NonStrokingColorRgb="rg",t.NonStrokingColorGray="g",t.NonStrokingColorCmyk="k",t.NonStrokingColorspace="cs",t.StrokingColor="SC",t.StrokingColorN="SCN",t.StrokingColorRgb="RG",t.StrokingColorGray="G",t.StrokingColorCmyk="K",t.StrokingColorspace="CS",t.BeginMarkedContentSequence="BDC",t.BeginMarkedContent="BMC",t.EndMarkedContent="EMC",t.MarkedContentPointWithProps="DP",t.MarkedContentPoint="MP",t.DrawObject="Do",t.ConcatTransformationMatrix="cm",t.PopGraphicsState="Q",t.PushGraphicsState="q",t.SetFlatness="i",t.SetGraphicsStateParams="gs",t.SetLineCapStyle="J",t.SetLineDashPattern="d",t.SetLineJoinStyle="j",t.SetLineMiterLimit="M",t.SetLineWidth="w",t.SetTextMatrix="Tm",t.SetRenderingIntent="ri",t.AppendRectangle="re",t.BeginInlineImage="BI",t.BeginInlineImageData="ID",t.EndInlineImage="EI",t.ClipEvenOdd="W*",t.ClipNonZero="W",t.CloseAndStroke="s",t.CloseFillEvenOddAndStroke="b*",t.CloseFillNonZeroAndStroke="b",t.ClosePath="h",t.AppendBezierCurve="c",t.CurveToReplicateFinalPoint="y",t.CurveToReplicateInitialPoint="v",t.EndPath="n",t.FillEvenOddAndStroke="B*",t.FillEvenOdd="f*",t.FillNonZeroAndStroke="B",t.FillNonZero="f",t.LegacyFillNonZero="F",t.LineTo="l",t.MoveTo="m",t.ShadingFill="sh",t.StrokePath="S",t.BeginText="BT",t.EndText="ET",t.MoveText="Td",t.MoveTextSetLeading="TD",t.NextLine="T*",t.SetCharacterSpacing="Tc",t.SetFontAndSize="Tf",t.SetTextHorizontalScaling="Tz",t.SetTextLineHeight="TL",t.SetTextRenderingMode="Tr",t.SetTextRise="Ts",t.SetWordSpacing="Tw",t.ShowText="Tj",t.ShowTextAdjusted="TJ",t.ShowTextLine="'",t.ShowTextLineAndSpace='"',t.Type3D0="d0",t.Type3D1="d1",t.BeginCompatibilitySection="BX",t.EndCompatibilitySection="EX"}(Me||(Me={}));const We=Me,Ve=function(t){function e(e,r){var n=t.call(this,e)||this;return n.computeContents=function(){var t=n.getUnencodedContents();return n.encode?it().deflate(t):t},n.encode=r,r&&e.set(Oe.of("Filter"),Oe.of("FlateDecode")),n.contentsCache=It.populatedBy(n.computeContents),n}return u(e,t),e.prototype.getContents=function(){return this.contentsCache.access()},e.prototype.getContentsSize=function(){return this.contentsCache.access().length},e.prototype.getUnencodedContents=function(){throw new Mt(this.constructor.name,"getUnencodedContents")},e}(Re);var qe=function(t){function e(e,r,n){void 0===n&&(n=!0);var i=t.call(this,e,n)||this;return i.operators=r,i}return u(e,t),e.prototype.push=function(){for(var t,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];(t=this.operators).push.apply(t,e)},e.prototype.clone=function(t){for(var r=new Array(this.operators.length),n=0,i=this.operators.length;n<i;n++)r[n]=this.operators[n].clone(t);var o=this.dict,a=this.encode;return e.of(o.clone(t),r,a)},e.prototype.getContentsString=function(){for(var t="",e=0,r=this.operators.length;e<r;e++)t+=this.operators[e]+"\n";return t},e.prototype.getUnencodedContents=function(){for(var t=new Uint8Array(this.getUnencodedContentsSize()),e=0,r=0,n=this.operators.length;r<n;r++)e+=this.operators[r].copyBytesInto(t,e),t[e++]=fe.Newline;return t},e.prototype.getUnencodedContentsSize=function(){for(var t=0,e=0,r=this.operators.length;e<r;e++)t+=this.operators[e].sizeInBytes()+1;return t},e.of=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(Ve);const Le=qe;var Ge=function(t,e){var r=t[0],n=e[0];return r.objectNumber-n.objectNumber},Ke=function(){function t(){this.largestObjectNumber=0,this.header=de.forVersion(1,7),this.trailerInfo={},this.indirectObjects=new Map}return t.prototype.assign=function(t,e){this.indirectObjects.set(t,e),t.objectNumber>this.largestObjectNumber&&(this.largestObjectNumber=t.objectNumber)},t.prototype.nextRef=function(){return this.largestObjectNumber+=1,Ie.of(this.largestObjectNumber)},t.prototype.register=function(t){var e=this.nextRef();return this.assign(e,t),e},t.prototype.delete=function(t){return this.indirectObjects.delete(t)},t.prototype.lookupMaybe=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var n=e.includes(we),i=t instanceof Ie?this.indirectObjects.get(t):t;if(i&&(i!==we||n)){for(var o=0,a=e.length;o<a;o++){var s=e[o];if(s===we){if(i===we)return i}else if(i instanceof s)return i}throw new Vt(e,i)}},t.prototype.lookup=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var n=t instanceof Ie?this.indirectObjects.get(t):t;if(0===e.length)return n;for(var i=0,o=e.length;i<o;i++){var a=e[i];if(a===we){if(n===we)return n}else if(n instanceof a)return n}throw new Vt(e,n)},t.prototype.getObjectRef=function(t){for(var e=Array.from(this.indirectObjects.entries()),r=0,n=e.length;r<n;r++){var i=e[r],o=i[0];if(i[1]===t)return o}},t.prototype.enumerateIndirectObjects=function(){return Array.from(this.indirectObjects.entries()).sort(Ge)},t.prototype.obj=function(t){if(t instanceof pe)return t;if(null==t)return we;if("string"==typeof t)return Oe.of(t);if("number"==typeof t)return ge.of(t);if("boolean"==typeof t)return t?be.True:be.False;if(Array.isArray(t)){for(var e=me.withContext(this),r=0,n=t.length;r<n;r++)e.push(this.obj(t[r]));return e}var i=Ae.withContext(this),o=Object.keys(t);for(r=0,n=o.length;r<n;r++){var a=o[r],s=t[a];void 0!==s&&i.set(Oe.of(a),this.obj(s))}return i},t.prototype.stream=function(t,e){return void 0===e&&(e={}),Pe.of(this.obj(e),I(t))},t.prototype.flateStream=function(t,e){return void 0===e&&(e={}),this.stream(it().deflate(I(t)),c(c({},e),{Filter:"FlateDecode"}))},t.prototype.contentStream=function(t,e){return void 0===e&&(e={}),Le.of(this.obj(e),t)},t.prototype.formXObject=function(t,e){return void 0===e&&(e={}),this.contentStream(t,c(c({BBox:this.obj([0,0,0,0]),Matrix:this.obj([1,0,0,1,0,0])},e),{Type:"XObject",Subtype:"Form"}))},t.prototype.getPushGraphicsStateContentStream=function(){if(this.pushGraphicsStateContentStreamRef)return this.pushGraphicsStateContentStreamRef;var t=this.obj({}),e=Ue.of(We.PushGraphicsState),r=Le.of(t,[e]);return this.pushGraphicsStateContentStreamRef=this.register(r),this.pushGraphicsStateContentStreamRef},t.prototype.getPopGraphicsStateContentStream=function(){if(this.popGraphicsStateContentStreamRef)return this.popGraphicsStateContentStreamRef;var t=this.obj({}),e=Ue.of(We.PopGraphicsState),r=Le.of(t,[e]);return this.popGraphicsStateContentStreamRef=this.register(r),this.popGraphicsStateContentStreamRef},t.create=function(){return new t},t}();const He=Ke;var Xe=function(t){function e(e,r,n){void 0===n&&(n=!0);var i=t.call(this,e,r)||this;return i.normalized=!1,i.autoNormalizeCTM=n,i}return u(e,t),e.prototype.clone=function(t){for(var r=e.fromMapWithContext(new Map,t||this.context,this.autoNormalizeCTM),n=this.entries(),i=0,o=n.length;i<o;i++){var a=n[i],s=a[0],u=a[1];r.set(s,u)}return r},e.prototype.Parent=function(){return this.lookupMaybe(Oe.Parent,Ae)},e.prototype.Contents=function(){return this.lookup(Oe.of("Contents"))},e.prototype.Annots=function(){return this.lookupMaybe(Oe.Annots,me)},e.prototype.BleedBox=function(){return this.lookupMaybe(Oe.BleedBox,me)},e.prototype.TrimBox=function(){return this.lookupMaybe(Oe.TrimBox,me)},e.prototype.ArtBox=function(){return this.lookupMaybe(Oe.ArtBox,me)},e.prototype.Resources=function(){var t=this.getInheritableAttribute(Oe.Resources);return this.context.lookupMaybe(t,Ae)},e.prototype.MediaBox=function(){var t=this.getInheritableAttribute(Oe.MediaBox);return this.context.lookup(t,me)},e.prototype.CropBox=function(){var t=this.getInheritableAttribute(Oe.CropBox);return this.context.lookupMaybe(t,me)},e.prototype.Rotate=function(){var t=this.getInheritableAttribute(Oe.Rotate);return this.context.lookupMaybe(t,ge)},e.prototype.getInheritableAttribute=function(t){var e;return this.ascend((function(r){e||(e=r.get(t))})),e},e.prototype.setParent=function(t){this.set(Oe.Parent,t)},e.prototype.addContentStream=function(t){var e=this.normalizedEntries().Contents||this.context.obj([]);this.set(Oe.Contents,e),e.push(t)},e.prototype.wrapContentStreams=function(t,e){var r=this.Contents();return r instanceof me&&(r.insert(0,t),r.push(e),!0)},e.prototype.addAnnot=function(t){this.normalizedEntries().Annots.push(t)},e.prototype.removeAnnot=function(t){var e=this.normalizedEntries().Annots,r=e.indexOf(t);void 0!==r&&e.remove(r)},e.prototype.setFontDictionary=function(t,e){this.normalizedEntries().Font.set(t,e)},e.prototype.setXObject=function(t,e){this.normalizedEntries().XObject.set(t,e)},e.prototype.setExtGState=function(t,e){this.normalizedEntries().ExtGState.set(t,e)},e.prototype.ascend=function(t){t(this);var e=this.Parent();e&&e.ascend(t)},e.prototype.normalize=function(){if(!this.normalized){var t=this.context,e=this.get(Oe.Contents);this.context.lookup(e)instanceof Re&&this.set(Oe.Contents,t.obj([e])),this.autoNormalizeCTM&&this.wrapContentStreams(this.context.getPushGraphicsStateContentStream(),this.context.getPopGraphicsStateContentStream());var r=this.getInheritableAttribute(Oe.Resources),n=t.lookupMaybe(r,Ae)||t.obj({});this.set(Oe.Resources,n);var i=n.lookupMaybe(Oe.Font,Ae)||t.obj({});n.set(Oe.Font,i);var o=n.lookupMaybe(Oe.XObject,Ae)||t.obj({});n.set(Oe.XObject,o);var a=n.lookupMaybe(Oe.ExtGState,Ae)||t.obj({});n.set(Oe.ExtGState,a);var s=this.Annots()||t.obj([]);this.set(Oe.Annots,s),this.normalized=!0}},e.prototype.normalizedEntries=function(){this.normalize();var t=this.Annots(),e=this.Resources();return{Annots:t,Resources:e,Contents:this.Contents(),Font:e.lookup(Oe.Font,Ae),XObject:e.lookup(Oe.XObject,Ae),ExtGState:e.lookup(Oe.ExtGState,Ae)}},e.InheritableEntries=["Resources","MediaBox","CropBox","Rotate"],e.withContextAndParent=function(t,r){var n=new Map;return n.set(Oe.Type,Oe.Page),n.set(Oe.Parent,r),n.set(Oe.Resources,t.obj({})),n.set(Oe.MediaBox,t.obj([0,0,612,792])),new e(n,t,!1)},e.fromMapWithContext=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(Ae);const Ze=Xe;var Ye=function(){function t(t,e){var r=this;this.traversedObjects=new Map,this.copy=function(t){return t instanceof Ze?r.copyPDFPage(t):t instanceof Ae?r.copyPDFDict(t):t instanceof me?r.copyPDFArray(t):t instanceof Re?r.copyPDFStream(t):t instanceof Ie?r.copyPDFIndirectObject(t):t.clone()},this.copyPDFPage=function(t){for(var e=t.clone(),n=Ze.InheritableEntries,i=0,o=n.length;i<o;i++){var a=Oe.of(n[i]),s=e.getInheritableAttribute(a);!e.get(a)&&s&&e.set(a,s)}return e.delete(Oe.of("Parent")),r.copyPDFDict(e)},this.copyPDFDict=function(t){if(r.traversedObjects.has(t))return r.traversedObjects.get(t);var e=t.clone(r.dest);r.traversedObjects.set(t,e);for(var n=t.entries(),i=0,o=n.length;i<o;i++){var a=n[i],s=a[0],u=a[1];e.set(s,r.copy(u))}return e},this.copyPDFArray=function(t){if(r.traversedObjects.has(t))return r.traversedObjects.get(t);var e=t.clone(r.dest);r.traversedObjects.set(t,e);for(var n=0,i=t.size();n<i;n++){var o=t.get(n);e.set(n,r.copy(o))}return e},this.copyPDFStream=function(t){if(r.traversedObjects.has(t))return r.traversedObjects.get(t);var e=t.clone(r.dest);r.traversedObjects.set(t,e);for(var n=t.dict.entries(),i=0,o=n.length;i<o;i++){var a=n[i],s=a[0],u=a[1];e.dict.set(s,r.copy(u))}return e},this.copyPDFIndirectObject=function(t){if(!r.traversedObjects.has(t)){var e=r.dest.nextRef();r.traversedObjects.set(t,e);var n=r.src.lookup(t);if(n){var i=r.copy(n);r.dest.assign(e,i)}}return r.traversedObjects.get(t)},this.src=t,this.dest=e}return t.for=function(e,r){return new t(e,r)},t}();const Je=Ye;var Qe=function(){function t(t){this.subsections=t?[[t]]:[],this.chunkIdx=0,this.chunkLength=t?1:0}return t.prototype.addEntry=function(t,e){this.append({ref:t,offset:e,deleted:!1})},t.prototype.addDeletedEntry=function(t,e){this.append({ref:t,offset:e,deleted:!0})},t.prototype.toString=function(){for(var t="xref\n",e=0,r=this.subsections.length;e<r;e++){var n=this.subsections[e];t+=n[0].ref.objectNumber+" "+n.length+"\n";for(var i=0,o=n.length;i<o;i++){var a=n[i];t+=C(String(a.offset),10,"0"),t+=" ",t+=C(String(a.ref.generationNumber),5,"0"),t+=" ",t+=a.deleted?"f":"n",t+=" \n"}}return t},t.prototype.sizeInBytes=function(){for(var t=5,e=0,r=this.subsections.length;e<r;e++){var n=this.subsections[e],i=n.length,o=n[0];t+=2,t+=String(o.ref.objectNumber).length,t+=String(i).length,t+=20*i}return t},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=fe.x,t[e++]=fe.r,t[e++]=fe.e,t[e++]=fe.f,t[e++]=fe.Newline,(e+=this.copySubsectionsIntoBuffer(this.subsections,t,e))-r},t.prototype.copySubsectionsIntoBuffer=function(t,e,r){for(var n=r,i=t.length,o=0;o<i;o++){var a=this.subsections[o],s=String(a[0].ref.objectNumber);r+=k(s,e,r),e[r++]=fe.Space;var u=String(a.length);r+=k(u,e,r),e[r++]=fe.Newline,r+=this.copyEntriesIntoBuffer(a,e,r)}return r-n},t.prototype.copyEntriesIntoBuffer=function(t,e,r){for(var n=t.length,i=0;i<n;i++){var o=t[i],a=C(String(o.offset),10,"0");r+=k(a,e,r),e[r++]=fe.Space;var s=C(String(o.ref.generationNumber),5,"0");r+=k(s,e,r),e[r++]=fe.Space,e[r++]=o.deleted?fe.f:fe.n,e[r++]=fe.Space,e[r++]=fe.Newline}return 20*n},t.prototype.append=function(t){if(0===this.chunkLength)return this.subsections.push([t]),this.chunkIdx=0,void(this.chunkLength=1);var e=this.subsections[this.chunkIdx],r=e[this.chunkLength-1];t.ref.objectNumber-r.ref.objectNumber>1?(this.subsections.push([t]),this.chunkIdx+=1,this.chunkLength=1):(e.push(t),this.chunkLength+=1)},t.create=function(){return new t({ref:Ie.of(0,65535),offset:0,deleted:!0})},t.createEmpty=function(){return new t},t}();const _e=Qe,$e=function(){function t(t){this.lastXRefOffset=String(t)}return t.prototype.toString=function(){return"startxref\n"+this.lastXRefOffset+"\n%%EOF"},t.prototype.sizeInBytes=function(){return 16+this.lastXRefOffset.length},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=fe.s,t[e++]=fe.t,t[e++]=fe.a,t[e++]=fe.r,t[e++]=fe.t,t[e++]=fe.x,t[e++]=fe.r,t[e++]=fe.e,t[e++]=fe.f,t[e++]=fe.Newline,e+=k(this.lastXRefOffset,t,e),t[e++]=fe.Newline,t[e++]=fe.Percent,t[e++]=fe.Percent,t[e++]=fe.E,t[e++]=fe.O,t[e++]=fe.F,e-r},t.forLastCrossRefSectionOffset=function(e){return new t(e)},t}(),tr=function(){function t(t){this.dict=t}return t.prototype.toString=function(){return"trailer\n"+this.dict.toString()},t.prototype.sizeInBytes=function(){return 8+this.dict.sizeInBytes()},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=fe.t,t[e++]=fe.r,t[e++]=fe.a,t[e++]=fe.i,t[e++]=fe.l,t[e++]=fe.e,t[e++]=fe.r,t[e++]=fe.Newline,(e+=this.dict.copyBytesInto(t,e))-r},t.of=function(e){return new t(e)},t}();var er=function(t){function e(e,r,n){void 0===n&&(n=!0);var i=t.call(this,e.obj({}),n)||this;return i.objects=r,i.offsets=i.computeObjectOffsets(),i.offsetsString=i.computeOffsetsString(),i.dict.set(Oe.of("Type"),Oe.of("ObjStm")),i.dict.set(Oe.of("N"),ge.of(i.objects.length)),i.dict.set(Oe.of("First"),ge.of(i.offsetsString.length)),i}return u(e,t),e.prototype.getObjectsCount=function(){return this.objects.length},e.prototype.clone=function(t){return e.withContextAndObjects(t||this.dict.context,this.objects.slice(),this.encode)},e.prototype.getContentsString=function(){for(var t=this.offsetsString,e=0,r=this.objects.length;e<r;e++)t+=this.objects[e][1]+"\n";return t},e.prototype.getUnencodedContents=function(){for(var t=new Uint8Array(this.getUnencodedContentsSize()),e=k(this.offsetsString,t,0),r=0,n=this.objects.length;r<n;r++)e+=this.objects[r][1].copyBytesInto(t,e),t[e++]=fe.Newline;return t},e.prototype.getUnencodedContentsSize=function(){return this.offsetsString.length+N(this.offsets)[1]+N(this.objects)[1].sizeInBytes()+1},e.prototype.computeOffsetsString=function(){for(var t="",e=0,r=this.offsets.length;e<r;e++){var n=this.offsets[e];t+=n[0]+" "+n[1]+" "}return t},e.prototype.computeObjectOffsets=function(){for(var t=0,e=new Array(this.objects.length),r=0,n=this.objects.length;r<n;r++){var i=this.objects[r],o=i[0],a=i[1];e[r]=[o.objectNumber,t],t+=a.sizeInBytes()+1}return e},e.withContextAndObjects=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(Ve);const rr=er;var nr=function(){function t(t,e){var r=this;this.parsedObjects=0,this.shouldWaitForTick=function(t){return r.parsedObjects+=t,r.parsedObjects%r.objectsPerTick==0},this.context=t,this.objectsPerTick=e}return t.prototype.serializeToBuffer=function(){return l(this,void 0,void 0,(function(){var t,e,r,n,i,o,a,s,u,c,l,f,d,p,g,v,m;return h(this,(function(h){switch(h.label){case 0:return[4,this.computeBufferSize()];case 1:t=h.sent(),e=t.size,r=t.header,n=t.indirectObjects,i=t.xref,o=t.trailerDict,a=t.trailer,s=0,u=new Uint8Array(e),s+=r.copyBytesInto(u,s),u[s++]=fe.Newline,u[s++]=fe.Newline,c=0,l=n.length,h.label=2;case 2:return c<l?(f=n[c],d=f[0],p=f[1],g=String(d.objectNumber),s+=k(g,u,s),u[s++]=fe.Space,v=String(d.generationNumber),s+=k(v,u,s),u[s++]=fe.Space,u[s++]=fe.o,u[s++]=fe.b,u[s++]=fe.j,u[s++]=fe.Newline,s+=p.copyBytesInto(u,s),u[s++]=fe.Newline,u[s++]=fe.e,u[s++]=fe.n,u[s++]=fe.d,u[s++]=fe.o,u[s++]=fe.b,u[s++]=fe.j,u[s++]=fe.Newline,u[s++]=fe.Newline,m=p instanceof rr?p.getObjectsCount():1,this.shouldWaitForTick(m)?[4,q()]:[3,4]):[3,5];case 3:h.sent(),h.label=4;case 4:return c++,[3,2];case 5:return i&&(s+=i.copyBytesInto(u,s),u[s++]=fe.Newline),o&&(s+=o.copyBytesInto(u,s),u[s++]=fe.Newline,u[s++]=fe.Newline),s+=a.copyBytesInto(u,s),[2,u]}}))}))},t.prototype.computeIndirectObjectSize=function(t){var e=t[0],r=t[1];return e.sizeInBytes()+3+(r.sizeInBytes()+9)},t.prototype.createTrailerDict=function(){return this.context.obj({Size:this.context.largestObjectNumber+1,Root:this.context.trailerInfo.Root,Encrypt:this.context.trailerInfo.Encrypt,Info:this.context.trailerInfo.Info,ID:this.context.trailerInfo.ID})},t.prototype.computeBufferSize=function(){return l(this,void 0,void 0,(function(){var t,e,r,n,i,o,a,s,u,c,l;return h(this,(function(h){switch(h.label){case 0:t=de.forVersion(1,7),e=t.sizeInBytes()+2,r=_e.create(),n=this.context.enumerateIndirectObjects(),i=0,o=n.length,h.label=1;case 1:return i<o?(a=n[i],s=a[0],r.addEntry(s,e),e+=this.computeIndirectObjectSize(a),this.shouldWaitForTick(1)?[4,q()]:[3,3]):[3,4];case 2:h.sent(),h.label=3;case 3:return i++,[3,1];case 4:return u=e,e+=r.sizeInBytes()+1,c=tr.of(this.createTrailerDict()),e+=c.sizeInBytes()+2,l=$e.forLastCrossRefSectionOffset(u),[2,{size:e+=l.sizeInBytes(),header:t,indirectObjects:n,xref:r,trailerDict:c,trailer:l}]}}))}))},t.forContext=function(e,r){return new t(e,r)},t}();const ir=nr;var or=function(t){function e(e){var r=t.call(this)||this;return r.data=e,r}return u(e,t),e.prototype.clone=function(){return e.of(this.data.slice())},e.prototype.toString=function(){return"PDFInvalidObject("+this.data.length+" bytes)"},e.prototype.sizeInBytes=function(){return this.data.length},e.prototype.copyBytesInto=function(t,e){for(var r=this.data.length,n=0;n<r;n++)t[e++]=this.data[n];return r},e.of=function(t){return new e(t)},e}(pe);const ar=or;var sr;!function(t){t[t.Deleted=0]="Deleted",t[t.Uncompressed=1]="Uncompressed",t[t.Compressed=2]="Compressed"}(sr||(sr={}));var ur=function(t){function e(e,r,n){void 0===n&&(n=!0);var i=t.call(this,e,n)||this;return i.computeIndex=function(){for(var t=[],e=0,r=0,n=i.entries.length;r<n;r++){var o=i.entries[r],a=i.entries[r-1];0===r?t.push(o.ref.objectNumber):o.ref.objectNumber-a.ref.objectNumber>1&&(t.push(e),t.push(o.ref.objectNumber),e=0),e+=1}return t.push(e),t},i.computeEntryTuples=function(){for(var t=new Array(i.entries.length),e=0,r=i.entries.length;e<r;e++){var n=i.entries[e];if(n.type===sr.Deleted){var o=n.type,a=n.nextFreeObjectNumber,s=n.ref;t[e]=[o,a,s.generationNumber]}if(n.type===sr.Uncompressed){o=n.type;var u=n.offset;s=n.ref,t[e]=[o,u,s.generationNumber]}if(n.type===sr.Compressed){o=n.type;var c=n.objectStreamRef,l=n.index;t[e]=[o,c.objectNumber,l]}}return t},i.computeMaxEntryByteWidths=function(){for(var t=i.entryTuplesCache.access(),e=[0,0,0],r=0,n=t.length;r<n;r++){var o=t[r],a=o[0],s=o[1],u=o[2],c=tt(a),l=tt(s),h=tt(u);c>e[0]&&(e[0]=c),l>e[1]&&(e[1]=l),h>e[2]&&(e[2]=h)}return e},i.entries=r||[],i.entryTuplesCache=It.populatedBy(i.computeEntryTuples),i.maxByteWidthsCache=It.populatedBy(i.computeMaxEntryByteWidths),i.indexCache=It.populatedBy(i.computeIndex),e.set(Oe.of("Type"),Oe.of("XRef")),i}return u(e,t),e.prototype.addDeletedEntry=function(t,e){var r=sr.Deleted;this.entries.push({type:r,ref:t,nextFreeObjectNumber:e}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},e.prototype.addUncompressedEntry=function(t,e){var r=sr.Uncompressed;this.entries.push({type:r,ref:t,offset:e}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},e.prototype.addCompressedEntry=function(t,e,r){var n=sr.Compressed;this.entries.push({type:n,ref:t,objectStreamRef:e,index:r}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},e.prototype.clone=function(t){var r=this,n=r.dict,i=r.entries,o=r.encode;return e.of(n.clone(t),i.slice(),o)},e.prototype.getContentsString=function(){for(var t=this.entryTuplesCache.access(),e=this.maxByteWidthsCache.access(),r="",n=0,i=t.length;n<i;n++){for(var o=t[n],a=o[0],s=o[1],u=o[2],c=W(et(a)),l=W(et(s)),h=W(et(u)),f=e[0]-1;f>=0;f--)r+=(c[f]||0).toString(2);for(f=e[1]-1;f>=0;f--)r+=(l[f]||0).toString(2);for(f=e[2]-1;f>=0;f--)r+=(h[f]||0).toString(2)}return r},e.prototype.getUnencodedContents=function(){for(var t=this.entryTuplesCache.access(),e=this.maxByteWidthsCache.access(),r=new Uint8Array(this.getUnencodedContentsSize()),n=0,i=0,o=t.length;i<o;i++){for(var a=t[i],s=a[0],u=a[1],c=a[2],l=W(et(s)),h=W(et(u)),f=W(et(c)),d=e[0]-1;d>=0;d--)r[n++]=l[d]||0;for(d=e[1]-1;d>=0;d--)r[n++]=h[d]||0;for(d=e[2]-1;d>=0;d--)r[n++]=f[d]||0}return r},e.prototype.getUnencodedContentsSize=function(){var t=function(t){for(var e=0,r=0,n=t.length;r<n;r++)e+=t[r];return e}(this.maxByteWidthsCache.access());return t*this.entries.length},e.prototype.updateDict=function(){t.prototype.updateDict.call(this);var e=this.maxByteWidthsCache.access(),r=this.indexCache.access(),n=this.dict.context;this.dict.set(Oe.of("W"),n.obj(e)),this.dict.set(Oe.of("Index"),n.obj(r))},e.create=function(t,r){void 0===r&&(r=!0);var n=new e(t,[],r);return n.addDeletedEntry(Ie.of(0,65535),0),n},e.of=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(Ve);const cr=ur;var lr=function(t){function e(e,r,n,i){var o=t.call(this,e,r)||this;return o.encodeStreams=n,o.objectsPerStream=i,o}return u(e,t),e.prototype.computeBufferSize=function(){return l(this,void 0,void 0,(function(){var t,e,r,n,i,o,a,s,u,c,l,f,d,p,g,v,m,y,b;return h(this,(function(h){switch(h.label){case 0:t=this.context.largestObjectNumber+1,e=de.forVersion(1,7),r=e.sizeInBytes()+2,n=cr.create(this.createTrailerDict(),this.encodeStreams),i=[],o=[],a=[],s=this.context.enumerateIndirectObjects(),f=0,d=s.length,h.label=1;case 1:return f<d?(u=s[f],g=u[0],c=u[1],g===this.context.trailerInfo.Encrypt||c instanceof Re||c instanceof ar||0!==g.generationNumber?(i.push(u),n.addUncompressedEntry(g,r),r+=this.computeIndirectObjectSize(u),this.shouldWaitForTick(1)?[4,q()]:[3,3]):[3,4]):[3,6];case 2:h.sent(),h.label=3;case 3:return[3,5];case 4:p=N(o),l=N(a),p&&p.length%this.objectsPerStream!=0||(p=[],o.push(p),l=Ie.of(t++),a.push(l)),n.addCompressedEntry(g,l,p.length),p.push(u),h.label=5;case 5:return f++,[3,1];case 6:f=0,d=o.length,h.label=7;case 7:return f<d?(p=o[f],g=a[f],v=rr.withContextAndObjects(this.context,p,this.encodeStreams),n.addUncompressedEntry(g,r),r+=this.computeIndirectObjectSize([g,v]),i.push([g,v]),this.shouldWaitForTick(p.length)?[4,q()]:[3,9]):[3,10];case 8:h.sent(),h.label=9;case 9:return f++,[3,7];case 10:return m=Ie.of(t++),n.dict.set(Oe.of("Size"),ge.of(t)),n.addUncompressedEntry(m,r),y=r,r+=this.computeIndirectObjectSize([m,n]),i.push([m,n]),b=$e.forLastCrossRefSectionOffset(y),[2,{size:r+=b.sizeInBytes(),header:e,indirectObjects:i,trailer:b}]}}))}))},e.forContext=function(t,r,n,i){return void 0===n&&(n=!0),void 0===i&&(i=50),new e(t,r,n,i)},e}(ir);const hr=lr;var fr=function(t){function e(e){var r=t.call(this)||this;return r.value=e,r}return u(e,t),e.prototype.asBytes=function(){for(var t=this.value+(this.value.length%2==1?"0":""),e=t.length,r=new Uint8Array(t.length/2),n=0,i=0;n<e;){var o=parseInt(t.substring(n,n+2),16);r[i]=o,n+=2,i+=1}return r},e.prototype.decodeText=function(){var t=this.asBytes();return $(t)?H(t):Nt(t)},e.prototype.decodeDate=function(){var t=this.decodeText(),e=P(t);if(!e)throw new Zt(t);return e},e.prototype.asString=function(){return this.value},e.prototype.clone=function(){return e.of(this.value)},e.prototype.toString=function(){return"<"+this.value+">"},e.prototype.sizeInBytes=function(){return this.value.length+2},e.prototype.copyBytesInto=function(t,e){return t[e++]=fe.LessThan,e+=k(this.value,t,e),t[e++]=fe.GreaterThan,this.value.length+2},e.of=function(t){return new e(t)},e.fromText=function(t){for(var r=function(t,e){void 0===e&&(e=!0);var r=[];e&&r.push(65279);for(var n=0,i=t.length;n<i;){var o=t.codePointAt(n);if(o<65536)r.push(o),n+=1;else{if(!(o<1114112))throw new Error("Invalid code point: 0x"+x(o));r.push(L(o),G(o)),n+=2}}return new Uint16Array(r)}(t),n="",i=0,o=r.length;i<o;i++)n+=w(r[i],4);return new e(n)},e}(pe);const dr=fr;var pr=function(){function t(t,e){this.encoding=t===ut.ZapfDingbats?vt.ZapfDingbats:t===ut.Symbol?vt.Symbol:vt.WinAnsi,this.font=ft.load(t),this.fontName=this.font.FontName,this.customName=e}return t.prototype.encodeText=function(t){for(var e=this.encodeTextAsGlyphs(t),r=new Array(e.length),n=0,i=e.length;n<i;n++)r[n]=x(e[n].code);return dr.of(r.join(""))},t.prototype.widthOfTextAtSize=function(t,e){for(var r=this.encodeTextAsGlyphs(t),n=0,i=0,o=r.length;i<o;i++){var a=r[i].name,s=(r[i+1]||{}).name,u=this.font.getXAxisKerningForPair(a,s)||0;n+=this.widthOfGlyph(a)+u}return n*(e/1e3)},t.prototype.heightOfFontAtSize=function(t,e){void 0===e&&(e={});var r=e.descender,n=void 0===r||r,i=this.font,o=i.Ascender,a=i.Descender,s=i.FontBBox,u=(o||s[3])-(a||s[1]);return n||(u+=a||0),u/1e3*t},t.prototype.sizeOfFontAtHeight=function(t){var e=this.font,r=e.Ascender,n=e.Descender,i=e.FontBBox;return 1e3*t/((r||i[3])-(n||i[1]))},t.prototype.embedIntoContext=function(t,e){var r=t.obj({Type:"Font",Subtype:"Type1",BaseFont:this.customName||this.fontName,Encoding:this.encoding===vt.WinAnsi?"WinAnsiEncoding":void 0});return e?(t.assign(e,r),e):t.register(r)},t.prototype.widthOfGlyph=function(t){return this.font.getWidthOfGlyph(t)||250},t.prototype.encodeTextAsGlyphs=function(t){for(var e=Array.from(t),r=new Array(e.length),n=0,i=e.length;n<i;n++){var o=e[n].codePointAt(0);r[n]=this.encoding.encodeUnicodeCodePoint(o)}return r},t.for=function(e,r){return new t(e,r)},t}();const gr=pr;var vr=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return"<"+t.join("")+">"},mr=function(t){return w(t,4)},yr=function(t){if(function(t){return t>=0&&t<=65535}(t))return mr(t);if(function(t){return t>=65536&&t<=1114111}(t)){var e=L(t),r=G(t);return""+mr(e)+mr(r)}var n=x(t);throw new Error("0x"+n+" is not a valid UTF-8 or UTF-16 codepoint.")},br=function(t){function e(e){var r=t.call(this)||this;return r.value=e,r}return u(e,t),e.prototype.asBytes=function(){for(var t=[],e="",r=!1,n=function(e){void 0!==e&&t.push(e),r=!1},i=0,o=this.value.length;i<o;i++){var a=this.value[i],s=b(a),u=this.value[i+1];r?s===fe.Newline||s===fe.CarriageReturn?n():s===fe.n?n(fe.Newline):s===fe.r?n(fe.CarriageReturn):s===fe.t?n(fe.Tab):s===fe.b?n(fe.Backspace):s===fe.f?n(fe.FormFeed):s===fe.LeftParen?n(fe.LeftParen):s===fe.RightParen?n(fe.RightParen):s===fe.Backspace?n(fe.BackSlash):s>=fe.Zero&&s<=fe.Seven?3!==(e+=a).length&&u>="0"&&u<="7"||(n(parseInt(e,8)),e=""):n(s):s===fe.BackSlash?r=!0:n(s)}return new Uint8Array(t)},e.prototype.decodeText=function(){var t=this.asBytes();return $(t)?H(t):Nt(t)},e.prototype.decodeDate=function(){var t=this.decodeText(),e=P(t);if(!e)throw new Zt(t);return e},e.prototype.asString=function(){return this.value},e.prototype.clone=function(){return e.of(this.value)},e.prototype.toString=function(){return"("+this.value+")"},e.prototype.sizeInBytes=function(){return this.value.length+2},e.prototype.copyBytesInto=function(t,e){return t[e++]=fe.LeftParen,e+=k(this.value,t,e),t[e++]=fe.RightParen,this.value.length+2},e.of=function(t){return new e(t)},e.fromDate=function(t){return new e("D:"+C(String(t.getUTCFullYear()),4,"0")+C(String(t.getUTCMonth()+1),2,"0")+C(String(t.getUTCDate()),2,"0")+C(String(t.getUTCHours()),2,"0")+C(String(t.getUTCMinutes()),2,"0")+C(String(t.getUTCSeconds()),2,"0")+"Z")},e}(pe);const wr=br;var xr=function(){function t(t,e,r,n){var i=this;this.allGlyphsInFontSortedById=function(){for(var t=new Array(i.font.characterSet.length),e=0,r=t.length;e<r;e++){var n=i.font.characterSet[e];t[e]=i.font.glyphForCodePoint(n)}return function(t,e){for(var r=[],n=0,i=t.length;n<i;n++){var o=t[n],a=t[n-1];0!==n&&e(o)===e(a)||r.push(o)}return r}(t.sort(M),(function(t){return t.id}))},this.font=t,this.scale=1e3/this.font.unitsPerEm,this.fontData=e,this.fontName=this.font.postscriptName||"Font",this.customName=r,this.fontFeatures=n,this.baseFontName="",this.glyphCache=It.populatedBy(this.allGlyphsInFontSortedById)}return t.for=function(e,r,n,i){return l(this,void 0,void 0,(function(){return h(this,(function(o){switch(o.label){case 0:return[4,e.create(r)];case 1:return[2,new t(o.sent(),r,n,i)]}}))}))},t.prototype.encodeText=function(t){for(var e=this.font.layout(t,this.fontFeatures).glyphs,r=new Array(e.length),n=0,i=e.length;n<i;n++)r[n]=w(e[n].id,4);return dr.of(r.join(""))},t.prototype.widthOfTextAtSize=function(t,e){for(var r=this.font.layout(t,this.fontFeatures).glyphs,n=0,i=0,o=r.length;i<o;i++)n+=r[i].advanceWidth*this.scale;return n*(e/1e3)},t.prototype.heightOfFontAtSize=function(t,e){void 0===e&&(e={});var r=e.descender,n=void 0===r||r,i=this.font,o=i.ascent,a=i.descent,s=i.bbox,u=(o||s.maxY)*this.scale-(a||s.minY)*this.scale;return n||(u-=Math.abs(a)||0),u/1e3*t},t.prototype.sizeOfFontAtHeight=function(t){var e=this.font,r=e.ascent,n=e.descent,i=e.bbox;return 1e3*t/((r||i.maxY)*this.scale-(n||i.minY)*this.scale)},t.prototype.embedIntoContext=function(t,e){return this.baseFontName=this.customName||S(this.fontName),this.embedFontDict(t,e)},t.prototype.embedFontDict=function(t,e){return l(this,void 0,void 0,(function(){var r,n,i;return h(this,(function(o){switch(o.label){case 0:return[4,this.embedCIDFontDict(t)];case 1:return r=o.sent(),n=this.embedUnicodeCmap(t),i=t.obj({Type:"Font",Subtype:"Type0",BaseFont:this.baseFontName,Encoding:"Identity-H",DescendantFonts:[r],ToUnicode:n}),e?(t.assign(e,i),[2,e]):[2,t.register(i)]}}))}))},t.prototype.isCFF=function(){return this.font.cff},t.prototype.embedCIDFontDict=function(t){return l(this,void 0,void 0,(function(){var e,r;return h(this,(function(n){switch(n.label){case 0:return[4,this.embedFontDescriptor(t)];case 1:return e=n.sent(),r=t.obj({Type:"Font",Subtype:this.isCFF()?"CIDFontType0":"CIDFontType2",CIDToGIDMap:"Identity",BaseFont:this.baseFontName,CIDSystemInfo:{Registry:wr.of("Adobe"),Ordering:wr.of("Identity"),Supplement:0},FontDescriptor:e,W:this.computeWidths()}),[2,t.register(r)]}}))}))},t.prototype.embedFontDescriptor=function(t){return l(this,void 0,void 0,(function(){var e,r,n,i,o,a,s,u,c,l,f,d,p,g,v;return h(this,(function(h){switch(h.label){case 0:return[4,this.embedFontStream(t)];case 1:return e=h.sent(),r=this.scale,n=this.font,i=n.italicAngle,o=n.ascent,a=n.descent,s=n.capHeight,u=n.xHeight,c=this.font.bbox,l=c.minX,f=c.minY,d=c.maxX,p=c.maxY,g=t.obj((v={Type:"FontDescriptor",FontName:this.baseFontName,Flags:(m=this.font,y=m["OS/2"]?m["OS/2"].sFamilyClass:0,b=function(t){var e=0,r=function(t){e|=1<<t-1};return t.fixedPitch&&r(1),t.serif&&r(2),t.symbolic&&r(3),t.script&&r(4),t.nonsymbolic&&r(6),t.italic&&r(7),t.allCap&&r(17),t.smallCap&&r(18),t.forceBold&&r(19),e}({fixedPitch:m.post.isFixedPitch,serif:1<=y&&y<=7,symbolic:!0,script:10===y,italic:m.head.macStyle.italic}),b),FontBBox:[l*r,f*r,d*r,p*r],ItalicAngle:i,Ascent:o*r,Descent:a*r,CapHeight:(s||o)*r,XHeight:(u||0)*r,StemV:0},v[this.isCFF()?"FontFile3":"FontFile2"]=e,v)),[2,t.register(g)]}var m,y,b}))}))},t.prototype.serializeFont=function(){return l(this,void 0,void 0,(function(){return h(this,(function(t){return[2,this.fontData]}))}))},t.prototype.embedFontStream=function(t){return l(this,void 0,void 0,(function(){var e,r,n;return h(this,(function(i){switch(i.label){case 0:return n=(r=t).flateStream,[4,this.serializeFont()];case 1:return e=n.apply(r,[i.sent(),{Subtype:this.isCFF()?"CIDFontType0C":void 0}]),[2,t.register(e)]}}))}))},t.prototype.embedUnicodeCmap=function(t){var e=function(t,e){for(var r=new Array(t.length),n=0,i=t.length;n<i;n++){var o=t[n],a=vr(mr(e(o))),s=vr.apply(void 0,o.codePoints.map(yr));r[n]=[a,s]}return function(t){return"/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange\n"+t.length+" beginbfchar\n"+t.map((function(t){return t[0]+" "+t[1]})).join("\n")+"\nendbfchar\nendcmap\nCMapName currentdict /CMap defineresource pop\nend\nend"}(r)}(this.glyphCache.access(),this.glyphId.bind(this)),r=t.flateStream(e);return t.register(r)},t.prototype.glyphId=function(t){return t?t.id:-1},t.prototype.computeWidths=function(){for(var t=this.glyphCache.access(),e=[],r=[],n=0,i=t.length;n<i;n++){var o=t[n],a=t[n-1],s=this.glyphId(o),u=this.glyphId(a);0===n?e.push(s):s-u!=1&&(e.push(r),e.push(s),r=[]),r.push(o.advanceWidth*this.scale)}return e.push(r),e},t}();const Ar=xr;var Cr=function(t){function e(e,r,n,i){var o=t.call(this,e,r,n,i)||this;return o.subset=o.font.createSubset(),o.glyphs=[],o.glyphCache=It.populatedBy((function(){return o.glyphs})),o.glyphIdMap=new Map,o}return u(e,t),e.for=function(t,r,n,i){return l(this,void 0,void 0,(function(){return h(this,(function(o){switch(o.label){case 0:return[4,t.create(r)];case 1:return[2,new e(o.sent(),r,n,i)]}}))}))},e.prototype.encodeText=function(t){for(var e=this.font.layout(t,this.fontFeatures).glyphs,r=new Array(e.length),n=0,i=e.length;n<i;n++){var o=e[n],a=this.subset.includeGlyph(o);this.glyphs[a-1]=o,this.glyphIdMap.set(o.id,a),r[n]=w(a,4)}return this.glyphCache.invalidate(),dr.of(r.join(""))},e.prototype.isCFF=function(){return this.subset.cff},e.prototype.glyphId=function(t){return t?this.glyphIdMap.get(t.id):-1},e.prototype.serializeFont=function(){var t=this;return new Promise((function(e,r){var n=[];t.subset.encodeStream().on("data",(function(t){return n.push(t)})).on("end",(function(){return e(function(t){for(var e=0,r=0,n=t.length;r<n;r++)e+=t[r].length;var i=new Uint8Array(e),o=0;for(r=0,n=t.length;r<n;r++){var a=t[r];i.set(a,o),o+=a.length}return i}(n))})).on("error",(function(t){return r(t)}))}))},e}(Ar);const kr=Cr;var Sr;!function(t){t.Source="Source",t.Data="Data",t.Alternative="Alternative",t.Supplement="Supplement",t.EncryptedPayload="EncryptedPayload",t.FormData="EncryptedPayload",t.Schema="Schema",t.Unspecified="Unspecified"}(Sr||(Sr={}));var Fr=function(){function t(t,e,r){void 0===r&&(r={}),this.fileData=t,this.fileName=e,this.options=r}return t.for=function(e,r,n){return void 0===n&&(n={}),new t(e,r,n)},t.prototype.embedIntoContext=function(t,e){return l(this,void 0,void 0,(function(){var r,n,i,o,a,s,u,c,l;return h(this,(function(h){return r=this.options,n=r.mimeType,i=r.description,o=r.creationDate,a=r.modificationDate,s=r.afRelationship,u=t.flateStream(this.fileData,{Type:"EmbeddedFile",Subtype:null!=n?n:void 0,Params:{Size:this.fileData.length,CreationDate:o?wr.fromDate(o):void 0,ModDate:a?wr.fromDate(a):void 0}}),c=t.register(u),l=t.obj({Type:"Filespec",F:wr.of(this.fileName),UF:dr.fromText(this.fileName),EF:{F:c},Desc:i?dr.fromText(i):void 0,AFRelationship:null!=s?s:void 0}),e?(t.assign(e,l),[2,e]):[2,t.register(l)]}))}))},t}();const Br=Fr;var Er,Tr=[65472,65473,65474,65475,65477,65478,65479,65480,65481,65482,65483,65484,65485,65486,65487];!function(t){t.DeviceGray="DeviceGray",t.DeviceRGB="DeviceRGB",t.DeviceCMYK="DeviceCMYK"}(Er||(Er={}));var Or={1:Er.DeviceGray,3:Er.DeviceRGB,4:Er.DeviceCMYK};const zr=function(){function t(t,e,r,n,i){this.imageData=t,this.bitsPerComponent=e,this.width=r,this.height=n,this.colorSpace=i}return t.for=function(e){return l(this,void 0,void 0,(function(){var r,n,i,o,a,s,u,c;return h(this,(function(l){if(65496!==(r=new DataView(e.buffer)).getUint16(0))throw new Error("SOI not found in JPEG");for(n=2;n<r.byteLength&&(i=r.getUint16(n),n+=2,!Tr.includes(i));)n+=r.getUint16(n);if(!Tr.includes(i))throw new Error("Invalid JPEG");if(n+=2,o=r.getUint8(n++),a=r.getUint16(n),n+=2,s=r.getUint16(n),n+=2,u=r.getUint8(n++),!(c=Or[u]))throw new Error("Unknown JPEG channel.");return[2,new t(e,o,s,a,c)]}))}))},t.prototype.embedIntoContext=function(t,e){return l(this,void 0,void 0,(function(){var r;return h(this,(function(n){return r=t.stream(this.imageData,{Type:"XObject",Subtype:"Image",BitsPerComponent:this.bitsPerComponent,Width:this.width,Height:this.height,ColorSpace:this.colorSpace,Filter:"DCTDecode",Decode:this.colorSpace===Er.DeviceCMYK?[1,0,1,0,1,0,1,0]:void 0}),e?(t.assign(e,r),[2,e]):[2,t.register(r)]}))}))},t}();var Rr,Pr,Dr,Nr={toRGBA8:function(t){var e=t.width,r=t.height;if(null==t.tabs.acTL)return[Nr.toRGBA8.decodeImage(t.data,e,r,t).buffer];var n=[];null==t.frames[0].data&&(t.frames[0].data=t.data);for(var i=e*r*4,o=new Uint8Array(i),a=new Uint8Array(i),s=new Uint8Array(i),u=0;u<t.frames.length;u++){var c=t.frames[u],l=c.rect.x,h=c.rect.y,f=c.rect.width,d=c.rect.height,p=Nr.toRGBA8.decodeImage(c.data,f,d,t);if(0!=u)for(var g=0;g<i;g++)s[g]=o[g];if(0==c.blend?Nr._copyTile(p,f,d,o,e,r,l,h,0):1==c.blend&&Nr._copyTile(p,f,d,o,e,r,l,h,1),n.push(o.buffer.slice(0)),0==c.dispose);else if(1==c.dispose)Nr._copyTile(a,f,d,o,e,r,l,h,0);else if(2==c.dispose)for(g=0;g<i;g++)o[g]=s[g]}return n}};Nr.toRGBA8.decodeImage=function(t,e,r,n){var i=e*r,o=Nr.decode._getBPP(n),a=Math.ceil(e*o/8),s=new Uint8Array(4*i),u=new Uint32Array(s.buffer),c=n.ctype,l=n.depth,h=Nr._bin.readUshort;if(Date.now(),6==c){var f=i<<2;if(8==l)for(var d=0;d<f;d+=4)s[d]=t[d],s[d+1]=t[d+1],s[d+2]=t[d+2],s[d+3]=t[d+3];if(16==l)for(d=0;d<f;d++)s[d]=t[d<<1]}else if(2==c){var p=n.tabs.tRNS;if(null==p){if(8==l)for(d=0;d<i;d++){var g=3*d;u[d]=255<<24|t[g+2]<<16|t[g+1]<<8|t[g]}if(16==l)for(d=0;d<i;d++)g=6*d,u[d]=255<<24|t[g+4]<<16|t[g+2]<<8|t[g]}else{var v=p[0],m=p[1],y=p[2];if(8==l)for(d=0;d<i;d++){var b=d<<2;g=3*d,u[d]=255<<24|t[g+2]<<16|t[g+1]<<8|t[g],t[g]==v&&t[g+1]==m&&t[g+2]==y&&(s[b+3]=0)}if(16==l)for(d=0;d<i;d++)b=d<<2,g=6*d,u[d]=255<<24|t[g+4]<<16|t[g+2]<<8|t[g],h(t,g)==v&&h(t,g+2)==m&&h(t,g+4)==y&&(s[b+3]=0)}}else if(3==c){var w=n.tabs.PLTE,x=n.tabs.tRNS,A=x?x.length:0;if(1==l)for(var C=0;C<r;C++){var k=C*a,S=C*e;for(d=0;d<e;d++){b=S+d<<2;var F=3*(B=t[k+(d>>3)]>>7-((7&d)<<0)&1);s[b]=w[F],s[b+1]=w[F+1],s[b+2]=w[F+2],s[b+3]=B<A?x[B]:255}}if(2==l)for(C=0;C<r;C++)for(k=C*a,S=C*e,d=0;d<e;d++)b=S+d<<2,F=3*(B=t[k+(d>>2)]>>6-((3&d)<<1)&3),s[b]=w[F],s[b+1]=w[F+1],s[b+2]=w[F+2],s[b+3]=B<A?x[B]:255;if(4==l)for(C=0;C<r;C++)for(k=C*a,S=C*e,d=0;d<e;d++)b=S+d<<2,F=3*(B=t[k+(d>>1)]>>4-((1&d)<<2)&15),s[b]=w[F],s[b+1]=w[F+1],s[b+2]=w[F+2],s[b+3]=B<A?x[B]:255;if(8==l)for(d=0;d<i;d++){var B;b=d<<2,F=3*(B=t[d]),s[b]=w[F],s[b+1]=w[F+1],s[b+2]=w[F+2],s[b+3]=B<A?x[B]:255}}else if(4==c){if(8==l)for(d=0;d<i;d++){b=d<<2;var E=t[T=d<<1];s[b]=E,s[b+1]=E,s[b+2]=E,s[b+3]=t[T+1]}if(16==l)for(d=0;d<i;d++){var T;b=d<<2,E=t[T=d<<2],s[b]=E,s[b+1]=E,s[b+2]=E,s[b+3]=t[T+2]}}else if(0==c)for(v=n.tabs.tRNS?n.tabs.tRNS:-1,C=0;C<r;C++){var O=C*a,z=C*e;if(1==l)for(var R=0;R<e;R++){var P=(E=255*(t[O+(R>>>3)]>>>7-(7&R)&1))==255*v?0:255;u[z+R]=P<<24|E<<16|E<<8|E}else if(2==l)for(R=0;R<e;R++)P=(E=85*(t[O+(R>>>2)]>>>6-((3&R)<<1)&3))==85*v?0:255,u[z+R]=P<<24|E<<16|E<<8|E;else if(4==l)for(R=0;R<e;R++)P=(E=17*(t[O+(R>>>1)]>>>4-((1&R)<<2)&15))==17*v?0:255,u[z+R]=P<<24|E<<16|E<<8|E;else if(8==l)for(R=0;R<e;R++)P=(E=t[O+R])==v?0:255,u[z+R]=P<<24|E<<16|E<<8|E;else if(16==l)for(R=0;R<e;R++)E=t[O+(R<<1)],P=h(t,O+(R<<d))==v?0:255,u[z+R]=P<<24|E<<16|E<<8|E}return s},Nr.decode=function(t){for(var e,r=new Uint8Array(t),n=8,i=Nr._bin,o=i.readUshort,a=i.readUint,s={tabs:{},frames:[]},u=new Uint8Array(r.length),c=0,l=0,h=[137,80,78,71,13,10,26,10],f=0;f<8;f++)if(r[f]!=h[f])throw"The input is not a PNG file!";for(;n<r.length;){var d=i.readUint(r,n);n+=4;var p=i.readASCII(r,n,4);if(n+=4,"IHDR"==p)Nr.decode._IHDR(r,n,s);else if("IDAT"==p){for(f=0;f<d;f++)u[c+f]=r[n+f];c+=d}else if("acTL"==p)s.tabs[p]={num_frames:a(r,n),num_plays:a(r,n+4)},e=new Uint8Array(r.length);else if("fcTL"==p){var g;0!=l&&((g=s.frames[s.frames.length-1]).data=Nr.decode._decompress(s,e.slice(0,l),g.rect.width,g.rect.height),l=0);var v={x:a(r,n+12),y:a(r,n+16),width:a(r,n+4),height:a(r,n+8)},m=o(r,n+22);m=o(r,n+20)/(0==m?100:m);var y={rect:v,delay:Math.round(1e3*m),dispose:r[n+24],blend:r[n+25]};s.frames.push(y)}else if("fdAT"==p){for(f=0;f<d-4;f++)e[l+f]=r[n+f+4];l+=d-4}else if("pHYs"==p)s.tabs[p]=[i.readUint(r,n),i.readUint(r,n+4),r[n+8]];else if("cHRM"==p)for(s.tabs[p]=[],f=0;f<8;f++)s.tabs[p].push(i.readUint(r,n+4*f));else if("tEXt"==p){null==s.tabs[p]&&(s.tabs[p]={});var b=i.nextZero(r,n),w=i.readASCII(r,n,b-n),x=i.readASCII(r,b+1,n+d-b-1);s.tabs[p][w]=x}else if("iTXt"==p){null==s.tabs[p]&&(s.tabs[p]={}),b=0;var A=n;b=i.nextZero(r,A),w=i.readASCII(r,A,b-A),r[A=b+1],r[A+1],A+=2,b=i.nextZero(r,A),i.readASCII(r,A,b-A),A=b+1,b=i.nextZero(r,A),i.readUTF8(r,A,b-A),A=b+1,x=i.readUTF8(r,A,d-(A-n)),s.tabs[p][w]=x}else if("PLTE"==p)s.tabs[p]=i.readBytes(r,n,d);else if("hIST"==p){var C=s.tabs.PLTE.length/3;for(s.tabs[p]=[],f=0;f<C;f++)s.tabs[p].push(o(r,n+2*f))}else if("tRNS"==p)3==s.ctype?s.tabs[p]=i.readBytes(r,n,d):0==s.ctype?s.tabs[p]=o(r,n):2==s.ctype&&(s.tabs[p]=[o(r,n),o(r,n+2),o(r,n+4)]);else if("gAMA"==p)s.tabs[p]=i.readUint(r,n)/1e5;else if("sRGB"==p)s.tabs[p]=r[n];else if("bKGD"==p)0==s.ctype||4==s.ctype?s.tabs[p]=[o(r,n)]:2==s.ctype||6==s.ctype?s.tabs[p]=[o(r,n),o(r,n+2),o(r,n+4)]:3==s.ctype&&(s.tabs[p]=r[n]);else if("IEND"==p)break;n+=d,i.readUint(r,n),n+=4}return 0!=l&&((g=s.frames[s.frames.length-1]).data=Nr.decode._decompress(s,e.slice(0,l),g.rect.width,g.rect.height),l=0),s.data=Nr.decode._decompress(s,u,s.width,s.height),delete s.compress,delete s.interlace,delete s.filter,s},Nr.decode._decompress=function(t,e,r,n){Date.now();var i=Nr.decode._getBPP(t),o=Math.ceil(r*i/8),a=new Uint8Array((o+1+t.interlace)*n);return e=Nr.decode._inflate(e,a),Date.now(),0==t.interlace?e=Nr.decode._filterZero(e,t,0,r,n):1==t.interlace&&(e=Nr.decode._readInterlace(e,t)),e},Nr.decode._inflate=function(t,e){return Nr.inflateRaw(new Uint8Array(t.buffer,2,t.length-6),e)},Nr.inflateRaw=((Dr={}).H={},Dr.H.N=function(t,e){var r,n,i=Uint8Array,o=0,a=0,s=0,u=0,c=0,l=0,h=0,f=0,d=0;if(3==t[0]&&0==t[1])return e||new i(0);var p=Dr.H,g=p.b,v=p.e,m=p.R,y=p.n,b=p.A,w=p.Z,x=p.m,A=null==e;for(A&&(e=new i(t.length>>>2<<3));0==o;)if(o=g(t,d,1),a=g(t,d+1,2),d+=3,0!=a){if(A&&(e=Dr.H.W(e,f+(1<<17))),1==a&&(r=x.J,n=x.h,l=511,h=31),2==a){s=v(t,d,5)+257,u=v(t,d+5,5)+1,c=v(t,d+10,4)+4,d+=14;for(var C=1,k=0;k<38;k+=2)x.Q[k]=0,x.Q[k+1]=0;for(k=0;k<c;k++){var S=v(t,d+3*k,3);x.Q[1+(x.X[k]<<1)]=S,S>C&&(C=S)}d+=3*c,y(x.Q,C),b(x.Q,C,x.u),r=x.w,n=x.d,d=m(x.u,(1<<C)-1,s+u,t,d,x.v);var F=p.V(x.v,0,s,x.C);l=(1<<F)-1;var B=p.V(x.v,s,u,x.D);h=(1<<B)-1,y(x.C,F),b(x.C,F,r),y(x.D,B),b(x.D,B,n)}for(;;){var E=r[w(t,d)&l];d+=15&E;var T=E>>>4;if(T>>>8==0)e[f++]=T;else{if(256==T)break;var O=f+T-254;if(T>264){var z=x.q[T-257];O=f+(z>>>3)+v(t,d,7&z),d+=7&z}var R=n[w(t,d)&h];d+=15&R;var P=R>>>4,D=x.c[P],N=(D>>>4)+g(t,d,15&D);for(d+=15&D;f<O;)e[f]=e[f++-N],e[f]=e[f++-N],e[f]=e[f++-N],e[f]=e[f++-N];f=O}}}else{0!=(7&d)&&(d+=8-(7&d));var I=4+(d>>>3),j=t[I-4]|t[I-3]<<8;A&&(e=Dr.H.W(e,f+j)),e.set(new i(t.buffer,t.byteOffset+I,j),f),d=I+j<<3,f+=j}return e.length==f?e:e.slice(0,f)},Dr.H.W=function(t,e){var r=t.length;if(e<=r)return t;var n=new Uint8Array(r<<1);return n.set(t,0),n},Dr.H.R=function(t,e,r,n,i,o){for(var a=Dr.H.e,s=Dr.H.Z,u=0;u<r;){var c=t[s(n,i)&e];i+=15&c;var l=c>>>4;if(l<=15)o[u]=l,u++;else{var h=0,f=0;16==l?(f=3+a(n,i,2),i+=2,h=o[u-1]):17==l?(f=3+a(n,i,3),i+=3):18==l&&(f=11+a(n,i,7),i+=7);for(var d=u+f;u<d;)o[u]=h,u++}}return i},Dr.H.V=function(t,e,r,n){for(var i=0,o=0,a=n.length>>>1;o<r;){var s=t[o+e];n[o<<1]=0,n[1+(o<<1)]=s,s>i&&(i=s),o++}for(;o<a;)n[o<<1]=0,n[1+(o<<1)]=0,o++;return i},Dr.H.n=function(t,e){for(var r,n,i,o,a=Dr.H.m,s=t.length,u=a.j,c=0;c<=e;c++)u[c]=0;for(c=1;c<s;c+=2)u[t[c]]++;var l=a.K;for(r=0,u[0]=0,n=1;n<=e;n++)r=r+u[n-1]<<1,l[n]=r;for(i=0;i<s;i+=2)0!=(o=t[i+1])&&(t[i]=l[o],l[o]++)},Dr.H.A=function(t,e,r){for(var n=t.length,i=Dr.H.m.r,o=0;o<n;o+=2)if(0!=t[o+1])for(var a=o>>1,s=t[o+1],u=a<<4|s,c=e-s,l=t[o]<<c,h=l+(1<<c);l!=h;)r[i[l]>>>15-e]=u,l++},Dr.H.l=function(t,e){for(var r=Dr.H.m.r,n=15-e,i=0;i<t.length;i+=2){var o=t[i]<<e-t[i+1];t[i]=r[o]>>>n}},Dr.H.M=function(t,e,r){r<<=7&e;var n=e>>>3;t[n]|=r,t[n+1]|=r>>>8},Dr.H.I=function(t,e,r){r<<=7&e;var n=e>>>3;t[n]|=r,t[n+1]|=r>>>8,t[n+2]|=r>>>16},Dr.H.e=function(t,e,r){return(t[e>>>3]|t[1+(e>>>3)]<<8)>>>(7&e)&(1<<r)-1},Dr.H.b=function(t,e,r){return(t[e>>>3]|t[1+(e>>>3)]<<8|t[2+(e>>>3)]<<16)>>>(7&e)&(1<<r)-1},Dr.H.Z=function(t,e){return(t[e>>>3]|t[1+(e>>>3)]<<8|t[2+(e>>>3)]<<16)>>>(7&e)},Dr.H.i=function(t,e){return(t[e>>>3]|t[1+(e>>>3)]<<8|t[2+(e>>>3)]<<16|t[3+(e>>>3)]<<24)>>>(7&e)},Dr.H.m=(Rr=Uint16Array,Pr=Uint32Array,{K:new Rr(16),j:new Rr(16),X:[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],S:[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,999,999,999],T:[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0],q:new Rr(32),p:[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,65535,65535],z:[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0],c:new Pr(32),J:new Rr(512),_:[],h:new Rr(32),$:[],w:new Rr(32768),C:[],v:[],d:new Rr(32768),D:[],u:new Rr(512),Q:[],r:new Rr(32768),s:new Pr(286),Y:new Pr(30),a:new Pr(19),t:new Pr(15e3),k:new Rr(65536),g:new Rr(32768)}),function(){for(var t=Dr.H.m,e=0;e<32768;e++){var r=e;r=(4278255360&(r=(4042322160&(r=(3435973836&(r=(2863311530&r)>>>1|(1431655765&r)<<1))>>>2|(858993459&r)<<2))>>>4|(252645135&r)<<4))>>>8|(16711935&r)<<8,t.r[e]=(r>>>16|r<<16)>>>17}function n(t,e,r){for(;0!=e--;)t.push(0,r)}for(e=0;e<32;e++)t.q[e]=t.S[e]<<3|t.T[e],t.c[e]=t.p[e]<<4|t.z[e];n(t._,144,8),n(t._,112,9),n(t._,24,7),n(t._,8,8),Dr.H.n(t._,9),Dr.H.A(t._,9,t.J),Dr.H.l(t._,9),n(t.$,32,5),Dr.H.n(t.$,5),Dr.H.A(t.$,5,t.h),Dr.H.l(t.$,5),n(t.Q,19,0),n(t.C,286,0),n(t.D,30,0),n(t.v,320,0)}(),Dr.H.N),Nr.decode._readInterlace=function(t,e){for(var r=e.width,n=e.height,i=Nr.decode._getBPP(e),o=i>>3,a=Math.ceil(r*i/8),s=new Uint8Array(n*a),u=0,c=[0,0,4,0,2,0,1],l=[0,4,0,2,0,1,0],h=[8,8,8,4,4,2,2],f=[8,8,4,4,2,2,1],d=0;d<7;){for(var p=h[d],g=f[d],v=0,m=0,y=c[d];y<n;)y+=p,m++;for(var b=l[d];b<r;)b+=g,v++;var w=Math.ceil(v*i/8);Nr.decode._filterZero(t,e,u,v,m);for(var x=0,A=c[d];A<n;){for(var C=l[d],k=u+x*w<<3;C<r;){var S;if(1==i&&(S=(S=t[k>>3])>>7-(7&k)&1,s[A*a+(C>>3)]|=S<<7-((7&C)<<0)),2==i&&(S=(S=t[k>>3])>>6-(7&k)&3,s[A*a+(C>>2)]|=S<<6-((3&C)<<1)),4==i&&(S=(S=t[k>>3])>>4-(7&k)&15,s[A*a+(C>>1)]|=S<<4-((1&C)<<2)),i>=8)for(var F=A*a+C*o,B=0;B<o;B++)s[F+B]=t[(k>>3)+B];k+=i,C+=g}x++,A+=p}v*m!=0&&(u+=m*(1+w)),d+=1}return s},Nr.decode._getBPP=function(t){return[1,null,3,1,2,null,4][t.ctype]*t.depth},Nr.decode._filterZero=function(t,e,r,n,i){var o=Nr.decode._getBPP(e),a=Math.ceil(n*o/8),s=Nr.decode._paeth;o=Math.ceil(o/8);var u=0,c=1,l=t[r],h=0;if(l>1&&(t[r]=[0,0,1][l-2]),3==l)for(h=o;h<a;h++)t[h+1]=t[h+1]+(t[h+1-o]>>>1)&255;for(var f=0;f<i;f++)if(h=0,0==(l=t[(c=(u=r+f*a)+f+1)-1]))for(;h<a;h++)t[u+h]=t[c+h];else if(1==l){for(;h<o;h++)t[u+h]=t[c+h];for(;h<a;h++)t[u+h]=t[c+h]+t[u+h-o]}else if(2==l)for(;h<a;h++)t[u+h]=t[c+h]+t[u+h-a];else if(3==l){for(;h<o;h++)t[u+h]=t[c+h]+(t[u+h-a]>>>1);for(;h<a;h++)t[u+h]=t[c+h]+(t[u+h-a]+t[u+h-o]>>>1)}else{for(;h<o;h++)t[u+h]=t[c+h]+s(0,t[u+h-a],0);for(;h<a;h++)t[u+h]=t[c+h]+s(t[u+h-o],t[u+h-a],t[u+h-o-a])}return t},Nr.decode._paeth=function(t,e,r){var n=t+e-r,i=n-t,o=n-e,a=n-r;return i*i<=o*o&&i*i<=a*a?t:o*o<=a*a?e:r},Nr.decode._IHDR=function(t,e,r){var n=Nr._bin;r.width=n.readUint(t,e),e+=4,r.height=n.readUint(t,e),e+=4,r.depth=t[e],e++,r.ctype=t[e],e++,r.compress=t[e],e++,r.filter=t[e],e++,r.interlace=t[e],e++},Nr._bin={nextZero:function(t,e){for(;0!=t[e];)e++;return e},readUshort:function(t,e){return t[e]<<8|t[e+1]},writeUshort:function(t,e,r){t[e]=r>>8&255,t[e+1]=255&r},readUint:function(t,e){return 16777216*t[e]+(t[e+1]<<16|t[e+2]<<8|t[e+3])},writeUint:function(t,e,r){t[e]=r>>24&255,t[e+1]=r>>16&255,t[e+2]=r>>8&255,t[e+3]=255&r},readASCII:function(t,e,r){for(var n="",i=0;i<r;i++)n+=String.fromCharCode(t[e+i]);return n},writeASCII:function(t,e,r){for(var n=0;n<r.length;n++)t[e+n]=r.charCodeAt(n)},readBytes:function(t,e,r){for(var n=[],i=0;i<r;i++)n.push(t[e+i]);return n},pad:function(t){return t.length<2?"0"+t:t},readUTF8:function(t,e,r){for(var n,i="",o=0;o<r;o++)i+="%"+Nr._bin.pad(t[e+o].toString(16));try{n=decodeURIComponent(i)}catch(n){return Nr._bin.readASCII(t,e,r)}return n}},Nr._copyTile=function(t,e,r,n,i,o,a,s,u){for(var c=Math.min(e,i),l=Math.min(r,o),h=0,f=0,d=0;d<l;d++)for(var p=0;p<c;p++)if(a>=0&&s>=0?(h=d*e+p<<2,f=(s+d)*i+a+p<<2):(h=(-s+d)*e-a+p<<2,f=d*i+p<<2),0==u)n[f]=t[h],n[f+1]=t[h+1],n[f+2]=t[h+2],n[f+3]=t[h+3];else if(1==u){var g=t[h+3]*(1/255),v=t[h]*g,m=t[h+1]*g,y=t[h+2]*g,b=n[f+3]*(1/255),w=n[f]*b,x=n[f+1]*b,A=n[f+2]*b,C=1-g,k=g+b*C,S=0==k?0:1/k;n[f+3]=255*k,n[f+0]=(v+w*C)*S,n[f+1]=(m+x*C)*S,n[f+2]=(y+A*C)*S}else if(2==u)g=t[h+3],v=t[h],m=t[h+1],y=t[h+2],b=n[f+3],w=n[f],x=n[f+1],A=n[f+2],g==b&&v==w&&m==x&&y==A?(n[f]=0,n[f+1]=0,n[f+2]=0,n[f+3]=0):(n[f]=v,n[f+1]=m,n[f+2]=y,n[f+3]=g);else if(3==u){if(g=t[h+3],v=t[h],m=t[h+1],y=t[h+2],b=n[f+3],w=n[f],x=n[f+1],A=n[f+2],g==b&&v==w&&m==x&&y==A)continue;if(g<220&&b>20)return!1}return!0},Nr.encode=function(t,e,r,n,i,o,a){null==n&&(n=0),null==a&&(a=!1);var s=Nr.encode.compress(t,e,r,n,[!1,!1,!1,0,a]);return Nr.encode.compressPNG(s,-1),Nr.encode._main(s,e,r,i,o)},Nr.encodeLL=function(t,e,r,n,i,o,a,s){for(var u={ctype:0+(1==n?0:2)+(0==i?0:4),depth:o,frames:[]},c=(Date.now(),(n+i)*o),l=c*e,h=0;h<t.length;h++)u.frames.push({rect:{x:0,y:0,width:e,height:r},img:new Uint8Array(t[h]),blend:0,dispose:1,bpp:Math.ceil(c/8),bpl:Math.ceil(l/8)});return Nr.encode.compressPNG(u,0,!0),Nr.encode._main(u,e,r,a,s)},Nr.encode._main=function(t,e,r,n,i){null==i&&(i={});var o=Nr.crc.crc,a=Nr._bin.writeUint,s=Nr._bin.writeUshort,u=Nr._bin.writeASCII,c=8,l=t.frames.length>1,h=!1,f=33+(l?20:0);if(null!=i.sRGB&&(f+=13),null!=i.pHYs&&(f+=21),3==t.ctype){for(var d=t.plte.length,p=0;p<d;p++)t.plte[p]>>>24!=255&&(h=!0);f+=8+3*d+4+(h?8+1*d+4:0)}for(var g=0;g<t.frames.length;g++)l&&(f+=38),f+=(k=t.frames[g]).cimg.length+12,0!=g&&(f+=4);f+=12;var v=new Uint8Array(f),m=[137,80,78,71,13,10,26,10];for(p=0;p<8;p++)v[p]=m[p];if(a(v,c,13),u(v,c+=4,"IHDR"),a(v,c+=4,e),a(v,c+=4,r),v[c+=4]=t.depth,v[++c]=t.ctype,v[++c]=0,v[++c]=0,v[++c]=0,a(v,++c,o(v,c-17,17)),c+=4,null!=i.sRGB&&(a(v,c,1),u(v,c+=4,"sRGB"),v[c+=4]=i.sRGB,a(v,++c,o(v,c-5,5)),c+=4),null!=i.pHYs&&(a(v,c,9),u(v,c+=4,"pHYs"),a(v,c+=4,i.pHYs[0]),a(v,c+=4,i.pHYs[1]),v[c+=4]=i.pHYs[2],a(v,++c,o(v,c-13,13)),c+=4),l&&(a(v,c,8),u(v,c+=4,"acTL"),a(v,c+=4,t.frames.length),a(v,c+=4,null!=i.loop?i.loop:0),a(v,c+=4,o(v,c-12,12)),c+=4),3==t.ctype){for(a(v,c,3*(d=t.plte.length)),u(v,c+=4,"PLTE"),c+=4,p=0;p<d;p++){var y=3*p,b=t.plte[p],w=255&b,x=b>>>8&255,A=b>>>16&255;v[c+y+0]=w,v[c+y+1]=x,v[c+y+2]=A}if(a(v,c+=3*d,o(v,c-3*d-4,3*d+4)),c+=4,h){for(a(v,c,d),u(v,c+=4,"tRNS"),c+=4,p=0;p<d;p++)v[c+p]=t.plte[p]>>>24&255;a(v,c+=d,o(v,c-d-4,d+4)),c+=4}}var C=0;for(g=0;g<t.frames.length;g++){var k=t.frames[g];l&&(a(v,c,26),u(v,c+=4,"fcTL"),a(v,c+=4,C++),a(v,c+=4,k.rect.width),a(v,c+=4,k.rect.height),a(v,c+=4,k.rect.x),a(v,c+=4,k.rect.y),s(v,c+=4,n[g]),s(v,c+=2,1e3),v[c+=2]=k.dispose,v[++c]=k.blend,a(v,++c,o(v,c-30,30)),c+=4);var S=k.cimg;a(v,c,(d=S.length)+(0==g?0:4));var F=c+=4;u(v,c,0==g?"IDAT":"fdAT"),c+=4,0!=g&&(a(v,c,C++),c+=4),v.set(S,c),a(v,c+=d,o(v,F,c-F)),c+=4}return a(v,c,0),u(v,c+=4,"IEND"),a(v,c+=4,o(v,c-4,4)),c+=4,v.buffer},Nr.encode.compressPNG=function(t,e,r){for(var n=0;n<t.frames.length;n++){var i=t.frames[n],o=(i.rect.width,i.rect.height),a=new Uint8Array(o*i.bpl+o);i.cimg=Nr.encode._filterZero(i.img,o,i.bpp,i.bpl,a,e,r)}},Nr.encode.compress=function(t,e,r,n,i){for(var o=i[0],a=i[1],s=i[2],u=i[3],c=i[4],l=6,h=8,f=255,d=0;d<t.length;d++)for(var p=new Uint8Array(t[d]),g=p.length,v=0;v<g;v+=4)f&=p[v+3];var m=255!=f,y=Nr.encode.framize(t,e,r,o,a,s),b={},w=[],x=[];if(0!=n){var A=[];for(v=0;v<y.length;v++)A.push(y[v].img.buffer);var C=Nr.encode.concatRGBA(A),k=Nr.quantize(C,n),S=0,F=new Uint8Array(k.abuf);for(v=0;v<y.length;v++){var B=(K=y[v].img).length;for(x.push(new Uint8Array(k.inds.buffer,S>>2,B>>2)),d=0;d<B;d+=4)K[d]=F[S+d],K[d+1]=F[S+d+1],K[d+2]=F[S+d+2],K[d+3]=F[S+d+3];S+=B}for(v=0;v<k.plte.length;v++)w.push(k.plte[v].est.rgba)}else for(d=0;d<y.length;d++){var E=y[d],T=new Uint32Array(E.img.buffer),O=E.rect.width,z=(g=T.length,new Uint8Array(g));for(x.push(z),v=0;v<g;v++){var R=T[v];if(0!=v&&R==T[v-1])z[v]=z[v-1];else if(v>O&&R==T[v-O])z[v]=z[v-O];else{var P=b[R];if(null==P&&(b[R]=P=w.length,w.push(R),w.length>=300))break;z[v]=P}}}var D=w.length;for(D<=256&&0==c&&(h=D<=2?1:D<=4?2:D<=16?4:8,h=Math.max(h,u)),d=0;d<y.length;d++){(E=y[d]).rect.x,E.rect.y,O=E.rect.width;var N=E.rect.height,I=E.img,j=(new Uint32Array(I.buffer),4*O),U=4;if(D<=256&&0==c){j=Math.ceil(h*O/8);for(var M=new Uint8Array(j*N),W=x[d],V=0;V<N;V++){v=V*j;var q=V*O;if(8==h)for(var L=0;L<O;L++)M[v+L]=W[q+L];else if(4==h)for(L=0;L<O;L++)M[v+(L>>1)]|=W[q+L]<<4-4*(1&L);else if(2==h)for(L=0;L<O;L++)M[v+(L>>2)]|=W[q+L]<<6-2*(3&L);else if(1==h)for(L=0;L<O;L++)M[v+(L>>3)]|=W[q+L]<<7-1*(7&L)}I=M,l=3,U=1}else if(0==m&&1==y.length){M=new Uint8Array(O*N*3);var G=O*N;for(v=0;v<G;v++){var K,H=4*v;M[K=3*v]=I[H],M[K+1]=I[H+1],M[K+2]=I[H+2]}I=M,l=2,U=3,j=3*O}E.img=I,E.bpl=j,E.bpp=U}return{ctype:l,depth:h,plte:w,frames:y}},Nr.encode.framize=function(t,e,r,n,i,o){for(var a=[],s=0;s<t.length;s++){var u,c=new Uint8Array(t[s]),l=new Uint32Array(c.buffer),h=0,f=0,d=e,p=r,g=n?1:0;if(0!=s){for(var v=o||n||1==s||0!=a[s-2].dispose?1:2,m=0,y=1e9,b=0;b<v;b++){for(var w=new Uint8Array(t[s-1-b]),x=new Uint32Array(t[s-1-b]),A=e,C=r,k=-1,S=-1,F=0;F<r;F++)for(var B=0;B<e;B++)l[D=F*e+B]!=x[D]&&(B<A&&(A=B),B>k&&(k=B),F<C&&(C=F),F>S&&(S=F));-1==k&&(A=C=k=S=0),i&&(1==(1&A)&&A--,1==(1&C)&&C--);var E=(k-A+1)*(S-C+1);E<y&&(y=E,m=b,h=A,f=C,d=k-A+1,p=S-C+1)}w=new Uint8Array(t[s-1-m]),1==m&&(a[s-1].dispose=2),u=new Uint8Array(d*p*4),Nr._copyTile(w,e,r,u,d,p,-h,-f,0),1==(g=Nr._copyTile(c,e,r,u,d,p,-h,-f,3)?1:0)?Nr.encode._prepareDiff(c,e,r,u,{x:h,y:f,width:d,height:p}):Nr._copyTile(c,e,r,u,d,p,-h,-f,0)}else u=c.slice(0);a.push({rect:{x:h,y:f,width:d,height:p},img:u,blend:g,dispose:0})}if(n)for(s=0;s<a.length;s++)if(1!=(N=a[s]).blend){var T=N.rect,O=a[s-1].rect,z=Math.min(T.x,O.x),R=Math.min(T.y,O.y),P={x:z,y:R,width:Math.max(T.x+T.width,O.x+O.width)-z,height:Math.max(T.y+T.height,O.y+O.height)-R};a[s-1].dispose=1,s-1!=0&&Nr.encode._updateFrame(t,e,r,a,s-1,P,i),Nr.encode._updateFrame(t,e,r,a,s,P,i)}if(1!=t.length)for(var D=0;D<a.length;D++){var N;(N=a[D]).rect.width,N.rect.height}return a},Nr.encode._updateFrame=function(t,e,r,n,i,o,a){for(var s=Uint8Array,u=Uint32Array,c=new s(t[i-1]),l=new u(t[i-1]),h=i+1<t.length?new s(t[i+1]):null,f=new s(t[i]),d=new u(f.buffer),p=e,g=r,v=-1,m=-1,y=0;y<o.height;y++)for(var b=0;b<o.width;b++){var w=o.x+b,x=o.y+y,A=x*e+w,C=d[A];0==C||0==n[i-1].dispose&&l[A]==C&&(null==h||0!=h[4*A+3])||(w<p&&(p=w),w>v&&(v=w),x<g&&(g=x),x>m&&(m=x))}-1==v&&(p=g=v=m=0),a&&(1==(1&p)&&p--,1==(1&g)&&g--),o={x:p,y:g,width:v-p+1,height:m-g+1};var k=n[i];k.rect=o,k.blend=1,k.img=new Uint8Array(o.width*o.height*4),0==n[i-1].dispose?(Nr._copyTile(c,e,r,k.img,o.width,o.height,-o.x,-o.y,0),Nr.encode._prepareDiff(f,e,r,k.img,o)):Nr._copyTile(f,e,r,k.img,o.width,o.height,-o.x,-o.y,0)},Nr.encode._prepareDiff=function(t,e,r,n,i){Nr._copyTile(t,e,r,n,i.width,i.height,-i.x,-i.y,2)},Nr.encode._filterZero=function(t,e,r,n,i,o,a){var s,u=[],c=[0,1,2,3,4];-1!=o?c=[o]:(e*n>5e5||1==r)&&(c=[0]),a&&(s={level:0});for(var l=a&&null!=UZIP?UZIP:it(),h=0;h<c.length;h++){for(var f=0;f<e;f++)Nr.encode._filterLine(i,t,f,n,r,c[h]);u.push(l.deflate(i,s))}var d,p=1e9;for(h=0;h<u.length;h++)u[h].length<p&&(d=h,p=u[h].length);return u[d]},Nr.encode._filterLine=function(t,e,r,n,i,o){var a=r*n,s=a+r,u=Nr.decode._paeth;if(t[s]=o,s++,0==o)if(n<500)for(var c=0;c<n;c++)t[s+c]=e[a+c];else t.set(new Uint8Array(e.buffer,a,n),s);else if(1==o){for(c=0;c<i;c++)t[s+c]=e[a+c];for(c=i;c<n;c++)t[s+c]=e[a+c]-e[a+c-i]+256&255}else if(0==r){for(c=0;c<i;c++)t[s+c]=e[a+c];if(2==o)for(c=i;c<n;c++)t[s+c]=e[a+c];if(3==o)for(c=i;c<n;c++)t[s+c]=e[a+c]-(e[a+c-i]>>1)+256&255;if(4==o)for(c=i;c<n;c++)t[s+c]=e[a+c]-u(e[a+c-i],0,0)+256&255}else{if(2==o)for(c=0;c<n;c++)t[s+c]=e[a+c]+256-e[a+c-n]&255;if(3==o){for(c=0;c<i;c++)t[s+c]=e[a+c]+256-(e[a+c-n]>>1)&255;for(c=i;c<n;c++)t[s+c]=e[a+c]+256-(e[a+c-n]+e[a+c-i]>>1)&255}if(4==o){for(c=0;c<i;c++)t[s+c]=e[a+c]+256-u(0,e[a+c-n],0)&255;for(c=i;c<n;c++)t[s+c]=e[a+c]+256-u(e[a+c-i],e[a+c-n],e[a+c-i-n])&255}}},Nr.crc={table:function(){for(var t=new Uint32Array(256),e=0;e<256;e++){for(var r=e,n=0;n<8;n++)1&r?r=3988292384^r>>>1:r>>>=1;t[e]=r}return t}(),update:function(t,e,r,n){for(var i=0;i<n;i++)t=Nr.crc.table[255&(t^e[r+i])]^t>>>8;return t},crc:function(t,e,r){return 4294967295^Nr.crc.update(4294967295,t,e,r)}},Nr.quantize=function(t,e){for(var r=new Uint8Array(t),n=r.slice(0),i=new Uint32Array(n.buffer),o=Nr.quantize.getKDtree(n,e),a=o[0],s=o[1],u=(Nr.quantize.planeDst,r),c=i,l=u.length,h=new Uint8Array(r.length>>2),f=0;f<l;f+=4){var d=u[f]*(1/255),p=u[f+1]*(1/255),g=u[f+2]*(1/255),v=u[f+3]*(1/255),m=Nr.quantize.getNearest(a,d,p,g,v);h[f>>2]=m.ind,c[f>>2]=m.est.rgba}return{abuf:n.buffer,inds:h,plte:s}},Nr.quantize.getKDtree=function(t,e,r){null==r&&(r=1e-4);var n=new Uint32Array(t.buffer),i={i0:0,i1:t.length,bst:null,est:null,tdst:0,left:null,right:null};i.bst=Nr.quantize.stats(t,i.i0,i.i1),i.est=Nr.quantize.estats(i.bst);for(var o=[i];o.length<e;){for(var a=0,s=0,u=0;u<o.length;u++)o[u].est.L>a&&(a=o[u].est.L,s=u);if(a<r)break;var c=o[s],l=Nr.quantize.splitPixels(t,n,c.i0,c.i1,c.est.e,c.est.eMq255);if(c.i0>=l||c.i1<=l)c.est.L=0;else{var h={i0:c.i0,i1:l,bst:null,est:null,tdst:0,left:null,right:null};h.bst=Nr.quantize.stats(t,h.i0,h.i1),h.est=Nr.quantize.estats(h.bst);var f={i0:l,i1:c.i1,bst:null,est:null,tdst:0,left:null,right:null};for(f.bst={R:[],m:[],N:c.bst.N-h.bst.N},u=0;u<16;u++)f.bst.R[u]=c.bst.R[u]-h.bst.R[u];for(u=0;u<4;u++)f.bst.m[u]=c.bst.m[u]-h.bst.m[u];f.est=Nr.quantize.estats(f.bst),c.left=h,c.right=f,o[s]=h,o.push(f)}}for(o.sort((function(t,e){return e.bst.N-t.bst.N})),u=0;u<o.length;u++)o[u].ind=u;return[i,o]},Nr.quantize.getNearest=function(t,e,r,n,i){if(null==t.left)return t.tdst=Nr.quantize.dist(t.est.q,e,r,n,i),t;var o=Nr.quantize.planeDst(t.est,e,r,n,i),a=t.left,s=t.right;o>0&&(a=t.right,s=t.left);var u=Nr.quantize.getNearest(a,e,r,n,i);if(u.tdst<=o*o)return u;var c=Nr.quantize.getNearest(s,e,r,n,i);return c.tdst<u.tdst?c:u},Nr.quantize.planeDst=function(t,e,r,n,i){var o=t.e;return o[0]*e+o[1]*r+o[2]*n+o[3]*i-t.eMq},Nr.quantize.dist=function(t,e,r,n,i){var o=e-t[0],a=r-t[1],s=n-t[2],u=i-t[3];return o*o+a*a+s*s+u*u},Nr.quantize.splitPixels=function(t,e,r,n,i,o){var a=Nr.quantize.vecDot;for(n-=4;r<n;){for(;a(t,r,i)<=o;)r+=4;for(;a(t,n,i)>o;)n-=4;if(r>=n)break;var s=e[r>>2];e[r>>2]=e[n>>2],e[n>>2]=s,r+=4,n-=4}for(;a(t,r,i)>o;)r-=4;return r+4},Nr.quantize.vecDot=function(t,e,r){return t[e]*r[0]+t[e+1]*r[1]+t[e+2]*r[2]+t[e+3]*r[3]},Nr.quantize.stats=function(t,e,r){for(var n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],i=[0,0,0,0],o=r-e>>2,a=e;a<r;a+=4){var s=t[a]*(1/255),u=t[a+1]*(1/255),c=t[a+2]*(1/255),l=t[a+3]*(1/255);i[0]+=s,i[1]+=u,i[2]+=c,i[3]+=l,n[0]+=s*s,n[1]+=s*u,n[2]+=s*c,n[3]+=s*l,n[5]+=u*u,n[6]+=u*c,n[7]+=u*l,n[10]+=c*c,n[11]+=c*l,n[15]+=l*l}return n[4]=n[1],n[8]=n[2],n[9]=n[6],n[12]=n[3],n[13]=n[7],n[14]=n[11],{R:n,m:i,N:o}},Nr.quantize.estats=function(t){var e=t.R,r=t.m,n=t.N,i=r[0],o=r[1],a=r[2],s=r[3],u=0==n?0:1/n,c=[e[0]-i*i*u,e[1]-i*o*u,e[2]-i*a*u,e[3]-i*s*u,e[4]-o*i*u,e[5]-o*o*u,e[6]-o*a*u,e[7]-o*s*u,e[8]-a*i*u,e[9]-a*o*u,e[10]-a*a*u,e[11]-a*s*u,e[12]-s*i*u,e[13]-s*o*u,e[14]-s*a*u,e[15]-s*s*u],l=c,h=Nr.M4,f=[.5,.5,.5,.5],d=0,p=0;if(0!=n)for(var g=0;g<10&&(f=h.multVec(l,f),p=Math.sqrt(h.dot(f,f)),f=h.sml(1/p,f),!(Math.abs(p-d)<1e-9));g++)d=p;var v=[i*u,o*u,a*u,s*u];return{Cov:c,q:v,e:f,L:d,eMq255:h.dot(h.sml(255,v),f),eMq:h.dot(f,v),rgba:(Math.round(255*v[3])<<24|Math.round(255*v[2])<<16|Math.round(255*v[1])<<8|Math.round(255*v[0])<<0)>>>0}},Nr.M4={multVec:function(t,e){return[t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3],t[4]*e[0]+t[5]*e[1]+t[6]*e[2]+t[7]*e[3],t[8]*e[0]+t[9]*e[1]+t[10]*e[2]+t[11]*e[3],t[12]*e[0]+t[13]*e[1]+t[14]*e[2]+t[15]*e[3]]},dot:function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},sml:function(t,e){return[t*e[0],t*e[1],t*e[2],t*e[3]]}},Nr.encode.concatRGBA=function(t){for(var e=0,r=0;r<t.length;r++)e+=t[r].byteLength;var n=new Uint8Array(e),i=0;for(r=0;r<t.length;r++){for(var o=new Uint8Array(t[r]),a=o.length,s=0;s<a;s+=4){var u=o[s],c=o[s+1],l=o[s+2],h=o[s+3];0==h&&(u=c=l=0),n[i+s]=u,n[i+s+1]=c,n[i+s+2]=l,n[i+s+3]=h}i+=a}return n.buffer};const Ir=Nr;var jr;!function(t){t.Greyscale="Greyscale",t.Truecolour="Truecolour",t.IndexedColour="IndexedColour",t.GreyscaleWithAlpha="GreyscaleWithAlpha",t.TruecolourWithAlpha="TruecolourWithAlpha"}(jr||(jr={}));var Ur=function(){function t(t){var e=Ir.decode(t),r=Ir.toRGBA8(e);if(r.length>1)throw new Error("Animated PNGs are not supported");var n=function(t){for(var e=Math.floor(t.length/4),r=new Uint8Array(3*e),n=new Uint8Array(1*e),i=0,o=0,a=0;i<t.length;)r[o++]=t[i++],r[o++]=t[i++],r[o++]=t[i++],n[a++]=t[i++];return{rgbChannel:r,alphaChannel:n}}(new Uint8Array(r[0])),i=n.rgbChannel,o=n.alphaChannel;this.rgbChannel=i,o.some((function(t){return t<255}))&&(this.alphaChannel=o),this.type=function(t){if(0===t)return jr.Greyscale;if(2===t)return jr.Truecolour;if(3===t)return jr.IndexedColour;if(4===t)return jr.GreyscaleWithAlpha;if(6===t)return jr.TruecolourWithAlpha;throw new Error("Unknown color type: "+t)}(e.ctype),this.width=e.width,this.height=e.height,this.bitsPerComponent=8}return t.load=function(e){return new t(e)},t}();const Mr=function(){function t(t){this.image=t,this.bitsPerComponent=t.bitsPerComponent,this.width=t.width,this.height=t.height,this.colorSpace="DeviceRGB"}return t.for=function(e){return l(this,void 0,void 0,(function(){return h(this,(function(r){return[2,new t(Ur.load(e))]}))}))},t.prototype.embedIntoContext=function(t,e){return l(this,void 0,void 0,(function(){var r,n;return h(this,(function(i){return r=this.embedAlphaChannel(t),n=t.flateStream(this.image.rgbChannel,{Type:"XObject",Subtype:"Image",BitsPerComponent:this.image.bitsPerComponent,Width:this.image.width,Height:this.image.height,ColorSpace:this.colorSpace,SMask:r}),e?(t.assign(e,n),[2,e]):[2,t.register(n)]}))}))},t.prototype.embedAlphaChannel=function(t){if(this.image.alphaChannel){var e=t.flateStream(this.image.alphaChannel,{Type:"XObject",Subtype:"Image",Height:this.image.height,Width:this.image.width,BitsPerComponent:this.image.bitsPerComponent,ColorSpace:"DeviceGray",Decode:[0,1]});return t.register(e)}},t}(),Wr=function(){function t(t,e,r){this.bytes=t,this.start=e||0,this.pos=this.start,this.end=e&&r?e+r:this.bytes.length}return Object.defineProperty(t.prototype,"length",{get:function(){return this.end-this.start},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isEmpty",{get:function(){return 0===this.length},enumerable:!1,configurable:!0}),t.prototype.getByte=function(){return this.pos>=this.end?-1:this.bytes[this.pos++]},t.prototype.getUint16=function(){var t=this.getByte(),e=this.getByte();return-1===t||-1===e?-1:(t<<8)+e},t.prototype.getInt32=function(){return(this.getByte()<<24)+(this.getByte()<<16)+(this.getByte()<<8)+this.getByte()},t.prototype.getBytes=function(t,e){void 0===e&&(e=!1);var r=this.bytes,n=this.pos,i=this.end;if(t){var o=n+t;return o>i&&(o=i),this.pos=o,a=r.subarray(n,o),e?new Uint8ClampedArray(a):a}var a=r.subarray(n,i);return e?new Uint8ClampedArray(a):a},t.prototype.peekByte=function(){var t=this.getByte();return this.pos--,t},t.prototype.peekBytes=function(t,e){void 0===e&&(e=!1);var r=this.getBytes(t,e);return this.pos-=r.length,r},t.prototype.skip=function(t){t||(t=1),this.pos+=t},t.prototype.reset=function(){this.pos=this.start},t.prototype.moveStart=function(){this.start=this.pos},t.prototype.makeSubStream=function(e,r){return new t(this.bytes,e,r)},t.prototype.decode=function(){return this.bytes},t}();var Vr=new Uint8Array(0);const qr=function(){function t(t){if(this.pos=0,this.bufferLength=0,this.eof=!1,this.buffer=Vr,this.minBufferLength=512,t)for(;this.minBufferLength<t;)this.minBufferLength*=2}return Object.defineProperty(t.prototype,"isEmpty",{get:function(){for(;!this.eof&&0===this.bufferLength;)this.readBlock();return 0===this.bufferLength},enumerable:!1,configurable:!0}),t.prototype.getByte=function(){for(var t=this.pos;this.bufferLength<=t;){if(this.eof)return-1;this.readBlock()}return this.buffer[this.pos++]},t.prototype.getUint16=function(){var t=this.getByte(),e=this.getByte();return-1===t||-1===e?-1:(t<<8)+e},t.prototype.getInt32=function(){return(this.getByte()<<24)+(this.getByte()<<16)+(this.getByte()<<8)+this.getByte()},t.prototype.getBytes=function(t,e){var r;void 0===e&&(e=!1);var n=this.pos;if(t){for(this.ensureBuffer(n+t),r=n+t;!this.eof&&this.bufferLength<r;)this.readBlock();var i=this.bufferLength;r>i&&(r=i)}else{for(;!this.eof;)this.readBlock();r=this.bufferLength}this.pos=r;var o=this.buffer.subarray(n,r);return!e||o instanceof Uint8ClampedArray?o:new Uint8ClampedArray(o)},t.prototype.peekByte=function(){var t=this.getByte();return this.pos--,t},t.prototype.peekBytes=function(t,e){void 0===e&&(e=!1);var r=this.getBytes(t,e);return this.pos-=r.length,r},t.prototype.skip=function(t){t||(t=1),this.pos+=t},t.prototype.reset=function(){this.pos=0},t.prototype.makeSubStream=function(t,e){for(var r=t+e;this.bufferLength<=r&&!this.eof;)this.readBlock();return new Wr(this.buffer,t,e)},t.prototype.decode=function(){for(;!this.eof;)this.readBlock();return this.buffer.subarray(0,this.bufferLength)},t.prototype.readBlock=function(){throw new Mt(this.constructor.name,"readBlock")},t.prototype.ensureBuffer=function(t){var e=this.buffer;if(t<=e.byteLength)return e;for(var r=this.minBufferLength;r<t;)r*=2;var n=new Uint8Array(r);return n.set(e),this.buffer=n},t}();var Lr=function(t){return 32===t||9===t||13===t||10===t},Gr=function(t){function e(e,r){var n=t.call(this,r)||this;return n.stream=e,n.input=new Uint8Array(5),r&&(r*=.8),n}return u(e,t),e.prototype.readBlock=function(){for(var t=this.stream,e=t.getByte();Lr(e);)e=t.getByte();if(-1!==e&&126!==e){var r,n,i=this.bufferLength;if(122===e){for(r=this.ensureBuffer(i+4),n=0;n<4;++n)r[i+n]=0;this.bufferLength+=4}else{var o=this.input;for(o[0]=e,n=1;n<5;++n){for(e=t.getByte();Lr(e);)e=t.getByte();if(o[n]=e,-1===e||126===e)break}if(r=this.ensureBuffer(i+n-1),this.bufferLength+=n-1,n<5){for(;n<5;++n)o[n]=117;this.eof=!0}var a=0;for(n=0;n<5;++n)a=85*a+(o[n]-33);for(n=3;n>=0;--n)r[i+n]=255&a,a>>=8}}else this.eof=!0},e}(qr);const Kr=Gr;var Hr=function(t){function e(e,r){var n=t.call(this,r)||this;return n.stream=e,n.firstDigit=-1,r&&(r*=.5),n}return u(e,t),e.prototype.readBlock=function(){var t=this.stream.getBytes(8e3);if(t.length){for(var e=t.length+1>>1,r=this.ensureBuffer(this.bufferLength+e),n=this.bufferLength,i=this.firstDigit,o=0,a=t.length;o<a;o++){var s=t[o],u=void 0;if(s>=48&&s<=57)u=15&s;else{if(!(s>=65&&s<=70||s>=97&&s<=102)){if(62===s){this.eof=!0;break}continue}u=9+(15&s)}i<0?i=u:(r[n++]=i<<4|u,i=-1)}i>=0&&this.eof&&(r[n++]=i<<4,i=-1),this.firstDigit=i,this.bufferLength=n}else this.eof=!0},e}(qr);const Xr=Hr;var Zr=new Int32Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Yr=new Int32Array([3,4,5,6,7,8,9,10,65547,65549,65551,65553,131091,131095,131099,131103,196643,196651,196659,196667,262211,262227,262243,262259,327811,327843,327875,327907,258,258,258]),Jr=new Int32Array([1,2,3,4,65541,65543,131081,131085,196625,196633,262177,262193,327745,327777,393345,393409,459009,459137,524801,525057,590849,591361,657409,658433,724993,727041,794625,798721,868353,876545]),Qr=[new Int32Array([459008,524368,524304,524568,459024,524400,524336,590016,459016,524384,524320,589984,524288,524416,524352,590048,459012,524376,524312,589968,459028,524408,524344,590032,459020,524392,524328,59e4,524296,524424,524360,590064,459010,524372,524308,524572,459026,524404,524340,590024,459018,524388,524324,589992,524292,524420,524356,590056,459014,524380,524316,589976,459030,524412,524348,590040,459022,524396,524332,590008,524300,524428,524364,590072,459009,524370,524306,524570,459025,524402,524338,590020,459017,524386,524322,589988,524290,524418,524354,590052,459013,524378,524314,589972,459029,524410,524346,590036,459021,524394,524330,590004,524298,524426,524362,590068,459011,524374,524310,524574,459027,524406,524342,590028,459019,524390,524326,589996,524294,524422,524358,590060,459015,524382,524318,589980,459031,524414,524350,590044,459023,524398,524334,590012,524302,524430,524366,590076,459008,524369,524305,524569,459024,524401,524337,590018,459016,524385,524321,589986,524289,524417,524353,590050,459012,524377,524313,589970,459028,524409,524345,590034,459020,524393,524329,590002,524297,524425,524361,590066,459010,524373,524309,524573,459026,524405,524341,590026,459018,524389,524325,589994,524293,524421,524357,590058,459014,524381,524317,589978,459030,524413,524349,590042,459022,524397,524333,590010,524301,524429,524365,590074,459009,524371,524307,524571,459025,524403,524339,590022,459017,524387,524323,589990,524291,524419,524355,590054,459013,524379,524315,589974,459029,524411,524347,590038,459021,524395,524331,590006,524299,524427,524363,590070,459011,524375,524311,524575,459027,524407,524343,590030,459019,524391,524327,589998,524295,524423,524359,590062,459015,524383,524319,589982,459031,524415,524351,590046,459023,524399,524335,590014,524303,524431,524367,590078,459008,524368,524304,524568,459024,524400,524336,590017,459016,524384,524320,589985,524288,524416,524352,590049,459012,524376,524312,589969,459028,524408,524344,590033,459020,524392,524328,590001,524296,524424,524360,590065,459010,524372,524308,524572,459026,524404,524340,590025,459018,524388,524324,589993,524292,524420,524356,590057,459014,524380,524316,589977,459030,524412,524348,590041,459022,524396,524332,590009,524300,524428,524364,590073,459009,524370,524306,524570,459025,524402,524338,590021,459017,524386,524322,589989,524290,524418,524354,590053,459013,524378,524314,589973,459029,524410,524346,590037,459021,524394,524330,590005,524298,524426,524362,590069,459011,524374,524310,524574,459027,524406,524342,590029,459019,524390,524326,589997,524294,524422,524358,590061,459015,524382,524318,589981,459031,524414,524350,590045,459023,524398,524334,590013,524302,524430,524366,590077,459008,524369,524305,524569,459024,524401,524337,590019,459016,524385,524321,589987,524289,524417,524353,590051,459012,524377,524313,589971,459028,524409,524345,590035,459020,524393,524329,590003,524297,524425,524361,590067,459010,524373,524309,524573,459026,524405,524341,590027,459018,524389,524325,589995,524293,524421,524357,590059,459014,524381,524317,589979,459030,524413,524349,590043,459022,524397,524333,590011,524301,524429,524365,590075,459009,524371,524307,524571,459025,524403,524339,590023,459017,524387,524323,589991,524291,524419,524355,590055,459013,524379,524315,589975,459029,524411,524347,590039,459021,524395,524331,590007,524299,524427,524363,590071,459011,524375,524311,524575,459027,524407,524343,590031,459019,524391,524327,589999,524295,524423,524359,590063,459015,524383,524319,589983,459031,524415,524351,590047,459023,524399,524335,590015,524303,524431,524367,590079]),9],_r=[new Int32Array([327680,327696,327688,327704,327684,327700,327692,327708,327682,327698,327690,327706,327686,327702,327694,0,327681,327697,327689,327705,327685,327701,327693,327709,327683,327699,327691,327707,327687,327703,327695,0]),5],$r=function(t){function e(e,r){var n=t.call(this,r)||this;n.stream=e;var i=e.getByte(),o=e.getByte();if(-1===i||-1===o)throw new Error("Invalid header in flate stream: "+i+", "+o);if(8!=(15&i))throw new Error("Unknown compression method in flate stream: "+i+", "+o);if(((i<<8)+o)%31!=0)throw new Error("Bad FCHECK in flate stream: "+i+", "+o);if(32&o)throw new Error("FDICT bit set in flate stream: "+i+", "+o);return n.codeSize=0,n.codeBuf=0,n}return u(e,t),e.prototype.readBlock=function(){var t,e,r=this.stream,n=this.getBits(3);if(1&n&&(this.eof=!0),0!=(n>>=1)){var i,o;if(1===n)i=Qr,o=_r;else{if(2!==n)throw new Error("Unknown block type in flate stream");var a=this.getBits(5)+257,s=this.getBits(5)+1,u=this.getBits(4)+4,c=new Uint8Array(Zr.length),l=void 0;for(l=0;l<u;++l)c[Zr[l]]=this.getBits(3);var h=this.generateHuffmanTable(c);e=0,l=0;for(var f=a+s,d=new Uint8Array(f),p=void 0,g=void 0,v=void 0;l<f;){var m=this.getCode(h);if(16===m)p=2,g=3,v=e;else if(17===m)p=3,g=3,v=e=0;else{if(18!==m){d[l++]=e=m;continue}p=7,g=11,v=e=0}for(var y=this.getBits(p)+g;y-- >0;)d[l++]=v}i=this.generateHuffmanTable(d.subarray(0,a)),o=this.generateHuffmanTable(d.subarray(a,f))}for(var b=(t=this.buffer)?t.length:0,w=this.bufferLength;;){var x=this.getCode(i);if(x<256)w+1>=b&&(b=(t=this.ensureBuffer(w+1)).length),t[w++]=x;else{if(256===x)return void(this.bufferLength=w);var A=(x=Yr[x-=257])>>16;A>0&&(A=this.getBits(A)),e=(65535&x)+A,x=this.getCode(o),(A=(x=Jr[x])>>16)>0&&(A=this.getBits(A));var C=(65535&x)+A;w+e>=b&&(b=(t=this.ensureBuffer(w+e)).length);for(var k=0;k<e;++k,++w)t[w]=t[w-C]}}}else{var S=void 0;if(-1===(S=r.getByte()))throw new Error("Bad block header in flate stream");var F=S;if(-1===(S=r.getByte()))throw new Error("Bad block header in flate stream");if(F|=S<<8,-1===(S=r.getByte()))throw new Error("Bad block header in flate stream");var B=S;if(-1===(S=r.getByte()))throw new Error("Bad block header in flate stream");if((B|=S<<8)!=(65535&~F)&&(0!==F||0!==B))throw new Error("Bad uncompressed block length in flate stream");this.codeBuf=0,this.codeSize=0;var E=this.bufferLength;t=this.ensureBuffer(E+F);var T=E+F;if(this.bufferLength=T,0===F)-1===r.peekByte()&&(this.eof=!0);else for(var O=E;O<T;++O){if(-1===(S=r.getByte())){this.eof=!0;break}t[O]=S}}},e.prototype.getBits=function(t){for(var e,r=this.stream,n=this.codeSize,i=this.codeBuf;n<t;){if(-1===(e=r.getByte()))throw new Error("Bad encoding in flate stream");i|=e<<n,n+=8}return e=i&(1<<t)-1,this.codeBuf=i>>t,this.codeSize=n-=t,e},e.prototype.getCode=function(t){for(var e,r=this.stream,n=t[0],i=t[1],o=this.codeSize,a=this.codeBuf;o<i&&-1!==(e=r.getByte());)a|=e<<o,o+=8;var s=n[a&(1<<i)-1];"number"==typeof n&&console.log("FLATE:",s);var u=s>>16,c=65535&s;if(u<1||o<u)throw new Error("Bad encoding in flate stream");return this.codeBuf=a>>u,this.codeSize=o-u,c},e.prototype.generateHuffmanTable=function(t){var e,r=t.length,n=0;for(e=0;e<r;++e)t[e]>n&&(n=t[e]);for(var i=1<<n,o=new Int32Array(i),a=1,s=0,u=2;a<=n;++a,s<<=1,u<<=1)for(var c=0;c<r;++c)if(t[c]===a){var l=0,h=s;for(e=0;e<a;++e)l=l<<1|1&h,h>>=1;for(e=l;e<i;e+=u)o[e]=a<<16|c;++s}return[o,n]},e}(qr);const tn=$r;var en=function(t){function e(e,r,n){var i=t.call(this,r)||this;i.stream=e,i.cachedData=0,i.bitsCached=0;for(var o=4096,a={earlyChange:n,codeLength:9,nextCode:258,dictionaryValues:new Uint8Array(o),dictionaryLengths:new Uint16Array(o),dictionaryPrevCodes:new Uint16Array(o),currentSequence:new Uint8Array(o),currentSequenceLength:0},s=0;s<256;++s)a.dictionaryValues[s]=s,a.dictionaryLengths[s]=1;return i.lzwState=a,i}return u(e,t),e.prototype.readBlock=function(){var t,e,r,n=1024,i=this.lzwState;if(i){var o=i.earlyChange,a=i.nextCode,s=i.dictionaryValues,u=i.dictionaryLengths,c=i.dictionaryPrevCodes,l=i.codeLength,h=i.prevCode,f=i.currentSequence,d=i.currentSequenceLength,p=0,g=this.bufferLength,v=this.ensureBuffer(this.bufferLength+n);for(t=0;t<512;t++){var m=this.readBits(l),y=d>0;if(!m||m<256)f[0]=m,d=1;else{if(!(m>=258)){if(256===m){l=9,a=258,d=0;continue}this.eof=!0,delete this.lzwState;break}if(m<a)for(e=(d=u[m])-1,r=m;e>=0;e--)f[e]=s[r],r=c[r];else f[d++]=f[0]}if(y&&(c[a]=h,u[a]=u[h]+1,s[a]=f[0],l=++a+o&a+o-1?l:0|Math.min(Math.log(a+o)/.6931471805599453+1,12)),h=m,n<(p+=d)){do{n+=512}while(n<p);v=this.ensureBuffer(this.bufferLength+n)}for(e=0;e<d;e++)v[g++]=f[e]}i.nextCode=a,i.codeLength=l,i.prevCode=h,i.currentSequenceLength=d,this.bufferLength=g}},e.prototype.readBits=function(t){for(var e=this.bitsCached,r=this.cachedData;e<t;){var n=this.stream.getByte();if(-1===n)return this.eof=!0,null;r=r<<8|n,e+=8}return this.bitsCached=e-=t,this.cachedData=r,r>>>e&(1<<t)-1},e}(qr);const rn=en;var nn=function(t){function e(e,r){var n=t.call(this,r)||this;return n.stream=e,n}return u(e,t),e.prototype.readBlock=function(){var t=this.stream.getBytes(2);if(!t||t.length<2||128===t[0])this.eof=!0;else{var e,r=this.bufferLength,n=t[0];if(n<128){if((e=this.ensureBuffer(r+n+1))[r++]=t[1],n>0){var i=this.stream.getBytes(n);e.set(i,r),r+=n}}else{n=257-n;var o=t[1];e=this.ensureBuffer(r+n+1);for(var a=0;a<n;a++)e[r++]=o}this.bufferLength=r}},e}(qr);const on=nn;var an=function(t,e,r){if(e===Oe.of("FlateDecode"))return new tn(t);if(e===Oe.of("LZWDecode")){var n=1;if(r instanceof Ae){var i=r.lookup(Oe.of("EarlyChange"));i instanceof ge&&(n=i.asNumber())}return new rn(t,void 0,n)}if(e===Oe.of("ASCII85Decode"))return new Kr(t);if(e===Oe.of("ASCIIHexDecode"))return new Xr(t);if(e===Oe.of("RunLengthDecode"))return new on(t);throw new qt(e.asString())},sn=function(t){var e=t.dict,r=t.contents,n=new Wr(r),i=e.lookup(Oe.of("Filter")),o=e.lookup(Oe.of("DecodeParms"));if(i instanceof Oe)n=an(n,i,o);else if(i instanceof me)for(var a=0,s=i.size();a<s;a++)n=an(n,i.lookup(a,Oe),o&&o.lookupMaybe(a,Ae));else if(i)throw new Vt([Oe,me],i);return n},un=function(){function t(t,e,r){this.page=t;var n=null!=e?e:function(t){var e=t.MediaBox();return{left:0,bottom:0,right:e.lookup(2,ge).asNumber()-e.lookup(0,ge).asNumber(),top:e.lookup(3,ge).asNumber()-e.lookup(1,ge).asNumber()}}(t);this.width=n.right-n.left,this.height=n.top-n.bottom,this.boundingBox=n,this.transformationMatrix=null!=r?r:function(t){return[1,0,0,1,-t.left,-t.bottom]}(n)}return t.for=function(e,r,n){return l(this,void 0,void 0,(function(){return h(this,(function(i){return[2,new t(e,r,n)]}))}))},t.prototype.embedIntoContext=function(t,e){return l(this,void 0,void 0,(function(){var r,n,i,o,a,s,u,c,l,f;return h(this,(function(h){if(r=this.page.normalizedEntries(),n=r.Contents,i=r.Resources,!n)throw new Gt;return o=this.decodeContents(n),a=this.boundingBox,s=a.left,u=a.bottom,c=a.right,l=a.top,f=t.stream(o,{Type:"XObject",Subtype:"Form",FormType:1,BBox:[s,u,c,l],Matrix:this.transformationMatrix,Resources:i}),e?(t.assign(e,f),[2,e]):[2,t.register(f)]}))}))},t.prototype.decodeContents=function(t){for(var e=Uint8Array.of(fe.Newline),r=[],n=0,i=t.size();n<i;n++){var o=t.lookup(n,Re),a=void 0;if(o instanceof Pe)a=sn(o).decode();else{if(!(o instanceof Le))throw new Kt(o);a=o.getUnencodedContents()}r.push(a,e)}return j.apply(void 0,r)},t}();const cn=un;var ln,hn,fn,dn,pn=function(t,e){if(void 0!==t)return e[t]};!function(t){t.UseNone="UseNone",t.UseOutlines="UseOutlines",t.UseThumbs="UseThumbs",t.UseOC="UseOC"}(ln||(ln={})),function(t){t.L2R="L2R",t.R2L="R2L"}(hn||(hn={})),function(t){t.None="None",t.AppDefault="AppDefault"}(fn||(fn={})),function(t){t.Simplex="Simplex",t.DuplexFlipShortEdge="DuplexFlipShortEdge",t.DuplexFlipLongEdge="DuplexFlipLongEdge"}(dn||(dn={}));var gn=function(){function t(t){this.dict=t}return t.prototype.lookupBool=function(t){var e=this.dict.lookup(Oe.of(t));if(e instanceof be)return e},t.prototype.lookupName=function(t){var e=this.dict.lookup(Oe.of(t));if(e instanceof Oe)return e},t.prototype.HideToolbar=function(){return this.lookupBool("HideToolbar")},t.prototype.HideMenubar=function(){return this.lookupBool("HideMenubar")},t.prototype.HideWindowUI=function(){return this.lookupBool("HideWindowUI")},t.prototype.FitWindow=function(){return this.lookupBool("FitWindow")},t.prototype.CenterWindow=function(){return this.lookupBool("CenterWindow")},t.prototype.DisplayDocTitle=function(){return this.lookupBool("DisplayDocTitle")},t.prototype.NonFullScreenPageMode=function(){return this.lookupName("NonFullScreenPageMode")},t.prototype.Direction=function(){return this.lookupName("Direction")},t.prototype.PrintScaling=function(){return this.lookupName("PrintScaling")},t.prototype.Duplex=function(){return this.lookupName("Duplex")},t.prototype.PickTrayByPDFSize=function(){return this.lookupBool("PickTrayByPDFSize")},t.prototype.PrintPageRange=function(){var t=this.dict.lookup(Oe.of("PrintPageRange"));if(t instanceof me)return t},t.prototype.NumCopies=function(){var t=this.dict.lookup(Oe.of("NumCopies"));if(t instanceof ge)return t},t.prototype.getHideToolbar=function(){var t,e;return null!==(e=null===(t=this.HideToolbar())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getHideMenubar=function(){var t,e;return null!==(e=null===(t=this.HideMenubar())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getHideWindowUI=function(){var t,e;return null!==(e=null===(t=this.HideWindowUI())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getFitWindow=function(){var t,e;return null!==(e=null===(t=this.FitWindow())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getCenterWindow=function(){var t,e;return null!==(e=null===(t=this.CenterWindow())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getDisplayDocTitle=function(){var t,e;return null!==(e=null===(t=this.DisplayDocTitle())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getNonFullScreenPageMode=function(){var t,e,r=null===(t=this.NonFullScreenPageMode())||void 0===t?void 0:t.decodeText();return null!==(e=pn(r,ln))&&void 0!==e?e:ln.UseNone},t.prototype.getReadingDirection=function(){var t,e,r=null===(t=this.Direction())||void 0===t?void 0:t.decodeText();return null!==(e=pn(r,hn))&&void 0!==e?e:hn.L2R},t.prototype.getPrintScaling=function(){var t,e,r=null===(t=this.PrintScaling())||void 0===t?void 0:t.decodeText();return null!==(e=pn(r,fn))&&void 0!==e?e:fn.AppDefault},t.prototype.getDuplex=function(){var t,e=null===(t=this.Duplex())||void 0===t?void 0:t.decodeText();return pn(e,dn)},t.prototype.getPickTrayByPDFSize=function(){var t;return null===(t=this.PickTrayByPDFSize())||void 0===t?void 0:t.asBoolean()},t.prototype.getPrintPageRange=function(){var t=this.PrintPageRange();if(!t)return[];for(var e=[],r=0;r<t.size();r+=2){var n=t.lookup(r,ge).asNumber(),i=t.lookup(r+1,ge).asNumber();e.push({start:n,end:i})}return e},t.prototype.getNumCopies=function(){var t,e;return null!==(e=null===(t=this.NumCopies())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:1},t.prototype.setHideToolbar=function(t){var e=this.dict.context.obj(t);this.dict.set(Oe.of("HideToolbar"),e)},t.prototype.setHideMenubar=function(t){var e=this.dict.context.obj(t);this.dict.set(Oe.of("HideMenubar"),e)},t.prototype.setHideWindowUI=function(t){var e=this.dict.context.obj(t);this.dict.set(Oe.of("HideWindowUI"),e)},t.prototype.setFitWindow=function(t){var e=this.dict.context.obj(t);this.dict.set(Oe.of("FitWindow"),e)},t.prototype.setCenterWindow=function(t){var e=this.dict.context.obj(t);this.dict.set(Oe.of("CenterWindow"),e)},t.prototype.setDisplayDocTitle=function(t){var e=this.dict.context.obj(t);this.dict.set(Oe.of("DisplayDocTitle"),e)},t.prototype.setNonFullScreenPageMode=function(t){Ct(t,"nonFullScreenPageMode",ln);var e=Oe.of(t);this.dict.set(Oe.of("NonFullScreenPageMode"),e)},t.prototype.setReadingDirection=function(t){Ct(t,"readingDirection",hn);var e=Oe.of(t);this.dict.set(Oe.of("Direction"),e)},t.prototype.setPrintScaling=function(t){Ct(t,"printScaling",fn);var e=Oe.of(t);this.dict.set(Oe.of("PrintScaling"),e)},t.prototype.setDuplex=function(t){Ct(t,"duplex",dn);var e=Oe.of(t);this.dict.set(Oe.of("Duplex"),e)},t.prototype.setPickTrayByPDFSize=function(t){var e=this.dict.context.obj(t);this.dict.set(Oe.of("PickTrayByPDFSize"),e)},t.prototype.setPrintPageRange=function(t){Array.isArray(t)||(t=[t]);for(var e=[],r=0,n=t.length;r<n;r++)e.push(t[r].start),e.push(t[r].end);Et(e,"printPageRange",["number"]);var i=this.dict.context.obj(e);this.dict.set(Oe.of("PrintPageRange"),i)},t.prototype.setNumCopies=function(t){Tt(t,"numCopies",1,Number.MAX_VALUE),function(t,e){if(!Number.isInteger(t))throw new Error(xt("numCopies")+" must be an integer, but was actually "+t)}(t);var e=this.dict.context.obj(t);this.dict.set(Oe.of("NumCopies"),e)},t.fromDict=function(e){return new t(e)},t.create=function(e){return new t(e.obj({}))},t}();const vn=gn;var mn=/\/([^\0\t\n\f\r\ ]+)[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]+Tf/,yn=function(){function t(t,e){this.dict=t,this.ref=e}return t.prototype.T=function(){return this.dict.lookupMaybe(Oe.of("T"),wr,dr)},t.prototype.Ff=function(){var t=this.getInheritableAttribute(Oe.of("Ff"));return this.dict.context.lookupMaybe(t,ge)},t.prototype.V=function(){var t=this.getInheritableAttribute(Oe.of("V"));return this.dict.context.lookup(t)},t.prototype.Kids=function(){return this.dict.lookupMaybe(Oe.of("Kids"),me)},t.prototype.DA=function(){var t=this.dict.lookup(Oe.of("DA"));if(t instanceof wr||t instanceof dr)return t},t.prototype.setKids=function(t){this.dict.set(Oe.of("Kids"),this.dict.context.obj(t))},t.prototype.getParent=function(){var e=this.dict.get(Oe.of("Parent"));if(e instanceof Ie)return new t(this.dict.lookup(Oe.of("Parent"),Ae),e)},t.prototype.setParent=function(t){t?this.dict.set(Oe.of("Parent"),t):this.dict.delete(Oe.of("Parent"))},t.prototype.getFullyQualifiedName=function(){var t=this.getParent();return t?t.getFullyQualifiedName()+"."+this.getPartialName():this.getPartialName()},t.prototype.getPartialName=function(){var t;return null===(t=this.T())||void 0===t?void 0:t.decodeText()},t.prototype.setPartialName=function(t){t?this.dict.set(Oe.of("T"),dr.fromText(t)):this.dict.delete(Oe.of("T"))},t.prototype.setDefaultAppearance=function(t){this.dict.set(Oe.of("DA"),wr.of(t))},t.prototype.getDefaultAppearance=function(){var t=this.DA();return t instanceof dr?t.decodeText():null==t?void 0:t.asString()},t.prototype.setFontSize=function(t){var e,r=null!==(e=this.getFullyQualifiedName())&&void 0!==e?e:"",n=this.getDefaultAppearance();if(!n)throw new te(r);var i=D(n,mn);if(!i.match)throw new ee(r);var o=n.slice(0,i.pos-i.match[0].length),a=i.pos<=n.length?n.slice(i.pos):"",s=o+" /"+i.match[1]+" "+t+" Tf "+a;this.setDefaultAppearance(s)},t.prototype.getFlags=function(){var t,e;return null!==(e=null===(t=this.Ff())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:0},t.prototype.setFlags=function(t){this.dict.set(Oe.of("Ff"),ge.of(t))},t.prototype.hasFlag=function(t){return 0!=(this.getFlags()&t)},t.prototype.setFlag=function(t){var e=this.getFlags();this.setFlags(e|t)},t.prototype.clearFlag=function(t){var e=this.getFlags();this.setFlags(e&~t)},t.prototype.setFlagTo=function(t,e){e?this.setFlag(t):this.clearFlag(t)},t.prototype.getInheritableAttribute=function(t){var e;return this.ascend((function(r){e||(e=r.dict.get(t))})),e},t.prototype.ascend=function(t){t(this);var e=this.getParent();e&&e.ascend(t)},t}();const bn=yn;var wn=function(){function t(t){this.dict=t}return t.prototype.W=function(){var t=this.dict.lookup(Oe.of("W"));if(t instanceof ge)return t},t.prototype.getWidth=function(){var t,e;return null!==(e=null===(t=this.W())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:1},t.prototype.setWidth=function(t){var e=this.dict.context.obj(t);this.dict.set(Oe.of("W"),e)},t.fromDict=function(e){return new t(e)},t}();const xn=wn;var An=function(){function t(t){this.dict=t}return t.prototype.Rect=function(){return this.dict.lookup(Oe.of("Rect"),me)},t.prototype.AP=function(){return this.dict.lookupMaybe(Oe.of("AP"),Ae)},t.prototype.F=function(){var t=this.dict.lookup(Oe.of("F"));return this.dict.context.lookupMaybe(t,ge)},t.prototype.getRectangle=function(){var t,e=this.Rect();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:{x:0,y:0,width:0,height:0}},t.prototype.setRectangle=function(t){var e=t.x,r=t.y,n=t.width,i=t.height,o=this.dict.context.obj([e,r,e+n,r+i]);this.dict.set(Oe.of("Rect"),o)},t.prototype.getAppearanceState=function(){var t=this.dict.lookup(Oe.of("AS"));if(t instanceof Oe)return t},t.prototype.setAppearanceState=function(t){this.dict.set(Oe.of("AS"),t)},t.prototype.setAppearances=function(t){this.dict.set(Oe.of("AP"),t)},t.prototype.ensureAP=function(){var t=this.AP();return t||(t=this.dict.context.obj({}),this.dict.set(Oe.of("AP"),t)),t},t.prototype.getNormalAppearance=function(){var t=this.ensureAP().get(Oe.of("N"));if(t instanceof Ie||t instanceof Ae)return t;throw new Error("Unexpected N type: "+(null==t?void 0:t.constructor.name))},t.prototype.setNormalAppearance=function(t){this.ensureAP().set(Oe.of("N"),t)},t.prototype.setRolloverAppearance=function(t){this.ensureAP().set(Oe.of("R"),t)},t.prototype.setDownAppearance=function(t){this.ensureAP().set(Oe.of("D"),t)},t.prototype.removeRolloverAppearance=function(){var t=this.AP();null==t||t.delete(Oe.of("R"))},t.prototype.removeDownAppearance=function(){var t=this.AP();null==t||t.delete(Oe.of("D"))},t.prototype.getAppearances=function(){var t=this.AP();if(t)return{normal:t.lookup(Oe.of("N"),Ae,Re),rollover:t.lookupMaybe(Oe.of("R"),Ae,Re),down:t.lookupMaybe(Oe.of("D"),Ae,Re)}},t.prototype.getFlags=function(){var t,e;return null!==(e=null===(t=this.F())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:0},t.prototype.setFlags=function(t){this.dict.set(Oe.of("F"),ge.of(t))},t.prototype.hasFlag=function(t){return 0!=(this.getFlags()&t)},t.prototype.setFlag=function(t){var e=this.getFlags();this.setFlags(e|t)},t.prototype.clearFlag=function(t){var e=this.getFlags();this.setFlags(e&~t)},t.prototype.setFlagTo=function(t,e){e?this.setFlag(t):this.clearFlag(t)},t.fromDict=function(e){return new t(e)},t}();const Cn=An;var kn=function(){function t(t){this.dict=t}return t.prototype.R=function(){var t=this.dict.lookup(Oe.of("R"));if(t instanceof ge)return t},t.prototype.BC=function(){var t=this.dict.lookup(Oe.of("BC"));if(t instanceof me)return t},t.prototype.BG=function(){var t=this.dict.lookup(Oe.of("BG"));if(t instanceof me)return t},t.prototype.CA=function(){var t=this.dict.lookup(Oe.of("CA"));if(t instanceof dr||t instanceof wr)return t},t.prototype.RC=function(){var t=this.dict.lookup(Oe.of("RC"));if(t instanceof dr||t instanceof wr)return t},t.prototype.AC=function(){var t=this.dict.lookup(Oe.of("AC"));if(t instanceof dr||t instanceof wr)return t},t.prototype.getRotation=function(){var t;return null===(t=this.R())||void 0===t?void 0:t.asNumber()},t.prototype.getBorderColor=function(){var t=this.BC();if(t){for(var e=[],r=0,n=null==t?void 0:t.size();r<n;r++){var i=t.get(r);i instanceof ge&&e.push(i.asNumber())}return e}},t.prototype.getBackgroundColor=function(){var t=this.BG();if(t){for(var e=[],r=0,n=null==t?void 0:t.size();r<n;r++){var i=t.get(r);i instanceof ge&&e.push(i.asNumber())}return e}},t.prototype.getCaptions=function(){var t=this.CA(),e=this.RC(),r=this.AC();return{normal:null==t?void 0:t.decodeText(),rollover:null==e?void 0:e.decodeText(),down:null==r?void 0:r.decodeText()}},t.prototype.setRotation=function(t){var e=this.dict.context.obj(t);this.dict.set(Oe.of("R"),e)},t.prototype.setBorderColor=function(t){var e=this.dict.context.obj(t);this.dict.set(Oe.of("BC"),e)},t.prototype.setBackgroundColor=function(t){var e=this.dict.context.obj(t);this.dict.set(Oe.of("BG"),e)},t.prototype.setCaptions=function(t){var e=dr.fromText(t.normal);if(this.dict.set(Oe.of("CA"),e),t.rollover){var r=dr.fromText(t.rollover);this.dict.set(Oe.of("RC"),r)}else this.dict.delete(Oe.of("RC"));if(t.down){var n=dr.fromText(t.down);this.dict.set(Oe.of("AC"),n)}else this.dict.delete(Oe.of("AC"))},t.fromDict=function(e){return new t(e)},t}();const Sn=kn;var Fn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.MK=function(){var t=this.dict.lookup(Oe.of("MK"));if(t instanceof Ae)return t},e.prototype.BS=function(){var t=this.dict.lookup(Oe.of("BS"));if(t instanceof Ae)return t},e.prototype.DA=function(){var t=this.dict.lookup(Oe.of("DA"));if(t instanceof wr||t instanceof dr)return t},e.prototype.P=function(){var t=this.dict.get(Oe.of("P"));if(t instanceof Ie)return t},e.prototype.setDefaultAppearance=function(t){this.dict.set(Oe.of("DA"),wr.of(t))},e.prototype.getDefaultAppearance=function(){var t=this.DA();return t instanceof dr?t.decodeText():null==t?void 0:t.asString()},e.prototype.getAppearanceCharacteristics=function(){var t=this.MK();if(t)return Sn.fromDict(t)},e.prototype.getOrCreateAppearanceCharacteristics=function(){var t=this.MK();if(t)return Sn.fromDict(t);var e=Sn.fromDict(this.dict.context.obj({}));return this.dict.set(Oe.of("MK"),e.dict),e},e.prototype.getBorderStyle=function(){var t=this.BS();if(t)return xn.fromDict(t)},e.prototype.getOrCreateBorderStyle=function(){var t=this.BS();if(t)return xn.fromDict(t);var e=xn.fromDict(this.dict.context.obj({}));return this.dict.set(Oe.of("BS"),e.dict),e},e.prototype.getOnValue=function(){var t,e=null===(t=this.getAppearances())||void 0===t?void 0:t.normal;if(e instanceof Ae)for(var r=e.keys(),n=0,i=r.length;n<i;n++){var o=r[n];if(o!==Oe.of("Off"))return o}},e.fromDict=function(t){return new e(t)},e.create=function(t,r){return new e(t.obj({Type:"Annot",Subtype:"Widget",Rect:[0,0,0,0],Parent:r}))},e}(Cn);const Bn=Fn;var En=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.FT=function(){var t=this.getInheritableAttribute(Oe.of("FT"));return this.dict.context.lookup(t,Oe)},e.prototype.getWidgets=function(){var t=this.Kids();if(!t)return[Bn.fromDict(this.dict)];for(var e=new Array(t.size()),r=0,n=t.size();r<n;r++){var i=t.lookup(r,Ae);e[r]=Bn.fromDict(i)}return e},e.prototype.addWidget=function(t){this.normalizedEntries().Kids.push(t)},e.prototype.removeWidget=function(t){var e=this.Kids();if(e){if(t<0||t>e.size())throw new Qt(t,0,e.size());e.remove(t)}else{if(0!==t)throw new Qt(t,0,0);this.setKids([])}},e.prototype.normalizedEntries=function(){var t=this.Kids();return t||(t=this.dict.context.obj([this.ref]),this.dict.set(Oe.of("Kids"),t)),{Kids:t}},e.fromDict=function(t,r){return new e(t,r)},e}(bn);const Tn=En;var On=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.Opt=function(){return this.dict.lookupMaybe(Oe.of("Opt"),wr,dr,me)},e.prototype.setOpt=function(t){this.dict.set(Oe.of("Opt"),this.dict.context.obj(t))},e.prototype.getExportValues=function(){var t=this.Opt();if(t){if(t instanceof wr||t instanceof dr)return[t];for(var e=[],r=0,n=t.size();r<n;r++){var i=t.lookup(r);(i instanceof wr||i instanceof dr)&&e.push(i)}return e}},e.prototype.removeExportValue=function(t){var e=this.Opt();if(e)if(e instanceof wr||e instanceof dr){if(0!==t)throw new Qt(t,0,0);this.setOpt([])}else{if(t<0||t>e.size())throw new Qt(t,0,e.size());e.remove(t)}},e.prototype.normalizeExportValues=function(){for(var t,e,r,n,i=null!==(t=this.getExportValues())&&void 0!==t?t:[],o=[],a=this.getWidgets(),s=0,u=a.length;s<u;s++){var c=a[s],l=null!==(e=i[s])&&void 0!==e?e:dr.fromText(null!==(n=null===(r=c.getOnValue())||void 0===r?void 0:r.decodeText())&&void 0!==n?n:"");o.push(l)}this.setOpt(o)},e.prototype.addOpt=function(t,e){var r;this.normalizeExportValues();var n,i=t.decodeText();if(e)for(var o=null!==(r=this.getExportValues())&&void 0!==r?r:[],a=0,s=o.length;a<s;a++)o[a].decodeText()===i&&(n=a);var u=this.Opt();return u.push(t),null!=n?n:u.size()-1},e.prototype.addWidgetWithOpt=function(t,e,r){var n=this.addOpt(e,r),i=Oe.of(String(n));return this.addWidget(t),i},e}(Tn);const zn=On;var Rn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.setValue=function(t){var e;if(t!==(null!==(e=this.getOnValue())&&void 0!==e?e:Oe.of("Yes"))&&t!==Oe.of("Off"))throw new _t;this.dict.set(Oe.of("V"),t);for(var r=this.getWidgets(),n=0,i=r.length;n<i;n++){var o=r[n],a=o.getOnValue()===t?t:Oe.of("Off");o.setAppearanceState(a)}},e.prototype.getValue=function(){var t=this.V();return t instanceof Oe?t:Oe.of("Off")},e.prototype.getOnValue=function(){var t=this.getWidgets()[0];return null==t?void 0:t.getOnValue()},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Btn",Kids:[]});return new e(r,t.register(r))},e}(zn);const Pn=Rn;var Dn,Nn,In,jn,Un=function(t){return 1<<t};!function(t){t[t.ReadOnly=Un(0)]="ReadOnly",t[t.Required=Un(1)]="Required",t[t.NoExport=Un(2)]="NoExport"}(Dn||(Dn={})),function(t){t[t.NoToggleToOff=Un(14)]="NoToggleToOff",t[t.Radio=Un(15)]="Radio",t[t.PushButton=Un(16)]="PushButton",t[t.RadiosInUnison=Un(25)]="RadiosInUnison"}(Nn||(Nn={})),function(t){t[t.Multiline=Un(12)]="Multiline",t[t.Password=Un(13)]="Password",t[t.FileSelect=Un(20)]="FileSelect",t[t.DoNotSpellCheck=Un(22)]="DoNotSpellCheck",t[t.DoNotScroll=Un(23)]="DoNotScroll",t[t.Comb=Un(24)]="Comb",t[t.RichText=Un(25)]="RichText"}(In||(In={})),function(t){t[t.Combo=Un(17)]="Combo",t[t.Edit=Un(18)]="Edit",t[t.Sort=Un(19)]="Sort",t[t.MultiSelect=Un(21)]="MultiSelect",t[t.DoNotSpellCheck=Un(22)]="DoNotSpellCheck",t[t.CommitOnSelChange=Un(26)]="CommitOnSelChange"}(jn||(jn={}));var Mn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.setValues=function(t){if(this.hasFlag(jn.Combo)&&!this.hasFlag(jn.Edit)&&!this.valuesAreValid(t))throw new _t;if(0===t.length&&this.dict.delete(Oe.of("V")),1===t.length&&this.dict.set(Oe.of("V"),t[0]),t.length>1){if(!this.hasFlag(jn.MultiSelect))throw new $t;this.dict.set(Oe.of("V"),this.dict.context.obj(t))}this.updateSelectedIndices(t)},e.prototype.valuesAreValid=function(t){for(var e=this.getOptions(),r=function(r,n){var i=t[r].decodeText();if(!e.find((function(t){return i===(t.display||t.value).decodeText()})))return{value:!1}},n=0,i=t.length;n<i;n++){var o=r(n);if("object"==typeof o)return o.value}return!0},e.prototype.updateSelectedIndices=function(t){if(t.length>1){for(var e=new Array(t.length),r=this.getOptions(),n=function(n,i){var o=t[n].decodeText();e[n]=r.findIndex((function(t){return o===(t.display||t.value).decodeText()}))},i=0,o=t.length;i<o;i++)n(i);this.dict.set(Oe.of("I"),this.dict.context.obj(e.sort()))}else this.dict.delete(Oe.of("I"))},e.prototype.getValues=function(){var t=this.V();if(t instanceof wr||t instanceof dr)return[t];if(t instanceof me){for(var e=[],r=0,n=t.size();r<n;r++){var i=t.lookup(r);(i instanceof wr||i instanceof dr)&&e.push(i)}return e}return[]},e.prototype.Opt=function(){return this.dict.lookupMaybe(Oe.of("Opt"),wr,dr,me)},e.prototype.setOptions=function(t){for(var e=new Array(t.length),r=0,n=t.length;r<n;r++){var i=t[r],o=i.value,a=i.display;e[r]=this.dict.context.obj([o,a||o])}this.dict.set(Oe.of("Opt"),this.dict.context.obj(e))},e.prototype.getOptions=function(){var t=this.Opt();if(t instanceof wr||t instanceof dr)return[{value:t,display:t}];if(t instanceof me){for(var e=[],r=0,n=t.size();r<n;r++){var i=t.lookup(r);if((i instanceof wr||i instanceof dr)&&e.push({value:i,display:i}),i instanceof me&&i.size()>0){var o=i.lookup(0,wr,dr),a=i.lookupMaybe(1,wr,dr);e.push({value:o,display:a||o})}}return e}return[]},e}(Tn);const Wn=Mn,Vn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Ch",Ff:jn.Combo,Kids:[]});return new e(r,t.register(r))},e}(Wn),qn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.addField=function(t){var e=this.normalizedEntries().Kids;null==e||e.push(t)},e.prototype.normalizedEntries=function(){var t=this.Kids();return t||(t=this.dict.context.obj([]),this.dict.set(Oe.of("Kids"),t)),{Kids:t}},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({});return new e(r,t.register(r))},e}(bn),Ln=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.fromDict=function(t,r){return new e(t,r)},e}(Tn),Gn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.MaxLen=function(){var t=this.dict.lookup(Oe.of("MaxLen"));if(t instanceof ge)return t},e.prototype.Q=function(){var t=this.dict.lookup(Oe.of("Q"));if(t instanceof ge)return t},e.prototype.setMaxLength=function(t){this.dict.set(Oe.of("MaxLen"),ge.of(t))},e.prototype.removeMaxLength=function(){this.dict.delete(Oe.of("MaxLen"))},e.prototype.getMaxLength=function(){var t;return null===(t=this.MaxLen())||void 0===t?void 0:t.asNumber()},e.prototype.setQuadding=function(t){this.dict.set(Oe.of("Q"),ge.of(t))},e.prototype.getQuadding=function(){var t;return null===(t=this.Q())||void 0===t?void 0:t.asNumber()},e.prototype.setValue=function(t){this.dict.set(Oe.of("V"),t)},e.prototype.removeValue=function(){this.dict.delete(Oe.of("V"))},e.prototype.getValue=function(){var t=this.V();if(t instanceof wr||t instanceof dr)return t},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Tx",Kids:[]});return new e(r,t.register(r))},e}(Tn),Kn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Btn",Ff:Nn.PushButton,Kids:[]});return new e(r,t.register(r))},e}(zn);var Hn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.setValue=function(t){if(!this.getOnValues().includes(t)&&t!==Oe.of("Off"))throw new _t;this.dict.set(Oe.of("V"),t);for(var e=this.getWidgets(),r=0,n=e.length;r<n;r++){var i=e[r],o=i.getOnValue()===t?t:Oe.of("Off");i.setAppearanceState(o)}},e.prototype.getValue=function(){var t=this.V();return t instanceof Oe?t:Oe.of("Off")},e.prototype.getOnValues=function(){for(var t=this.getWidgets(),e=[],r=0,n=t.length;r<n;r++){var i=t[r].getOnValue();i&&e.push(i)}return e},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Btn",Ff:Nn.Radio,Kids:[]});return new e(r,t.register(r))},e}(zn);const Xn=Hn,Zn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Ch",Kids:[]});return new e(r,t.register(r))},e}(Wn);var Yn=function(t){if(!t)return[];for(var e=[],r=0,n=t.size();r<n;r++){var i=t.get(r),o=t.lookup(r);i instanceof Ie&&o instanceof Ae&&e.push([Jn(o,i),i])}return e},Jn=function(t,e){return Qn(t)?qn.fromDict(t,e):_n(t,e)},Qn=function(t){var e=t.lookup(Oe.of("Kids"));if(e instanceof me)for(var r=0,n=e.size();r<n;r++){var i=e.lookup(r);if(i instanceof Ae&&i.has(Oe.of("T")))return!0}return!1},_n=function(t,e){var r=ri(t,Oe.of("FT")),n=t.context.lookup(r,Oe);return n===Oe.of("Btn")?$n(t,e):n===Oe.of("Ch")?ti(t,e):n===Oe.of("Tx")?Gn.fromDict(t,e):n===Oe.of("Sig")?Ln.fromDict(t,e):Tn.fromDict(t,e)},$n=function(t,e){var r,n=ri(t,Oe.of("Ff")),i=t.context.lookupMaybe(n,ge),o=null!==(r=null==i?void 0:i.asNumber())&&void 0!==r?r:0;return ei(o,Nn.PushButton)?Kn.fromDict(t,e):ei(o,Nn.Radio)?Xn.fromDict(t,e):Pn.fromDict(t,e)},ti=function(t,e){var r,n=ri(t,Oe.of("Ff")),i=t.context.lookupMaybe(n,ge),o=null!==(r=null==i?void 0:i.asNumber())&&void 0!==r?r:0;return ei(o,jn.Combo)?Vn.fromDict(t,e):Zn.fromDict(t,e)},ei=function(t,e){return 0!=(t&e)},ri=function(t,e){var r;return ni(t,(function(t){r||(r=t.get(e))})),r},ni=function(t,e){e(t);var r=t.lookupMaybe(Oe.of("Parent"),Ae);r&&ni(r,e)},ii=function(){function t(t){this.dict=t}return t.prototype.Fields=function(){var t=this.dict.lookup(Oe.of("Fields"));if(t instanceof me)return t},t.prototype.getFields=function(){for(var t=this.normalizedEntries().Fields,e=new Array(t.size()),r=0,n=t.size();r<n;r++){var i=t.get(r),o=t.lookup(r,Ae);e[r]=[Jn(o,i),i]}return e},t.prototype.getAllFields=function(){var t=[],e=function(r){if(r)for(var n=0,i=r.length;n<i;n++){var o=r[n];t.push(o);var a=o[0];a instanceof qn&&e(Yn(a.Kids()))}};return e(this.getFields()),t},t.prototype.addField=function(t){var e=this.normalizedEntries().Fields;null==e||e.push(t)},t.prototype.removeField=function(t){var e=t.getParent(),r=void 0===e?this.normalizedEntries().Fields:e.Kids(),n=null==r?void 0:r.indexOf(t.ref);if(void 0===r||void 0===n)throw new Error("Tried to remove inexistent field "+t.getFullyQualifiedName());r.remove(n),void 0!==e&&0===r.size()&&this.removeField(e)},t.prototype.normalizedEntries=function(){var t=this.Fields();return t||(t=this.dict.context.obj([]),this.dict.set(Oe.of("Fields"),t)),{Fields:t}},t.fromDict=function(e){return new t(e)},t.create=function(e){return new t(e.obj({Fields:[]}))},t}();const oi=ii,ai=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.Pages=function(){return this.lookup(Oe.of("Pages"),Ae)},e.prototype.AcroForm=function(){return this.lookupMaybe(Oe.of("AcroForm"),Ae)},e.prototype.getAcroForm=function(){var t=this.AcroForm();if(t)return oi.fromDict(t)},e.prototype.getOrCreateAcroForm=function(){var t=this.getAcroForm();if(!t){t=oi.create(this.context);var e=this.context.register(t.dict);this.set(Oe.of("AcroForm"),e)}return t},e.prototype.ViewerPreferences=function(){return this.lookupMaybe(Oe.of("ViewerPreferences"),Ae)},e.prototype.getViewerPreferences=function(){var t=this.ViewerPreferences();if(t)return vn.fromDict(t)},e.prototype.getOrCreateViewerPreferences=function(){var t=this.getViewerPreferences();if(!t){t=vn.create(this.context);var e=this.context.register(t.dict);this.set(Oe.of("ViewerPreferences"),e)}return t},e.prototype.insertLeafNode=function(t,e){var r=this.get(Oe.of("Pages"));return this.Pages().insertLeafNode(t,e)||r},e.prototype.removeLeafNode=function(t){this.Pages().removeLeafNode(t)},e.withContextAndPages=function(t,r){var n=new Map;return n.set(Oe.of("Type"),Oe.of("Catalog")),n.set(Oe.of("Pages"),r),new e(n,t)},e.fromMapWithContext=function(t,r){return new e(t,r)},e}(Ae);var si=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return u(e,t),e.prototype.Parent=function(){return this.lookup(Oe.of("Parent"))},e.prototype.Kids=function(){return this.lookup(Oe.of("Kids"),me)},e.prototype.Count=function(){return this.lookup(Oe.of("Count"),ge)},e.prototype.pushTreeNode=function(t){this.Kids().push(t)},e.prototype.pushLeafNode=function(t){var e=this.Kids();this.insertLeafKid(e.size(),t)},e.prototype.insertLeafNode=function(t,r){var n=this.Kids(),i=this.Count().asNumber();if(r>i)throw new Yt(r,i);for(var o=r,a=0,s=n.size();a<s;a++){if(0===o)return void this.insertLeafKid(a,t);var u=n.get(a),c=this.context.lookup(u);if(c instanceof e){if(c.Count().asNumber()>o)return c.insertLeafNode(t,o)||u;o-=c.Count().asNumber()}c instanceof Ze&&(o-=1)}if(0!==o)throw new Jt(r,"insertLeafNode");this.insertLeafKid(n.size(),t)},e.prototype.removeLeafNode=function(t,r){void 0===r&&(r=!0);var n=this.Kids(),i=this.Count().asNumber();if(t>=i)throw new Yt(t,i);for(var o=t,a=0,s=n.size();a<s;a++){var u=n.get(a),c=this.context.lookup(u);if(c instanceof e){if(c.Count().asNumber()>o)return c.removeLeafNode(o,r),void(r&&0===c.Kids().size()&&n.remove(a));o-=c.Count().asNumber()}if(c instanceof Ze){if(0===o)return void this.removeKid(a);o-=1}}throw new Jt(t,"removeLeafNode")},e.prototype.ascend=function(t){t(this);var e=this.Parent();e&&e.ascend(t)},e.prototype.traverse=function(t){for(var r=this.Kids(),n=0,i=r.size();n<i;n++){var o=r.get(n),a=this.context.lookup(o);a instanceof e&&a.traverse(t),t(a,o)}},e.prototype.insertLeafKid=function(t,e){var r=this.Kids();this.ascend((function(t){var e=t.Count().asNumber()+1;t.set(Oe.of("Count"),ge.of(e))})),r.insert(t,e)},e.prototype.removeKid=function(t){var e=this.Kids();e.lookup(t)instanceof Ze&&this.ascend((function(t){var e=t.Count().asNumber()-1;t.set(Oe.of("Count"),ge.of(e))})),e.remove(t)},e.withContext=function(t,r){var n=new Map;return n.set(Oe.of("Type"),Oe.of("Pages")),n.set(Oe.of("Kids"),t.obj([])),n.set(Oe.of("Count"),t.obj(0)),r&&n.set(Oe.of("Parent"),r),new e(n,t)},e.fromMapWithContext=function(t,r){return new e(t,r)},e}(Ae);const ui=si;var ci=new Uint8Array(256);ci[fe.Zero]=1,ci[fe.One]=1,ci[fe.Two]=1,ci[fe.Three]=1,ci[fe.Four]=1,ci[fe.Five]=1,ci[fe.Six]=1,ci[fe.Seven]=1,ci[fe.Eight]=1,ci[fe.Nine]=1;var li=new Uint8Array(256);li[fe.Period]=1,li[fe.Plus]=1,li[fe.Minus]=1;for(var hi=new Uint8Array(256),fi=0;fi<256;fi++)hi[fi]=ci[fi]||li[fi]?1:0;var di=fe.Newline,pi=fe.CarriageReturn,gi=function(){function t(t,e){void 0===e&&(e=!1),this.bytes=t,this.capNumbers=e}return t.prototype.parseRawInt=function(){for(var t="";!this.bytes.done();){var e=this.bytes.peek();if(!ci[e])break;t+=A(this.bytes.next())}var r=Number(t);if(!t||!isFinite(r))throw new re(this.bytes.position(),t);return r},t.prototype.parseRawNumber=function(){for(var t="";!this.bytes.done();){var e=this.bytes.peek();if(!hi[e])break;if(t+=A(this.bytes.next()),e===fe.Period)break}for(;!this.bytes.done()&&(e=this.bytes.peek(),ci[e]);)t+=A(this.bytes.next());var r=Number(t);if(!t||!isFinite(r))throw new re(this.bytes.position(),t);if(r>Number.MAX_SAFE_INTEGER){if(this.capNumbers){var n="Parsed number that is too large for some PDF readers: "+t+", using Number.MAX_SAFE_INTEGER instead.";return console.warn(n),Number.MAX_SAFE_INTEGER}n="Parsed number that is too large for some PDF readers: "+t+", not capping.",console.warn(n)}return r},t.prototype.skipWhitespace=function(){for(;!this.bytes.done()&&ke[this.bytes.peek()];)this.bytes.next()},t.prototype.skipLine=function(){for(;!this.bytes.done();){var t=this.bytes.peek();if(t===di||t===pi)return;this.bytes.next()}},t.prototype.skipComment=function(){if(this.bytes.peek()!==fe.Percent)return!1;for(;!this.bytes.done();){var t=this.bytes.peek();if(t===di||t===pi)return!0;this.bytes.next()}return!0},t.prototype.skipWhitespaceAndComments=function(){for(this.skipWhitespace();this.skipComment();)this.skipWhitespace()},t.prototype.matchKeyword=function(t){for(var e=this.bytes.offset(),r=0,n=t.length;r<n;r++)if(this.bytes.done()||this.bytes.next()!==t[r])return this.bytes.moveTo(e),!1;return!0},t}();const vi=gi,mi=function(){function t(t){this.idx=0,this.line=0,this.column=0,this.bytes=t,this.length=this.bytes.length}return t.prototype.moveTo=function(t){this.idx=t},t.prototype.next=function(){var t=this.bytes[this.idx++];return t===fe.Newline?(this.line+=1,this.column=0):this.column+=1,t},t.prototype.assertNext=function(t){if(this.peek()!==t)throw new ie(this.position(),t,this.peek());return this.next()},t.prototype.peek=function(){return this.bytes[this.idx]},t.prototype.peekAhead=function(t){return this.bytes[this.idx+t]},t.prototype.peekAt=function(t){return this.bytes[t]},t.prototype.done=function(){return this.idx>=this.length},t.prototype.offset=function(){return this.idx},t.prototype.slice=function(t,e){return this.bytes.slice(t,e)},t.prototype.position=function(){return{line:this.line,column:this.column,offset:this.idx}},t.of=function(e){return new t(e)},t.fromPDFRawStream=function(e){return t.of(sn(e).decode())},t}();var yi=fe.Space,bi=fe.CarriageReturn,wi=fe.Newline,xi=[fe.s,fe.t,fe.r,fe.e,fe.a,fe.m],Ai=[fe.e,fe.n,fe.d,fe.s,fe.t,fe.r,fe.e,fe.a,fe.m],Ci={header:[fe.Percent,fe.P,fe.D,fe.F,fe.Dash],eof:[fe.Percent,fe.Percent,fe.E,fe.O,fe.F],obj:[fe.o,fe.b,fe.j],endobj:[fe.e,fe.n,fe.d,fe.o,fe.b,fe.j],xref:[fe.x,fe.r,fe.e,fe.f],trailer:[fe.t,fe.r,fe.a,fe.i,fe.l,fe.e,fe.r],startxref:[fe.s,fe.t,fe.a,fe.r,fe.t,fe.x,fe.r,fe.e,fe.f],true:[fe.t,fe.r,fe.u,fe.e],false:[fe.f,fe.a,fe.l,fe.s,fe.e],null:[fe.n,fe.u,fe.l,fe.l],stream:xi,streamEOF1:f(xi,[yi,bi,wi]),streamEOF2:f(xi,[bi,wi]),streamEOF3:f(xi,[bi]),streamEOF4:f(xi,[wi]),endstream:Ai,EOF1endstream:f([bi,wi],Ai),EOF2endstream:f([bi],Ai),EOF3endstream:f([wi],Ai)};const ki=function(t){function e(e,r,n){void 0===n&&(n=!1);var i=t.call(this,e,n)||this;return i.context=r,i}return u(e,t),e.prototype.parseObject=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(Ci.true))return be.True;if(this.matchKeyword(Ci.false))return be.False;if(this.matchKeyword(Ci.null))return we;var t=this.bytes.peek();if(t===fe.LessThan&&this.bytes.peekAhead(1)===fe.LessThan)return this.parseDictOrStream();if(t===fe.LessThan)return this.parseHexString();if(t===fe.LeftParen)return this.parseString();if(t===fe.ForwardSlash)return this.parseName();if(t===fe.LeftSquareBracket)return this.parseArray();if(hi[t])return this.parseNumberOrRef();throw new oe(this.bytes.position(),t)},e.prototype.parseNumberOrRef=function(){var t=this.parseRawNumber();this.skipWhitespaceAndComments();var e=this.bytes.offset();if(ci[this.bytes.peek()]){var r=this.parseRawNumber();if(this.skipWhitespaceAndComments(),this.bytes.peek()===fe.R)return this.bytes.assertNext(fe.R),Ie.of(t,r)}return this.bytes.moveTo(e),ge.of(t)},e.prototype.parseHexString=function(){var t="";for(this.bytes.assertNext(fe.LessThan);!this.bytes.done()&&this.bytes.peek()!==fe.GreaterThan;)t+=A(this.bytes.next());return this.bytes.assertNext(fe.GreaterThan),dr.of(t)},e.prototype.parseString=function(){for(var t=0,e=!1,r="";!this.bytes.done();){var n=this.bytes.next();if(r+=A(n),e||(n===fe.LeftParen&&(t+=1),n===fe.RightParen&&(t-=1)),n===fe.BackSlash?e=!e:e&&(e=!1),0===t)return wr.of(r.substring(1,r.length-1))}throw new ue(this.bytes.position())},e.prototype.parseName=function(){this.bytes.assertNext(fe.ForwardSlash);for(var t="";!this.bytes.done();){var e=this.bytes.peek();if(ke[e]||Ce[e])break;t+=A(e),this.bytes.next()}return Oe.of(t)},e.prototype.parseArray=function(){this.bytes.assertNext(fe.LeftSquareBracket),this.skipWhitespaceAndComments();for(var t=me.withContext(this.context);this.bytes.peek()!==fe.RightSquareBracket;){var e=this.parseObject();t.push(e),this.skipWhitespaceAndComments()}return this.bytes.assertNext(fe.RightSquareBracket),t},e.prototype.parseDict=function(){this.bytes.assertNext(fe.LessThan),this.bytes.assertNext(fe.LessThan),this.skipWhitespaceAndComments();for(var t=new Map;!this.bytes.done()&&this.bytes.peek()!==fe.GreaterThan&&this.bytes.peekAhead(1)!==fe.GreaterThan;){var e=this.parseName(),r=this.parseObject();t.set(e,r),this.skipWhitespaceAndComments()}this.skipWhitespaceAndComments(),this.bytes.assertNext(fe.GreaterThan),this.bytes.assertNext(fe.GreaterThan);var n=t.get(Oe.of("Type"));return n===Oe.of("Catalog")?ai.fromMapWithContext(t,this.context):n===Oe.of("Pages")?ui.fromMapWithContext(t,this.context):n===Oe.of("Page")?Ze.fromMapWithContext(t,this.context):Ae.fromMapWithContext(t,this.context)},e.prototype.parseDictOrStream=function(){var t=this.bytes.position(),e=this.parseDict();if(this.skipWhitespaceAndComments(),!(this.matchKeyword(Ci.streamEOF1)||this.matchKeyword(Ci.streamEOF2)||this.matchKeyword(Ci.streamEOF3)||this.matchKeyword(Ci.streamEOF4)||this.matchKeyword(Ci.stream)))return e;var r,n=this.bytes.offset(),i=e.get(Oe.of("Length"));i instanceof ge?(r=n+i.asNumber(),this.bytes.moveTo(r),this.skipWhitespaceAndComments(),this.matchKeyword(Ci.endstream)||(this.bytes.moveTo(n),r=this.findEndOfStreamFallback(t))):r=this.findEndOfStreamFallback(t);var o=this.bytes.slice(n,r);return Pe.of(e,o)},e.prototype.findEndOfStreamFallback=function(t){for(var e=1,r=this.bytes.offset();!this.bytes.done()&&(r=this.bytes.offset(),this.matchKeyword(Ci.stream)?e+=1:this.matchKeyword(Ci.EOF1endstream)||this.matchKeyword(Ci.EOF2endstream)||this.matchKeyword(Ci.EOF3endstream)||this.matchKeyword(Ci.endstream)?e-=1:this.bytes.next(),0!==e););if(0!==e)throw new se(t);return r},e.forBytes=function(t,r,n){return new e(mi.of(t),r,n)},e.forByteStream=function(t,r,n){return void 0===n&&(n=!1),new e(t,r,n)},e}(vi);var Si=function(t){function e(e,r){var n=t.call(this,mi.fromPDFRawStream(e),e.dict.context)||this,i=e.dict;return n.alreadyParsed=!1,n.shouldWaitForTick=r||function(){return!1},n.firstOffset=i.lookup(Oe.of("First"),ge).asNumber(),n.objectCount=i.lookup(Oe.of("N"),ge).asNumber(),n}return u(e,t),e.prototype.parseIntoContext=function(){return l(this,void 0,void 0,(function(){var t,e,r,n,i,o,a,s;return h(this,(function(u){switch(u.label){case 0:if(this.alreadyParsed)throw new Lt("PDFObjectStreamParser","parseIntoContext");this.alreadyParsed=!0,t=this.parseOffsetsAndObjectNumbers(),e=0,r=t.length,u.label=1;case 1:return e<r?(n=t[e],i=n.objectNumber,o=n.offset,this.bytes.moveTo(this.firstOffset+o),a=this.parseObject(),s=Ie.of(i,0),this.context.assign(s,a),this.shouldWaitForTick()?[4,q()]:[3,3]):[3,4];case 2:u.sent(),u.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},e.prototype.parseOffsetsAndObjectNumbers=function(){for(var t=[],e=0,r=this.objectCount;e<r;e++){this.skipWhitespaceAndComments();var n=this.parseRawInt();this.skipWhitespaceAndComments();var i=this.parseRawInt();t.push({objectNumber:n,offset:i})}return t},e.forStream=function(t,r){return new e(t,r)},e}(ki);const Fi=Si;var Bi=function(){function t(t){this.alreadyParsed=!1,this.dict=t.dict,this.bytes=mi.fromPDFRawStream(t),this.context=this.dict.context;var e=this.dict.lookup(Oe.of("Size"),ge),r=this.dict.lookup(Oe.of("Index"));if(r instanceof me){this.subsections=[];for(var n=0,i=r.size();n<i;n+=2){var o=r.lookup(n+0,ge).asNumber(),a=r.lookup(n+1,ge).asNumber();this.subsections.push({firstObjectNumber:o,length:a})}}else this.subsections=[{firstObjectNumber:0,length:e.asNumber()}];var s=this.dict.lookup(Oe.of("W"),me);for(this.byteWidths=[-1,-1,-1],n=0,i=s.size();n<i;n++)this.byteWidths[n]=s.lookup(n,ge).asNumber()}return t.prototype.parseIntoContext=function(){if(this.alreadyParsed)throw new Lt("PDFXRefStreamParser","parseIntoContext");return this.alreadyParsed=!0,this.context.trailerInfo={Root:this.dict.get(Oe.of("Root")),Encrypt:this.dict.get(Oe.of("Encrypt")),Info:this.dict.get(Oe.of("Info")),ID:this.dict.get(Oe.of("ID"))},this.parseEntries()},t.prototype.parseEntries=function(){for(var t=[],e=this.byteWidths,r=e[0],n=e[1],i=e[2],o=0,a=this.subsections.length;o<a;o++)for(var s=this.subsections[o],u=s.firstObjectNumber,c=s.length,l=0;l<c;l++){for(var h=0,f=0,d=r;f<d;f++)h=h<<8|this.bytes.next();var p=0;for(f=0,d=n;f<d;f++)p=p<<8|this.bytes.next();var g=0;for(f=0,d=i;f<d;f++)g=g<<8|this.bytes.next();0===r&&(h=1);var v=u+l,m={ref:Ie.of(v,g),offset:p,deleted:0===h,inObjectStream:2===h};t.push(m)}return t},t.forStream=function(e){return new t(e)},t}();const Ei=Bi;var Ti=function(t){function e(e,r,n,i){void 0===r&&(r=1/0),void 0===n&&(n=!1),void 0===i&&(i=!1);var o=t.call(this,mi.of(e),He.create(),i)||this;return o.alreadyParsed=!1,o.parsedObjects=0,o.shouldWaitForTick=function(){return o.parsedObjects+=1,o.parsedObjects%o.objectsPerTick==0},o.objectsPerTick=r,o.throwOnInvalidObject=n,o}return u(e,t),e.prototype.parseDocument=function(){return l(this,void 0,void 0,(function(){var t,e;return h(this,(function(r){switch(r.label){case 0:if(this.alreadyParsed)throw new Lt("PDFParser","parseDocument");this.alreadyParsed=!0,this.context.header=this.parseHeader(),r.label=1;case 1:return this.bytes.done()?[3,3]:[4,this.parseDocumentSection()];case 2:if(r.sent(),(e=this.bytes.offset())===t)throw new ce(this.bytes.position());return t=e,[3,1];case 3:return this.maybeRecoverRoot(),this.context.lookup(Ie.of(0))&&(console.warn("Removing parsed object: 0 0 R"),this.context.delete(Ie.of(0))),[2,this.context]}}))}))},e.prototype.maybeRecoverRoot=function(){var t=function(t){return t instanceof Ae&&t.lookup(Oe.of("Type"))===Oe.of("Catalog")};if(!t(this.context.lookup(this.context.trailerInfo.Root)))for(var e=this.context.enumerateIndirectObjects(),r=0,n=e.length;r<n;r++){var i=e[r],o=i[0];t(i[1])&&(this.context.trailerInfo.Root=o)}},e.prototype.parseHeader=function(){for(;!this.bytes.done();){if(this.matchKeyword(Ci.header)){var t=this.parseRawInt();this.bytes.assertNext(fe.Period);var e=this.parseRawInt(),r=de.forVersion(t,e);return this.skipBinaryHeaderComment(),r}this.bytes.next()}throw new le(this.bytes.position())},e.prototype.parseIndirectObjectHeader=function(){this.skipWhitespaceAndComments();var t=this.parseRawInt();this.skipWhitespaceAndComments();var e=this.parseRawInt();if(this.skipWhitespaceAndComments(),!this.matchKeyword(Ci.obj))throw new he(this.bytes.position(),Ci.obj);return Ie.of(t,e)},e.prototype.matchIndirectObjectHeader=function(){var t=this.bytes.offset();try{return this.parseIndirectObjectHeader(),!0}catch(e){return this.bytes.moveTo(t),!1}},e.prototype.parseIndirectObject=function(){return l(this,void 0,void 0,(function(){var t,e;return h(this,(function(r){switch(r.label){case 0:return t=this.parseIndirectObjectHeader(),this.skipWhitespaceAndComments(),e=this.parseObject(),this.skipWhitespaceAndComments(),this.matchKeyword(Ci.endobj),e instanceof Pe&&e.dict.lookup(Oe.of("Type"))===Oe.of("ObjStm")?[4,Fi.forStream(e,this.shouldWaitForTick).parseIntoContext()]:[3,2];case 1:return r.sent(),[3,3];case 2:e instanceof Pe&&e.dict.lookup(Oe.of("Type"))===Oe.of("XRef")?Ei.forStream(e).parseIntoContext():this.context.assign(t,e),r.label=3;case 3:return[2,t]}}))}))},e.prototype.tryToParseInvalidIndirectObject=function(){var t=this.bytes.position(),e="Trying to parse invalid object: "+JSON.stringify(t)+")";if(this.throwOnInvalidObject)throw new Error(e);console.warn(e);var r=this.parseIndirectObjectHeader();console.warn("Invalid object ref: "+r),this.skipWhitespaceAndComments();for(var n=this.bytes.offset(),i=!0;!this.bytes.done()&&(this.matchKeyword(Ci.endobj)&&(i=!1),i);)this.bytes.next();if(i)throw new ae(t);var o=this.bytes.offset()-Ci.endobj.length,a=ar.of(this.bytes.slice(n,o));return this.context.assign(r,a),r},e.prototype.parseIndirectObjects=function(){return l(this,void 0,void 0,(function(){var t;return h(this,(function(e){switch(e.label){case 0:this.skipWhitespaceAndComments(),e.label=1;case 1:if(this.bytes.done()||!ci[this.bytes.peek()])return[3,8];t=this.bytes.offset(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,this.parseIndirectObject()];case 3:return e.sent(),[3,5];case 4:return e.sent(),this.bytes.moveTo(t),this.tryToParseInvalidIndirectObject(),[3,5];case 5:return this.skipWhitespaceAndComments(),this.skipJibberish(),this.shouldWaitForTick()?[4,q()]:[3,7];case 6:e.sent(),e.label=7;case 7:return[3,1];case 8:return[2]}}))}))},e.prototype.maybeParseCrossRefSection=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(Ci.xref)){this.skipWhitespaceAndComments();for(var t=-1,e=_e.createEmpty();!this.bytes.done()&&ci[this.bytes.peek()];){var r=this.parseRawInt();this.skipWhitespaceAndComments();var n=this.parseRawInt();this.skipWhitespaceAndComments();var i=this.bytes.peek();if(i===fe.n||i===fe.f){var o=Ie.of(t,n);this.bytes.next()===fe.n?e.addEntry(o,r):e.addDeletedEntry(o,r),t+=1}else t=r;this.skipWhitespaceAndComments()}return e}},e.prototype.maybeParseTrailerDict=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(Ci.trailer)){this.skipWhitespaceAndComments();var t=this.parseDict(),e=this.context;e.trailerInfo={Root:t.get(Oe.of("Root"))||e.trailerInfo.Root,Encrypt:t.get(Oe.of("Encrypt"))||e.trailerInfo.Encrypt,Info:t.get(Oe.of("Info"))||e.trailerInfo.Info,ID:t.get(Oe.of("ID"))||e.trailerInfo.ID}}},e.prototype.maybeParseTrailer=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(Ci.startxref)){this.skipWhitespaceAndComments();var t=this.parseRawInt();return this.skipWhitespace(),this.matchKeyword(Ci.eof),this.skipWhitespaceAndComments(),this.matchKeyword(Ci.eof),this.skipWhitespaceAndComments(),$e.forLastCrossRefSectionOffset(t)}},e.prototype.parseDocumentSection=function(){return l(this,void 0,void 0,(function(){return h(this,(function(t){switch(t.label){case 0:return[4,this.parseIndirectObjects()];case 1:return t.sent(),this.maybeParseCrossRefSection(),this.maybeParseTrailerDict(),this.maybeParseTrailer(),this.skipJibberish(),[2]}}))}))},e.prototype.skipJibberish=function(){for(this.skipWhitespaceAndComments();!this.bytes.done();){var t=this.bytes.offset(),e=this.bytes.peek();if(e>=fe.Space&&e<=fe.Tilde&&(this.matchKeyword(Ci.xref)||this.matchKeyword(Ci.trailer)||this.matchKeyword(Ci.startxref)||this.matchIndirectObjectHeader())){this.bytes.moveTo(t);break}this.bytes.next()}},e.prototype.skipBinaryHeaderComment=function(){this.skipWhitespaceAndComments();try{var t=this.bytes.offset();this.parseIndirectObjectHeader(),this.bytes.moveTo(t)}catch(t){this.bytes.next(),this.skipWhitespaceAndComments()}},e.forBytesWithOptions=function(t,r,n,i){return new e(t,r,n,i)},e}(ki);const Oi=Ti;var zi,Ri=function(t){return 1<<t};!function(t){t[t.Invisible=Ri(0)]="Invisible",t[t.Hidden=Ri(1)]="Hidden",t[t.Print=Ri(2)]="Print",t[t.NoZoom=Ri(3)]="NoZoom",t[t.NoRotate=Ri(4)]="NoRotate",t[t.NoView=Ri(5)]="NoView",t[t.ReadOnly=Ri(6)]="ReadOnly",t[t.Locked=Ri(7)]="Locked",t[t.ToggleNoView=Ri(8)]="ToggleNoView",t[t.LockedContents=Ri(9)]="LockedContents"}(zi||(zi={}));var Pi,Di=function(t){return t instanceof Oe?t:Oe.of(t)},Ni=function(t){return t instanceof ge?t:ge.of(t)},Ii=function(t){return t instanceof ge?t.asNumber():t};!function(t){t.Degrees="degrees",t.Radians="radians"}(Pi||(Pi={}));var ji,Ui=function(t){return Ft(t,"degreeAngle",["number"]),{type:Pi.Degrees,angle:t}},Mi=Pi.Radians,Wi=Pi.Degrees,Vi=function(t){return t*Math.PI/180},qi=function(t){return t.type===Mi?t.angle:t.type===Wi?Vi(t.angle):rt("Invalid rotation: "+JSON.stringify(t))},Li=function(t){return t.type===Mi?180*t.angle/Math.PI:t.type===Wi?t.angle:rt("Invalid rotation: "+JSON.stringify(t))},Gi=function(t){void 0===t&&(t=0);var e=t/90%4;return 0===e?0:1===e?90:2===e?180:3===e?270:0},Ki=function(t,e){void 0===e&&(e=0);var r=Gi(e);return 90===r||270===r?{width:t.height,height:t.width}:{width:t.width,height:t.height}},Hi=function(){return Ue.of(We.ClipNonZero)},Xi=Math.cos,Zi=Math.sin,Yi=Math.tan,Ji=function(t,e,r,n,i,o){return Ue.of(We.ConcatTransformationMatrix,[Ni(t),Ni(e),Ni(r),Ni(n),Ni(i),Ni(o)])},Qi=function(t,e){return Ji(1,0,0,1,t,e)},_i=function(t,e){return Ji(t,0,0,e,0,0)},$i=function(t){return Ji(Xi(Ii(t)),Zi(Ii(t)),-Zi(Ii(t)),Xi(Ii(t)),0,0)},to=function(t){return $i(Vi(Ii(t)))},eo=function(t,e){return Ji(1,Yi(Ii(t)),Yi(Ii(e)),1,0,0)},ro=function(t,e){return Ue.of(We.SetLineDashPattern,["["+t.map(Ni).join(" ")+"]",Ni(e)])};!function(t){t[t.Butt=0]="Butt",t[t.Round=1]="Round",t[t.Projecting=2]="Projecting"}(ji||(ji={}));var no,io=function(t){return Ue.of(We.SetLineCapStyle,[Ni(t)])};!function(t){t[t.Miter=0]="Miter",t[t.Round=1]="Round",t[t.Bevel=2]="Bevel"}(no||(no={}));var oo,ao=function(t){return Ue.of(We.SetGraphicsStateParams,[Di(t)])},so=function(){return Ue.of(We.PushGraphicsState)},uo=function(){return Ue.of(We.PopGraphicsState)},co=function(t){return Ue.of(We.SetLineWidth,[Ni(t)])},lo=function(t,e,r,n,i,o){return Ue.of(We.AppendBezierCurve,[Ni(t),Ni(e),Ni(r),Ni(n),Ni(i),Ni(o)])},ho=function(t,e,r,n){return Ue.of(We.CurveToReplicateInitialPoint,[Ni(t),Ni(e),Ni(r),Ni(n)])},fo=function(){return Ue.of(We.ClosePath)},po=function(t,e){return Ue.of(We.MoveTo,[Ni(t),Ni(e)])},go=function(t,e){return Ue.of(We.LineTo,[Ni(t),Ni(e)])},vo=function(){return Ue.of(We.StrokePath)},mo=function(){return Ue.of(We.FillNonZero)},yo=function(){return Ue.of(We.FillNonZeroAndStroke)},bo=function(){return Ue.of(We.EndPath)},wo=function(t){return Ue.of(We.ShowText,[t])},xo=function(){return Ue.of(We.BeginText)},Ao=function(){return Ue.of(We.EndText)},Co=function(t,e){return Ue.of(We.SetFontAndSize,[Di(t),Ni(e)])};!function(t){t[t.Fill=0]="Fill",t[t.Outline=1]="Outline",t[t.FillAndOutline=2]="FillAndOutline",t[t.Invisible=3]="Invisible",t[t.FillAndClip=4]="FillAndClip",t[t.OutlineAndClip=5]="OutlineAndClip",t[t.FillAndOutlineAndClip=6]="FillAndOutlineAndClip",t[t.Clip=7]="Clip"}(oo||(oo={}));var ko,So=function(t,e,r,n,i){return o=Xi(Ii(t)),a=Zi(Ii(t))+Yi(Ii(e)),s=-Zi(Ii(t))+Yi(Ii(r)),u=Xi(Ii(t)),c=n,l=i,Ue.of(We.SetTextMatrix,[Ni(o),Ni(a),Ni(s),Ni(u),Ni(c),Ni(l)]);var o,a,s,u,c,l},Fo=function(t){return Ue.of(We.DrawObject,[Di(t)])},Bo=function(t){return Ue.of(We.BeginMarkedContent,[Di(t)])},Eo=function(){return Ue.of(We.EndMarkedContent)};!function(t){t.Grayscale="Grayscale",t.RGB="RGB",t.CMYK="CMYK"}(ko||(ko={}));var To,Oo=function(t){return Tt(t,"gray",0,1),{type:ko.Grayscale,gray:t}},zo=function(t,e,r){return Tt(t,"red",0,1),Tt(e,"green",0,1),Tt(r,"blue",0,1),{type:ko.RGB,red:t,green:e,blue:r}},Ro=function(t,e,r,n){return Tt(t,"cyan",0,1),Tt(e,"magenta",0,1),Tt(r,"yellow",0,1),Tt(n,"key",0,1),{type:ko.CMYK,cyan:t,magenta:e,yellow:r,key:n}},Po=ko.Grayscale,Do=ko.RGB,No=ko.CMYK,Io=function(t){return t.type===Po?(u=t.gray,Ue.of(We.NonStrokingColorGray,[Ni(u)])):t.type===Do?(o=t.red,a=t.green,s=t.blue,Ue.of(We.NonStrokingColorRgb,[Ni(o),Ni(a),Ni(s)])):t.type===No?(e=t.cyan,r=t.magenta,n=t.yellow,i=t.key,Ue.of(We.NonStrokingColorCmyk,[Ni(e),Ni(r),Ni(n),Ni(i)])):rt("Invalid color: "+JSON.stringify(t));var e,r,n,i,o,a,s,u},jo=function(t){return t.type===Po?(u=t.gray,Ue.of(We.StrokingColorGray,[Ni(u)])):t.type===Do?(o=t.red,a=t.green,s=t.blue,Ue.of(We.StrokingColorRgb,[Ni(o),Ni(a),Ni(s)])):t.type===No?(e=t.cyan,r=t.magenta,n=t.yellow,i=t.key,Ue.of(We.StrokingColorCmyk,[Ni(e),Ni(r),Ni(n),Ni(i)])):rt("Invalid color: "+JSON.stringify(t));var e,r,n,i,o,a,s,u},Uo=function(t,e){return void 0===e&&(e=1),1===(null==t?void 0:t.length)?Oo(t[0]*e):3===(null==t?void 0:t.length)?zo(t[0]*e,t[1]*e,t[2]*e):4===(null==t?void 0:t.length)?Ro(t[0]*e,t[1]*e,t[2]*e,t[3]*e):void 0},Mo=function(t){return t.type===Po?[t.gray]:t.type===Do?[t.red,t.green,t.blue]:t.type===No?[t.cyan,t.magenta,t.yellow,t.key]:rt("Invalid color: "+JSON.stringify(t))},Wo=0,Vo=0,qo=0,Lo=0,Go=0,Ko=0,Ho=new Map([["A",7],["a",7],["C",6],["c",6],["H",1],["h",1],["L",2],["l",2],["M",2],["m",2],["Q",4],["q",4],["S",4],["s",4],["T",2],["t",2],["V",1],["v",1],["Z",0],["z",0]]),Xo={M:function(t){return Wo=t[0],Vo=t[1],qo=Lo=null,Go=Wo,Ko=Vo,po(Wo,Vo)},m:function(t){return Wo+=t[0],Vo+=t[1],qo=Lo=null,Go=Wo,Ko=Vo,po(Wo,Vo)},C:function(t){return Wo=t[4],Vo=t[5],qo=t[2],Lo=t[3],lo(t[0],t[1],t[2],t[3],t[4],t[5])},c:function(t){var e=lo(t[0]+Wo,t[1]+Vo,t[2]+Wo,t[3]+Vo,t[4]+Wo,t[5]+Vo);return qo=Wo+t[2],Lo=Vo+t[3],Wo+=t[4],Vo+=t[5],e},S:function(t){null!==qo&&null!==Lo||(qo=Wo,Lo=Vo);var e=lo(Wo-(qo-Wo),Vo-(Lo-Vo),t[0],t[1],t[2],t[3]);return qo=t[0],Lo=t[1],Wo=t[2],Vo=t[3],e},s:function(t){null!==qo&&null!==Lo||(qo=Wo,Lo=Vo);var e=lo(Wo-(qo-Wo),Vo-(Lo-Vo),Wo+t[0],Vo+t[1],Wo+t[2],Vo+t[3]);return qo=Wo+t[0],Lo=Vo+t[1],Wo+=t[2],Vo+=t[3],e},Q:function(t){return qo=t[0],Lo=t[1],Wo=t[2],Vo=t[3],ho(t[0],t[1],Wo,Vo)},q:function(t){var e=ho(t[0]+Wo,t[1]+Vo,t[2]+Wo,t[3]+Vo);return qo=Wo+t[0],Lo=Vo+t[1],Wo+=t[2],Vo+=t[3],e},T:function(t){null===qo||null===Lo?(qo=Wo,Lo=Vo):(qo=Wo-(qo-Wo),Lo=Vo-(Lo-Vo));var e=ho(qo,Lo,t[0],t[1]);return qo=Wo-(qo-Wo),Lo=Vo-(Lo-Vo),Wo=t[0],Vo=t[1],e},t:function(t){null===qo||null===Lo?(qo=Wo,Lo=Vo):(qo=Wo-(qo-Wo),Lo=Vo-(Lo-Vo));var e=ho(qo,Lo,Wo+t[0],Vo+t[1]);return Wo+=t[0],Vo+=t[1],e},A:function(t){var e=Zo(Wo,Vo,t);return Wo=t[5],Vo=t[6],e},a:function(t){t[5]+=Wo,t[6]+=Vo;var e=Zo(Wo,Vo,t);return Wo=t[5],Vo=t[6],e},L:function(t){return Wo=t[0],Vo=t[1],qo=Lo=null,go(Wo,Vo)},l:function(t){return Wo+=t[0],Vo+=t[1],qo=Lo=null,go(Wo,Vo)},H:function(t){return Wo=t[0],qo=Lo=null,go(Wo,Vo)},h:function(t){return Wo+=t[0],qo=Lo=null,go(Wo,Vo)},V:function(t){return Vo=t[0],qo=Lo=null,go(Wo,Vo)},v:function(t){return Vo+=t[0],qo=Lo=null,go(Wo,Vo)},Z:function(){var t=fo();return Wo=Go,Vo=Ko,t},z:function(){var t=fo();return Wo=Go,Vo=Ko,t}},Zo=function(t,e,r){for(var n=r[0],i=r[1],o=r[2],a=r[3],s=r[4],u=r[5],c=r[6],l=[],h=0,f=Yo(u,c,n,i,a,s,o,t,e);h<f.length;h++){var d=f[h],p=Jo.apply(void 0,d);l.push(lo.apply(void 0,p))}return l},Yo=function(t,e,r,n,i,o,a,s,u){var c=a*(Math.PI/180),l=Math.sin(c),h=Math.cos(c);r=Math.abs(r),n=Math.abs(n);var f=(qo=h*(s-t)*.5+l*(u-e)*.5)*qo/(r*r)+(Lo=h*(u-e)*.5-l*(s-t)*.5)*Lo/(n*n);f>1&&(r*=f=Math.sqrt(f),n*=f);var d=h/r,p=l/r,g=-l/n,v=h/n,m=d*s+p*u,y=g*s+v*u,b=d*t+p*e,w=g*t+v*e,x=1/((b-m)*(b-m)+(w-y)*(w-y))-.25;x<0&&(x=0);var A=Math.sqrt(x);o===i&&(A=-A);var C=.5*(m+b)-A*(w-y),k=.5*(y+w)+A*(b-m),S=Math.atan2(y-k,m-C),F=Math.atan2(w-k,b-C)-S;F<0&&1===o?F+=2*Math.PI:F>0&&0===o&&(F-=2*Math.PI);for(var B=Math.ceil(Math.abs(F/(.5*Math.PI+.001))),E=[],T=0;T<B;T++){var O=S+T*F/B,z=S+(T+1)*F/B;E[T]=[C,k,O,z,r,n,l,h]}return E},Jo=function(t,e,r,n,i,o,a,s){var u=s*i,c=-a*o,l=a*i,h=s*o,f=.5*(n-r),d=8/3*Math.sin(.5*f)*Math.sin(.5*f)/Math.sin(f),p=t+Math.cos(r)-d*Math.sin(r),g=e+Math.sin(r)+d*Math.cos(r),v=t+Math.cos(n),m=e+Math.sin(n),y=v+d*Math.sin(n),b=m-d*Math.cos(n);return[u*p+c*g,l*p+h*g,u*y+c*b,l*y+h*b,u*v+c*m,l*v+h*m]},Qo=function(t,e){return[so(),e.graphicsState&&ao(e.graphicsState),Qi(e.x,e.y),$i(qi(e.rotate)),_i(e.width,e.height),eo(qi(e.xSkew),qi(e.ySkew)),Fo(t),uo()].filter(Boolean)},_o=function(t){var e,r;return[so(),t.graphicsState&&ao(t.graphicsState),t.color&&Io(t.color),t.borderColor&&jo(t.borderColor),co(t.borderWidth),t.borderLineCap&&io(t.borderLineCap),ro(null!==(e=t.borderDashArray)&&void 0!==e?e:[],null!==(r=t.borderDashPhase)&&void 0!==r?r:0),Qi(t.x,t.y),$i(qi(t.rotate)),eo(qi(t.xSkew),qi(t.ySkew)),po(0,0),go(0,t.height),go(t.width,t.height),go(t.width,0),fo(),t.color&&t.borderWidth?yo():t.color?mo():t.borderColor?vo():fo(),uo()].filter(Boolean)},$o=(Math.sqrt(2)-1)/3*4,ta=function(t){var e,r,n,i,o,a,s,u,c,l,h,d,p,g;return f([so(),t.graphicsState&&ao(t.graphicsState),t.color&&Io(t.color),t.borderColor&&jo(t.borderColor),co(t.borderWidth),t.borderLineCap&&io(t.borderLineCap),ro(null!==(e=t.borderDashArray)&&void 0!==e?e:[],null!==(r=t.borderDashPhase)&&void 0!==r?r:0)],void 0===t.rotate?(i={x:t.x,y:t.y,xScale:t.xScale,yScale:t.yScale},o=Ii(i.x),a=Ii(i.y),s=Ii(i.xScale),u=Ii(i.yScale),c=s*$o,l=u*$o,h=(o-=s)+2*s,d=(a-=u)+2*u,p=o+s,g=a+u,[so(),po(o,g),lo(o,g-l,p-c,a,p,a),lo(p+c,a,h,g-l,h,g),lo(h,g+l,p+c,d,p,d),lo(p-c,d,o,g+l,o,g),uo()]):function(t){var e=Ii(t.x),r=Ii(t.y),n=Ii(t.xScale),i=Ii(t.yScale),o=-n,a=-i,s=n*$o,u=i*$o,c=o+2*n,l=a+2*i,h=o+n,f=a+i;return[Qi(e,r),$i(qi(t.rotate)),po(o,f),lo(o,f-u,h-s,a,h,a),lo(h+s,a,c,f-u,c,f),lo(c,f+u,h+s,l,h,l),lo(h-s,l,o,f+u,o,f)]}({x:t.x,y:t.y,xScale:t.xScale,yScale:t.yScale,rotate:null!==(n=t.rotate)&&void 0!==n?n:Ui(0)}),[t.color&&t.borderWidth?yo():t.color?mo():t.borderColor?vo():fo(),uo()]).filter(Boolean)},ea=function(t){return 0===t.rotation?[Qi(0,0),to(0)]:90===t.rotation?[Qi(t.width,0),to(90)]:180===t.rotation?[Qi(t.width,t.height),to(180)]:270===t.rotation?[Qi(0,t.height),to(270)]:[]},ra=function(t){var e=_o({x:t.x,y:t.y,width:t.width,height:t.height,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:Ui(0),xSkew:Ui(0),ySkew:Ui(0)});if(!t.filled)return e;var r=Ii(t.width),n=Ii(t.height),i=function(t){var e=Ii(t.size);return[so(),t.color&&jo(t.color),co(t.thickness),Qi(t.x,t.y),po(-.675*e,-.07601036269430045*e),go(-.25*e,-.49*e),go(.69*e,.475*e),vo(),uo()].filter(Boolean)}({x:r/2,y:n/2,size:Math.min(r,n)/2,thickness:t.thickness,color:t.markColor});return f([so()],e,i,[uo()])},na=function(t){var e=Ii(t.width),r=Ii(t.height),n=Math.min(e,r)/2,i=ta({x:t.x,y:t.y,xScale:n,yScale:n,color:t.color,borderColor:t.borderColor,borderWidth:t.borderWidth});if(!t.filled)return i;var o=ta({x:t.x,y:t.y,xScale:.45*n,yScale:.45*n,color:t.dotColor,borderColor:void 0,borderWidth:0});return f([so()],i,o,[uo()])},ia=function(t){var e=Ii(t.x),r=Ii(t.y),n=Ii(t.width),i=Ii(t.height),o=_o({x:e,y:r,width:n,height:i,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:Ui(0),xSkew:Ui(0),ySkew:Ui(0)}),a=oa(t.textLines,{color:t.textColor,font:t.font,size:t.fontSize,rotate:Ui(0),xSkew:Ui(0),ySkew:Ui(0)});return f([so()],o,a,[uo()])},oa=function(t,e){for(var r=[xo(),Io(e.color),Co(e.font,e.size)],n=0,i=t.length;n<i;n++){var o=t[n],a=o.encoded,s=o.x,u=o.y;r.push(So(qi(e.rotate),qi(e.xSkew),qi(e.ySkew),s,u),wo(a))}return r.push(Ao()),r},aa=function(t){var e=Ii(t.x),r=Ii(t.y),n=Ii(t.width),i=Ii(t.height),o=Ii(t.borderWidth),a=Ii(t.padding),s=e+o/2+a,u=r+o/2+a,c=n-2*(o/2+a),l=i-2*(o/2+a),h=[po(s,u),go(s,u+l),go(s+c,u+l),go(s+c,u),fo(),Hi(),bo()],d=_o({x:e,y:r,width:n,height:i,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:Ui(0),xSkew:Ui(0),ySkew:Ui(0)}),p=oa(t.textLines,{color:t.textColor,font:t.font,size:t.fontSize,rotate:Ui(0),xSkew:Ui(0),ySkew:Ui(0)}),g=f([Bo("Tx"),so()],p,[uo(),Eo()]);return f([so()],d,h,g,[uo()])},sa=function(t){function e(){return t.call(this,"Input document to `PDFDocument.load` is encrypted. You can use `PDFDocument.load(..., { ignoreEncryption: true })` if you wish to load the document anyways.")||this}return u(e,t),e}(Error),ua=function(t){function e(){return t.call(this,"Input to `PDFDocument.embedFont` was a custom font, but no `fontkit` instance was found. You must register a `fontkit` instance with `PDFDocument.registerFontkit(...)` before embedding custom fonts.")||this}return u(e,t),e}(Error),ca=function(t){function e(){return t.call(this,"A `page` passed to `PDFDocument.addPage` or `PDFDocument.insertPage` was from a different (foreign) PDF document. If you want to copy pages from one PDFDocument to another, you must use `PDFDocument.copyPages(...)` to copy the pages before adding or inserting them.")||this}return u(e,t),e}(Error),la=function(t){function e(){return t.call(this,"PDFDocument has no pages so `PDFDocument.removePage` cannot be called")||this}return u(e,t),e}(Error),ha=function(t){function e(e){var r='PDFDocument has no form field with the name "'+e+'"';return t.call(this,r)||this}return u(e,t),e}(Error),fa=function(t){function e(e,r,n){var i,o,a='Expected field "'+e+'" to be of type '+(null==r?void 0:r.name)+", but it is actually of type "+(null!==(o=null===(i=null==n?void 0:n.constructor)||void 0===i?void 0:i.name)&&void 0!==o?o:n);return t.call(this,a)||this}return u(e,t),e}(Error),da=(function(t){u((function(e){var r='Failed to select check box due to missing onValue: "'+e+'"';return t.call(this,r)||this}),t)}(Error),function(t){function e(e){var r='A field already exists with the specified name: "'+e+'"';return t.call(this,r)||this}return u(e,t),e}(Error)),pa=function(t){function e(e){var r='Field name contains invalid component: "'+e+'"';return t.call(this,r)||this}return u(e,t),e}(Error),ga=(function(t){u((function(e){var r='A non-terminal field already exists with the specified name: "'+e+'"';return t.call(this,r)||this}),t)}(Error),function(t){function e(e){var r="Reading rich text fields is not supported: Attempted to read rich text field: "+e;return t.call(this,r)||this}return u(e,t),e}(Error)),va=function(t){function e(e,r){var n="Failed to layout combed text as lineLength="+e+" is greater than cellCount="+r;return t.call(this,n)||this}return u(e,t),e}(Error),ma=function(t){function e(e,r,n){var i="Attempted to set text with length="+e+" for TextField with maxLength="+r+" and name="+n;return t.call(this,i)||this}return u(e,t),e}(Error),ya=function(t){function e(e,r,n){var i="Attempted to set maxLength="+r+", which is less than "+e+", the length of this field's current value (name="+n+")";return t.call(this,i)||this}return u(e,t),e}(Error);!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(To||(To={}));var ba=function(t){for(var e=t.length;e>0;e--)if(/\s/.test(t[e]))return e},wa=function(t,e,r,n){for(var i,o=t.length;o>0;){var a=t.substring(0,o),s=r.encodeText(a),u=r.widthOfTextAtSize(a,n);if(u<e)return{line:a,encoded:s,width:u,remainder:t.substring(o)||void 0};o=null!==(i=ba(a))&&void 0!==i?i:0}return{line:t,encoded:r.encodeText(t),width:r.widthOfTextAtSize(t,n),remainder:void 0}},xa=function(t,e){var r=e.alignment,n=e.fontSize,i=e.font,o=e.bounds,a=T(F(t));void 0!==n&&0!==n||(n=12);for(var s=i.heightAtSize(n),u=s+.2*s,c=[],l=o.x,h=o.y,f=o.x+o.width,d=o.y+o.height,p=o.y+o.height,g=0,v=a.length;g<v;g++)for(var m=a[g];void 0!==m;){var y=wa(m,o.width,i,n),b=y.line,w=y.encoded,x=y.width,A=y.remainder,C=r===To.Left?o.x:r===To.Center?o.x+o.width/2-x/2:r===To.Right?o.x+o.width-x:o.x;C<l&&(l=C),(p-=u)<h&&(h=p),C+x>f&&(f=C+x),p+s>d&&(d=p+s),c.push({text:b,encoded:w,width:x,height:s,x:C,y:p}),m=null==A?void 0:A.trim()}return{fontSize:n,lineHeight:u,lines:c,bounds:{x:l,y:h,width:f-l,height:d-h}}},Aa=function(t,e){var r=e.alignment,n=e.fontSize,i=e.font,o=e.bounds,a=O(F(t));void 0!==n&&0!==n||(n=function(t,e,r){for(var n=4;n<500;){for(var i=0,o=t.length;i<o;i++){var a=t[i];if(e.widthOfTextAtSize(a,n)>r.width)return n-1}var s=e.heightAtSize(n);if(t.length*(s+.2*s)>Math.abs(r.height))return n-1;n+=1}return n}([a],i,o));var s=i.encodeText(a),u=i.widthOfTextAtSize(a,n),c=i.heightAtSize(n,{descender:!1}),l=r===To.Left?o.x:r===To.Center?o.x+o.width/2-u/2:r===To.Right?o.x+o.width-u:o.x,h=o.y+(o.height/2-c/2);return{fontSize:n,line:{text:a,encoded:s,width:u,height:c,x:l,y:h},bounds:{x:l,y:h,width:u,height:c}}},Ca=function(t){return"normal"in t?t:{normal:t}},ka=/\/([^\0\t\n\f\r\ ]+)[\0\t\n\f\r\ ]+(\d*\.\d+|\d+)[\0\t\n\f\r\ ]+Tf/,Sa=function(t){var e,r,n=null!==(e=t.getDefaultAppearance())&&void 0!==e?e:"",i=null!==(r=D(n,ka).match)&&void 0!==r?r:[],o=Number(i[2]);return isFinite(o)?o:void 0},Fa=/(\d*\.\d+|\d+)[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]+(g|rg|k)/,Ba=function(t){var e,r=null!==(e=t.getDefaultAppearance())&&void 0!==e?e:"",n=D(r,Fa).match,i=null!=n?n:[],o=i[1],a=i[2],s=i[3],u=i[4],c=i[5];return"g"===c&&o?Oo(Number(o)):"rg"===c&&o&&a&&s?zo(Number(o),Number(a),Number(s)):"k"===c&&o&&a&&s&&u?Ro(Number(o),Number(a),Number(s),Number(u)):void 0},Ea=function(t,e,r,n){var i;void 0===n&&(n=0);var o=[Io(e).toString(),Co(null!==(i=null==r?void 0:r.name)&&void 0!==i?i:"dummy__noop",n).toString()].join("\n");t.setDefaultAppearance(o)},Ta=function(t,e){var r,n,i,o=Ba(e),a=Ba(t.acroField),s=e.getRectangle(),u=e.getAppearanceCharacteristics(),l=e.getBorderStyle(),h=null!==(r=null==l?void 0:l.getWidth())&&void 0!==r?r:0,d=Gi(null==u?void 0:u.getRotation()),p=Ki(s,d),g=p.width,v=p.height,m=ea(c(c({},s),{rotation:d})),y=zo(0,0,0),b=null!==(n=Uo(null==u?void 0:u.getBorderColor()))&&void 0!==n?n:y,w=Uo(null==u?void 0:u.getBackgroundColor()),x=Uo(null==u?void 0:u.getBackgroundColor(),.8),A=null!==(i=null!=o?o:a)&&void 0!==i?i:y;Ea(o?e:t.acroField,A);var C={x:0+h/2,y:0+h/2,width:g-h,height:v-h,thickness:1.5,borderWidth:h,borderColor:b,markColor:A};return{normal:{on:f(m,ra(c(c({},C),{color:w,filled:!0}))),off:f(m,ra(c(c({},C),{color:w,filled:!1})))},down:{on:f(m,ra(c(c({},C),{color:x,filled:!0}))),off:f(m,ra(c(c({},C),{color:x,filled:!1})))}}},Oa=function(t,e){var r,n,i,o=Ba(e),a=Ba(t.acroField),s=e.getRectangle(),u=e.getAppearanceCharacteristics(),l=e.getBorderStyle(),h=null!==(r=null==l?void 0:l.getWidth())&&void 0!==r?r:0,d=Gi(null==u?void 0:u.getRotation()),p=Ki(s,d),g=p.width,v=p.height,m=ea(c(c({},s),{rotation:d})),y=zo(0,0,0),b=null!==(n=Uo(null==u?void 0:u.getBorderColor()))&&void 0!==n?n:y,w=Uo(null==u?void 0:u.getBackgroundColor()),x=Uo(null==u?void 0:u.getBackgroundColor(),.8),A=null!==(i=null!=o?o:a)&&void 0!==i?i:y;Ea(o?e:t.acroField,A);var C={x:g/2,y:v/2,width:g-h,height:v-h,borderWidth:h,borderColor:b,dotColor:A};return{normal:{on:f(m,na(c(c({},C),{color:w,filled:!0}))),off:f(m,na(c(c({},C),{color:w,filled:!1})))},down:{on:f(m,na(c(c({},C),{color:x,filled:!0}))),off:f(m,na(c(c({},C),{color:x,filled:!1})))}}},za=function(t,e,r){var n,i,o,a,s,u=Ba(e),l=Ba(t.acroField),h=Sa(e),d=Sa(t.acroField),p=e.getRectangle(),g=e.getAppearanceCharacteristics(),v=e.getBorderStyle(),m=null==g?void 0:g.getCaptions(),y=null!==(n=null==m?void 0:m.normal)&&void 0!==n?n:"",b=null!==(o=null!==(i=null==m?void 0:m.down)&&void 0!==i?i:y)&&void 0!==o?o:"",w=null!==(a=null==v?void 0:v.getWidth())&&void 0!==a?a:0,x=Gi(null==g?void 0:g.getRotation()),A=Ki(p,x),C=A.width,k=A.height,S=ea(c(c({},p),{rotation:x})),F=zo(0,0,0),B=Uo(null==g?void 0:g.getBorderColor()),E=Uo(null==g?void 0:g.getBackgroundColor()),T=Uo(null==g?void 0:g.getBackgroundColor(),.8),O={x:w,y:w,width:C-2*w,height:k-2*w},z=Aa(y,{alignment:To.Center,fontSize:null!=h?h:d,font:r,bounds:O}),R=Aa(b,{alignment:To.Center,fontSize:null!=h?h:d,font:r,bounds:O}),P=Math.min(z.fontSize,R.fontSize),D=null!==(s=null!=u?u:l)&&void 0!==s?s:F;Ea(u||void 0!==h?e:t.acroField,D,r,P);var N={x:0+w/2,y:0+w/2,width:C-w,height:k-w,borderWidth:w,borderColor:B,textColor:D,font:r.name,fontSize:P};return{normal:f(S,ia(c(c({},N),{color:E,textLines:[z.line]}))),down:f(S,ia(c(c({},N),{color:T,textLines:[R.line]})))}},Ra=function(t,e,r){var n,i,o,a,s,u,l=Ba(e),h=Ba(t.acroField),d=Sa(e),p=Sa(t.acroField),g=e.getRectangle(),v=e.getAppearanceCharacteristics(),m=e.getBorderStyle(),y=null!==(n=t.getText())&&void 0!==n?n:"",b=null!==(i=null==m?void 0:m.getWidth())&&void 0!==i?i:0,w=Gi(null==v?void 0:v.getRotation()),x=Ki(g,w),A=x.width,C=x.height,k=ea(c(c({},g),{rotation:w})),S=zo(0,0,0),B=Uo(null==v?void 0:v.getBorderColor()),E=Uo(null==v?void 0:v.getBackgroundColor()),T=t.isCombed()?0:1,R={x:b+T,y:b+T,width:A-2*(b+T),height:C-2*(b+T)};if(t.isMultiline())s=(P=xa(y,{alignment:t.getAlignment(),fontSize:null!=d?d:p,font:r,bounds:R})).lines,u=P.fontSize;else if(t.isCombed()){var P=function(t,e){var r=e.fontSize,n=e.font,i=e.bounds,o=e.cellCount,a=O(F(t));if(a.length>o)throw new va(a.length,o);void 0!==r&&0!==r||(r=function(t,e,r,n){for(var i=r.width/n,o=r.height,a=4,s=function(t){for(var e=[],r=0,n=t.length;r<n;){var i=z(t,r),o=i[0],a=i[1];e.push(o),r+=a}return e}(t);a<500;){for(var u=0,c=s.length;u<c;u++){var l=s[u];if(e.widthOfTextAtSize(l,a)>.75*i)return a-1}if(e.heightAtSize(a,{descender:!1})>o)return a-1;a+=1}return a}(a,n,i,o));for(var s=i.width/o,u=n.heightAtSize(r,{descender:!1}),c=i.y+(i.height/2-u/2),l=[],h=i.x,f=i.y,d=i.x+i.width,p=i.y+i.height,g=0,v=0;g<o;){var m=z(a,v),y=m[0],b=m[1],w=n.encodeText(y),x=n.widthOfTextAtSize(y,r),A=i.x+(s*g+s/2)-x/2;A<h&&(h=A),c<f&&(f=c),A+x>d&&(d=A+x),c+u>p&&(p=c+u),l.push({text:a,encoded:w,width:x,height:u,x:A,y:c}),g+=1,v+=b}return{fontSize:r,cells:l,bounds:{x:h,y:f,width:d-h,height:p-f}}}(y,{fontSize:null!=d?d:p,font:r,bounds:R,cellCount:null!==(o=t.getMaxLength())&&void 0!==o?o:0});s=P.cells,u=P.fontSize}else s=[(P=Aa(y,{alignment:t.getAlignment(),fontSize:null!=d?d:p,font:r,bounds:R})).line],u=P.fontSize;var D=null!==(a=null!=l?l:h)&&void 0!==a?a:S;Ea(l||void 0!==d?e:t.acroField,D,r,u);var N={x:0+b/2,y:0+b/2,width:A-b,height:C-b,borderWidth:null!=b?b:0,borderColor:B,textColor:D,font:r.name,fontSize:u,color:E,textLines:s,padding:T};return f(k,aa(N))},Pa=function(t,e,r){var n,i,o,a=Ba(e),s=Ba(t.acroField),u=Sa(e),l=Sa(t.acroField),h=e.getRectangle(),d=e.getAppearanceCharacteristics(),p=e.getBorderStyle(),g=null!==(n=t.getSelected()[0])&&void 0!==n?n:"",v=null!==(i=null==p?void 0:p.getWidth())&&void 0!==i?i:0,m=Gi(null==d?void 0:d.getRotation()),y=Ki(h,m),b=y.width,w=y.height,x=ea(c(c({},h),{rotation:m})),A=zo(0,0,0),C=Uo(null==d?void 0:d.getBorderColor()),k=Uo(null==d?void 0:d.getBackgroundColor()),S={x:v+1,y:v+1,width:b-2*(v+1),height:w-2*(v+1)},F=Aa(g,{alignment:To.Left,fontSize:null!=u?u:l,font:r,bounds:S}),B=F.line,E=F.fontSize,T=null!==(o=null!=a?a:s)&&void 0!==o?o:A;Ea(a||void 0!==u?e:t.acroField,T,r,E);var O={x:0+v/2,y:0+v/2,width:b-v,height:w-v,borderWidth:null!=v?v:0,borderColor:C,textColor:T,font:r.name,fontSize:E,color:k,textLines:[B],padding:1};return f(x,aa(O))},Da=function(t,e,r){var n,i,o=Ba(e),a=Ba(t.acroField),s=Sa(e),u=Sa(t.acroField),l=e.getRectangle(),h=e.getAppearanceCharacteristics(),d=e.getBorderStyle(),p=null!==(n=null==d?void 0:d.getWidth())&&void 0!==n?n:0,g=Gi(null==h?void 0:h.getRotation()),v=Ki(l,g),m=v.width,y=v.height,b=ea(c(c({},l),{rotation:g})),w=zo(0,0,0),x=Uo(null==h?void 0:h.getBorderColor()),A=Uo(null==h?void 0:h.getBackgroundColor()),C=t.getOptions(),k=t.getSelected();t.isSorted()&&C.sort();for(var S="",F=0,B=C.length;F<B;F++)S+=C[F],F<B-1&&(S+="\n");var E={x:p+1,y:p+1,width:m-2*(p+1),height:y-2*(p+1)},T=xa(S,{alignment:To.Left,fontSize:null!=s?s:u,font:r,bounds:E}),O=T.lines,z=T.fontSize,R=T.lineHeight,P=[];for(F=0,B=O.length;F<B;F++){var D=O[F];k.includes(D.text)&&P.push(F)}var N=zo(.6,193/255,218/255),I=null!==(i=null!=o?o:a)&&void 0!==i?i:w;return Ea(o||void 0!==s?e:t.acroField,I,r,z),f(b,function(t){for(var e=Ii(t.x),r=Ii(t.y),n=Ii(t.width),i=Ii(t.height),o=Ii(t.lineHeight),a=Ii(t.borderWidth),s=Ii(t.padding),u=e+a/2+s,c=r+a/2+s,l=n-2*(a/2+s),h=i-2*(a/2+s),d=[po(u,c),go(u,c+h),go(u+l,c+h),go(u+l,c),fo(),Hi(),bo()],p=_o({x:e,y:r,width:n,height:i,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:Ui(0),xSkew:Ui(0),ySkew:Ui(0)}),g=[],v=0,m=t.selectedLines.length;v<m;v++){var y=t.textLines[t.selectedLines[v]];g.push.apply(g,_o({x:y.x-s,y:y.y-(o-y.height)/2,width:n-a,height:y.height+(o-y.height)/2,borderWidth:0,color:t.selectedColor,borderColor:void 0,rotate:Ui(0),xSkew:Ui(0),ySkew:Ui(0)}))}var b=oa(t.textLines,{color:t.textColor,font:t.font,size:t.fontSize,rotate:Ui(0),xSkew:Ui(0),ySkew:Ui(0)}),w=f([Bo("Tx"),so()],b,[uo(),Eo()]);return f([so()],p,g,d,w,[uo()])}({x:0+p/2,y:0+p/2,width:m-p,height:y-p,borderWidth:null!=p?p:0,borderColor:x,textColor:I,font:r.name,fontSize:z,color:A,textLines:O,lineHeight:R,selectedColor:N,selectedLines:P,padding:1}))};const Na=function(){function t(t,e,r){this.alreadyEmbedded=!1,Ft(t,"ref",[[Ie,"PDFRef"]]),Ft(e,"doc",[[ds,"PDFDocument"]]),Ft(r,"embedder",[[cn,"PDFPageEmbedder"]]),this.ref=t,this.doc=e,this.width=r.width,this.height=r.height,this.embedder=r}return t.prototype.scale=function(t){return Ft(t,"factor",["number"]),{width:this.width*t,height:this.height*t}},t.prototype.size=function(){return this.scale(1)},t.prototype.embed=function(){return l(this,void 0,void 0,(function(){return h(this,(function(t){switch(t.label){case 0:return this.alreadyEmbedded?[3,2]:[4,this.embedder.embedIntoContext(this.doc.context,this.ref)];case 1:t.sent(),this.alreadyEmbedded=!0,t.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}();var Ia=function(){function t(t,e,r){this.modified=!0,Ft(t,"ref",[[Ie,"PDFRef"]]),Ft(e,"doc",[[ds,"PDFDocument"]]),Ft(r,"embedder",[[Ar,"CustomFontEmbedder"],[gr,"StandardFontEmbedder"]]),this.ref=t,this.doc=e,this.name=r.fontName,this.embedder=r}return t.prototype.encodeText=function(t){return Ft(t,"text",["string"]),this.modified=!0,this.embedder.encodeText(t)},t.prototype.widthOfTextAtSize=function(t,e){return Ft(t,"text",["string"]),Ft(e,"size",["number"]),this.embedder.widthOfTextAtSize(t,e)},t.prototype.heightAtSize=function(t,e){var r;return Ft(t,"size",["number"]),Bt(null==e?void 0:e.descender,"options.descender",["boolean"]),this.embedder.heightOfFontAtSize(t,{descender:null===(r=null==e?void 0:e.descender)||void 0===r||r})},t.prototype.sizeAtHeight=function(t){return Ft(t,"height",["number"]),this.embedder.sizeOfFontAtHeight(t)},t.prototype.getCharacterSet=function(){return this.embedder instanceof gr?this.embedder.encoding.supportedCodePoints:this.embedder.font.characterSet},t.prototype.embed=function(){return l(this,void 0,void 0,(function(){return h(this,(function(t){switch(t.label){case 0:return this.modified?[4,this.embedder.embedIntoContext(this.doc.context,this.ref)]:[3,2];case 1:t.sent(),this.modified=!1,t.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}();const ja=Ia;var Ua=function(){function t(t,e,r){this.alreadyEmbedded=!1,Ft(t,"ref",[[Ie,"PDFRef"]]),Ft(e,"doc",[[ds,"PDFDocument"]]),Ft(r,"embedder",[[zr,"JpegEmbedder"],[Mr,"PngEmbedder"]]),this.ref=t,this.doc=e,this.width=r.width,this.height=r.height,this.embedder=r}return t.prototype.scale=function(t){return Ft(t,"factor",["number"]),{width:this.width*t,height:this.height*t}},t.prototype.scaleToFit=function(t,e){Ft(t,"width",["number"]),Ft(e,"height",["number"]);var r=t/this.width,n=e/this.height,i=Math.min(r,n);return this.scale(i)},t.prototype.size=function(){return this.scale(1)},t.prototype.embed=function(){return l(this,void 0,void 0,(function(){return h(this,(function(t){switch(t.label){case 0:return this.alreadyEmbedded?[3,2]:[4,this.embedder.embedIntoContext(this.doc.context,this.ref)];case 1:t.sent(),this.alreadyEmbedded=!0,t.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}();const Ma=Ua;var Wa;!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(Wa||(Wa={}));var Va=function(t){Bt(null==t?void 0:t.x,"options.x",["number"]),Bt(null==t?void 0:t.y,"options.y",["number"]),Bt(null==t?void 0:t.width,"options.width",["number"]),Bt(null==t?void 0:t.height,"options.height",["number"]),Bt(null==t?void 0:t.textColor,"options.textColor",[[Object,"Color"]]),Bt(null==t?void 0:t.backgroundColor,"options.backgroundColor",[[Object,"Color"]]),Bt(null==t?void 0:t.borderColor,"options.borderColor",[[Object,"Color"]]),Bt(null==t?void 0:t.borderWidth,"options.borderWidth",["number"]),Bt(null==t?void 0:t.rotate,"options.rotate",[[Object,"Rotation"]])},qa=function(){function t(t,e,r){Ft(t,"acroField",[[Tn,"PDFAcroTerminal"]]),Ft(e,"ref",[[Ie,"PDFRef"]]),Ft(r,"doc",[[ds,"PDFDocument"]]),this.acroField=t,this.ref=e,this.doc=r}return t.prototype.getName=function(){var t;return null!==(t=this.acroField.getFullyQualifiedName())&&void 0!==t?t:""},t.prototype.isReadOnly=function(){return this.acroField.hasFlag(Dn.ReadOnly)},t.prototype.enableReadOnly=function(){this.acroField.setFlagTo(Dn.ReadOnly,!0)},t.prototype.disableReadOnly=function(){this.acroField.setFlagTo(Dn.ReadOnly,!1)},t.prototype.isRequired=function(){return this.acroField.hasFlag(Dn.Required)},t.prototype.enableRequired=function(){this.acroField.setFlagTo(Dn.Required,!0)},t.prototype.disableRequired=function(){this.acroField.setFlagTo(Dn.Required,!1)},t.prototype.isExported=function(){return!this.acroField.hasFlag(Dn.NoExport)},t.prototype.enableExporting=function(){this.acroField.setFlagTo(Dn.NoExport,!1)},t.prototype.disableExporting=function(){this.acroField.setFlagTo(Dn.NoExport,!0)},t.prototype.needsAppearancesUpdate=function(){throw new Mt(this.constructor.name,"needsAppearancesUpdate")},t.prototype.defaultUpdateAppearances=function(t){throw new Mt(this.constructor.name,"defaultUpdateAppearances")},t.prototype.markAsDirty=function(){this.doc.getForm().markFieldAsDirty(this.ref)},t.prototype.markAsClean=function(){this.doc.getForm().markFieldAsClean(this.ref)},t.prototype.isDirty=function(){return this.doc.getForm().fieldIsDirty(this.ref)},t.prototype.createWidget=function(t){var e,r=t.textColor,n=t.backgroundColor,i=t.borderColor,o=t.borderWidth,a=Li(t.rotate),s=t.caption,u=t.x,c=t.y,l=t.width+o,h=t.height+o,f=Boolean(t.hidden);zt(a,"degreesAngle",90);var d=Bn.create(this.doc.context,this.ref),p=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0);var n=t.x,i=t.y,o=t.width,a=t.height,s=Gi(r),u=e/2;return 0===s?{x:n-u,y:i-u,width:o,height:a}:90===s?{x:n-a+u,y:i-u,width:a,height:o}:180===s?{x:n-o+u,y:i-a+u,width:o,height:a}:270===s?{x:n-u,y:i-o+u,width:a,height:o}:{x:n-u,y:i-u,width:o,height:a}}({x:u,y:c,width:l,height:h},o,a);d.setRectangle(p);var g=d.getOrCreateAppearanceCharacteristics();n&&g.setBackgroundColor(Mo(n)),g.setRotation(a),s&&g.setCaptions({normal:s}),i&&g.setBorderColor(Mo(i));var v=d.getOrCreateBorderStyle();if(void 0!==o&&v.setWidth(o),d.setFlagTo(zi.Print,!0),d.setFlagTo(zi.Hidden,f),d.setFlagTo(zi.Invisible,!1),r){var m=(null!==(e=this.acroField.getDefaultAppearance())&&void 0!==e?e:"")+"\n"+Io(r).toString();this.acroField.setDefaultAppearance(m)}return d},t.prototype.updateWidgetAppearanceWithFont=function(t,e,r){var n=r.normal,i=r.rollover,o=r.down;this.updateWidgetAppearances(t,{normal:this.createAppearanceStream(t,n,e),rollover:i&&this.createAppearanceStream(t,i,e),down:o&&this.createAppearanceStream(t,o,e)})},t.prototype.updateOnOffWidgetAppearance=function(t,e,r){var n=r.normal,i=r.rollover,o=r.down;this.updateWidgetAppearances(t,{normal:this.createAppearanceDict(t,n,e),rollover:i&&this.createAppearanceDict(t,i,e),down:o&&this.createAppearanceDict(t,o,e)})},t.prototype.updateWidgetAppearances=function(t,e){var r=e.normal,n=e.rollover,i=e.down;t.setNormalAppearance(r),n?t.setRolloverAppearance(n):t.removeRolloverAppearance(),i?t.setDownAppearance(i):t.removeDownAppearance()},t.prototype.createAppearanceStream=function(t,e,r){var n,i=this.acroField.dict.context,o=t.getRectangle(),a=o.width,s=o.height,u=r&&{Font:(n={},n[r.name]=r.ref,n)},c=i.formXObject(e,{Resources:u,BBox:i.obj([0,0,a,s]),Matrix:i.obj([1,0,0,1,0,0])});return i.register(c)},t.prototype.createImageAppearanceStream=function(t,e,r){var n,i,o=this.acroField.dict.context,a=t.getRectangle(),s=t.getAppearanceCharacteristics(),u=t.getBorderStyle(),l=null!==(i=null==u?void 0:u.getWidth())&&void 0!==i?i:0,h=Gi(null==s?void 0:s.getRotation()),d=ea(c(c({},a),{rotation:h})),p=Ki(a,h),g=e.scaleToFit(p.width-2*l,p.height-2*l),v={x:l,y:l,width:g.width,height:g.height,rotate:Ui(0),xSkew:Ui(0),ySkew:Ui(0)};r===Wa.Center?(v.x+=(p.width-2*l)/2-g.width/2,v.y+=(p.height-2*l)/2-g.height/2):r===Wa.Right&&(v.x=p.width-l-g.width,v.y=p.height-l-g.height);var m=S("Image",10),y=f(d,Qo(m,v)),b={XObject:(n={},n[m]=e.ref,n)},w=o.formXObject(y,{Resources:b,BBox:o.obj([0,0,a.width,a.height]),Matrix:o.obj([1,0,0,1,0,0])});return o.register(w)},t.prototype.createAppearanceDict=function(t,e,r){var n=this.acroField.dict.context,i=this.createAppearanceStream(t,e.on),o=this.createAppearanceStream(t,e.off),a=n.obj({});return a.set(r,i),a.set(Oe.of("Off"),o),a},t}();const La=qa;var Ga=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return Ft(e,"acroCheckBox",[[Pn,"PDFAcroCheckBox"]]),i.acroField=e,i}return u(e,t),e.prototype.check=function(){var t,e=null!==(t=this.acroField.getOnValue())&&void 0!==t?t:Oe.of("Yes");this.markAsDirty(),this.acroField.setValue(e)},e.prototype.uncheck=function(){this.markAsDirty(),this.acroField.setValue(Oe.of("Off"))},e.prototype.isChecked=function(){var t=this.acroField.getOnValue();return!!t&&t===this.acroField.getValue()},e.prototype.addToPage=function(t,e){var r,n,i,o,a,s;Ft(t,"page",[[ms,"PDFPage"]]),Va(e),e||(e={}),"textColor"in e||(e.textColor=zo(0,0,0)),"backgroundColor"in e||(e.backgroundColor=zo(1,1,1)),"borderColor"in e||(e.borderColor=zo(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var u=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(i=e.width)&&void 0!==i?i:50,height:null!==(o=e.height)&&void 0!==o?o:50,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(a=e.borderWidth)&&void 0!==a?a:0,rotate:null!==(s=e.rotate)&&void 0!==s?s:Ui(0),hidden:e.hidden}),c=this.doc.context.register(u.dict);this.acroField.addWidget(c),u.setAppearanceState(Oe.of("Off")),this.updateWidgetAppearance(u,Oe.of("Yes")),t.node.addAnnot(c)},e.prototype.needsAppearancesUpdate=function(){for(var t,e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++){var i=e[r],o=i.getAppearanceState(),a=null===(t=i.getAppearances())||void 0===t?void 0:t.normal;if(!(a instanceof Ae))return!0;if(o&&!a.has(o))return!0}return!1},e.prototype.defaultUpdateAppearances=function(){this.updateAppearances()},e.prototype.updateAppearances=function(t){var e;Bt(t,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var o=r[n],a=null!==(e=o.getOnValue())&&void 0!==e?e:Oe.of("Yes");a&&this.updateWidgetAppearance(o,a,t)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ca((null!=r?r:Ta)(this,t));this.updateOnOffWidgetAppearance(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(La);const Ka=Ga;var Ha=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return Ft(e,"acroComboBox",[[Vn,"PDFAcroComboBox"]]),i.acroField=e,i}return u(e,t),e.prototype.getOptions=function(){for(var t=this.acroField.getOptions(),e=new Array(t.length),r=0,n=e.length;r<n;r++){var i=t[r],o=i.display,a=i.value;e[r]=(null!=o?o:a).decodeText()}return e},e.prototype.getSelected=function(){for(var t=this.acroField.getValues(),e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=t[r].decodeText();return e},e.prototype.setOptions=function(t){Ft(t,"options",[Array]);for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]={value:dr.fromText(t[r])};this.acroField.setOptions(e)},e.prototype.addOptions=function(t){Ft(t,"options",["string",Array]);for(var e=Array.isArray(t)?t:[t],r=this.acroField.getOptions(),n=new Array(e.length),i=0,o=e.length;i<o;i++)n[i]={value:dr.fromText(e[i])};this.acroField.setOptions(r.concat(n))},e.prototype.select=function(t,e){void 0===e&&(e=!1),Ft(t,"options",["string",Array]),Ft(e,"merge",["boolean"]);var r=Array.isArray(t)?t:[t],n=this.getOptions();r.find((function(t){return!n.includes(t)}))&&this.enableEditing(),this.markAsDirty(),(r.length>1||1===r.length&&e)&&this.enableMultiselect();for(var i=new Array(r.length),o=0,a=r.length;o<a;o++)i[o]=dr.fromText(r[o]);if(e){var s=this.acroField.getValues();this.acroField.setValues(s.concat(i))}else this.acroField.setValues(i)},e.prototype.clear=function(){this.markAsDirty(),this.acroField.setValues([])},e.prototype.setFontSize=function(t){Rt(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.isEditable=function(){return this.acroField.hasFlag(jn.Edit)},e.prototype.enableEditing=function(){this.acroField.setFlagTo(jn.Edit,!0)},e.prototype.disableEditing=function(){this.acroField.setFlagTo(jn.Edit,!1)},e.prototype.isSorted=function(){return this.acroField.hasFlag(jn.Sort)},e.prototype.enableSorting=function(){this.acroField.setFlagTo(jn.Sort,!0)},e.prototype.disableSorting=function(){this.acroField.setFlagTo(jn.Sort,!1)},e.prototype.isMultiselect=function(){return this.acroField.hasFlag(jn.MultiSelect)},e.prototype.enableMultiselect=function(){this.acroField.setFlagTo(jn.MultiSelect,!0)},e.prototype.disableMultiselect=function(){this.acroField.setFlagTo(jn.MultiSelect,!1)},e.prototype.isSpellChecked=function(){return!this.acroField.hasFlag(jn.DoNotSpellCheck)},e.prototype.enableSpellChecking=function(){this.acroField.setFlagTo(jn.DoNotSpellCheck,!1)},e.prototype.disableSpellChecking=function(){this.acroField.setFlagTo(jn.DoNotSpellCheck,!0)},e.prototype.isSelectOnClick=function(){return this.acroField.hasFlag(jn.CommitOnSelChange)},e.prototype.enableSelectOnClick=function(){this.acroField.setFlagTo(jn.CommitOnSelChange,!0)},e.prototype.disableSelectOnClick=function(){this.acroField.setFlagTo(jn.CommitOnSelChange,!1)},e.prototype.addToPage=function(t,e){var r,n,i,o,a,s,u;Ft(t,"page",[[ms,"PDFPage"]]),Va(e),e||(e={}),"textColor"in e||(e.textColor=zo(0,0,0)),"backgroundColor"in e||(e.backgroundColor=zo(1,1,1)),"borderColor"in e||(e.borderColor=zo(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var c=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(i=e.width)&&void 0!==i?i:200,height:null!==(o=e.height)&&void 0!==o?o:50,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(a=e.borderWidth)&&void 0!==a?a:0,rotate:null!==(s=e.rotate)&&void 0!==s?s:Ui(0),hidden:e.hidden}),l=this.doc.context.register(c.dict);this.acroField.addWidget(l);var h=null!==(u=e.font)&&void 0!==u?u:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(c,h),t.node.addAnnot(l)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof Re))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){Ft(t,"font",[[ja,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){Ft(t,"font",[[ja,"PDFFont"]]),Bt(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var o=r[n];this.updateWidgetAppearance(o,t,e)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ca((null!=r?r:Pa)(this,t,e));this.updateWidgetAppearanceWithFont(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(La);const Xa=Ha;var Za=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return Ft(e,"acroListBox",[[Zn,"PDFAcroListBox"]]),i.acroField=e,i}return u(e,t),e.prototype.getOptions=function(){for(var t=this.acroField.getOptions(),e=new Array(t.length),r=0,n=e.length;r<n;r++){var i=t[r],o=i.display,a=i.value;e[r]=(null!=o?o:a).decodeText()}return e},e.prototype.getSelected=function(){for(var t=this.acroField.getValues(),e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=t[r].decodeText();return e},e.prototype.setOptions=function(t){Ft(t,"options",[Array]),this.markAsDirty();for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]={value:dr.fromText(t[r])};this.acroField.setOptions(e)},e.prototype.addOptions=function(t){Ft(t,"options",["string",Array]),this.markAsDirty();for(var e=Array.isArray(t)?t:[t],r=this.acroField.getOptions(),n=new Array(e.length),i=0,o=e.length;i<o;i++)n[i]={value:dr.fromText(e[i])};this.acroField.setOptions(r.concat(n))},e.prototype.select=function(t,e){void 0===e&&(e=!1),Ft(t,"options",["string",Array]),Ft(e,"merge",["boolean"]);var r=Array.isArray(t)?t:[t];!function(t,e,r){Array.isArray(r)||(r=mt(r));for(var n=0,i=t.length;n<i;n++)Ct(t[n],"option",r)}(r,0,this.getOptions()),this.markAsDirty(),(r.length>1||1===r.length&&e)&&this.enableMultiselect();for(var n=new Array(r.length),i=0,o=r.length;i<o;i++)n[i]=dr.fromText(r[i]);if(e){var a=this.acroField.getValues();this.acroField.setValues(a.concat(n))}else this.acroField.setValues(n)},e.prototype.clear=function(){this.markAsDirty(),this.acroField.setValues([])},e.prototype.setFontSize=function(t){Rt(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.isSorted=function(){return this.acroField.hasFlag(jn.Sort)},e.prototype.enableSorting=function(){this.acroField.setFlagTo(jn.Sort,!0)},e.prototype.disableSorting=function(){this.acroField.setFlagTo(jn.Sort,!1)},e.prototype.isMultiselect=function(){return this.acroField.hasFlag(jn.MultiSelect)},e.prototype.enableMultiselect=function(){this.acroField.setFlagTo(jn.MultiSelect,!0)},e.prototype.disableMultiselect=function(){this.acroField.setFlagTo(jn.MultiSelect,!1)},e.prototype.isSelectOnClick=function(){return this.acroField.hasFlag(jn.CommitOnSelChange)},e.prototype.enableSelectOnClick=function(){this.acroField.setFlagTo(jn.CommitOnSelChange,!0)},e.prototype.disableSelectOnClick=function(){this.acroField.setFlagTo(jn.CommitOnSelChange,!1)},e.prototype.addToPage=function(t,e){var r,n,i,o,a,s,u;Ft(t,"page",[[ms,"PDFPage"]]),Va(e),e||(e={}),"textColor"in e||(e.textColor=zo(0,0,0)),"backgroundColor"in e||(e.backgroundColor=zo(1,1,1)),"borderColor"in e||(e.borderColor=zo(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var c=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(i=e.width)&&void 0!==i?i:200,height:null!==(o=e.height)&&void 0!==o?o:100,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(a=e.borderWidth)&&void 0!==a?a:0,rotate:null!==(s=e.rotate)&&void 0!==s?s:Ui(0),hidden:e.hidden}),l=this.doc.context.register(c.dict);this.acroField.addWidget(l);var h=null!==(u=e.font)&&void 0!==u?u:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(c,h),t.node.addAnnot(l)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof Re))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){Ft(t,"font",[[ja,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){Ft(t,"font",[[ja,"PDFFont"]]),Bt(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var o=r[n];this.updateWidgetAppearance(o,t,e)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ca((null!=r?r:Da)(this,t,e));this.updateWidgetAppearanceWithFont(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(La);const Ya=Za;var Ja=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return Ft(e,"acroRadioButton",[[Xn,"PDFAcroRadioButton"]]),i.acroField=e,i}return u(e,t),e.prototype.getOptions=function(){var t=this.acroField.getExportValues();if(t){for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=t[r].decodeText();return e}var i=this.acroField.getOnValues(),o=new Array(i.length);for(r=0,n=o.length;r<n;r++)o[r]=i[r].decodeText();return o},e.prototype.getSelected=function(){var t=this.acroField.getValue();if(t!==Oe.of("Off")){var e=this.acroField.getExportValues();if(e)for(var r=this.acroField.getOnValues(),n=0,i=r.length;n<i;n++)if(r[n]===t)return e[n].decodeText();return t.decodeText()}},e.prototype.select=function(t){Ft(t,"option",["string"]);var e=this.getOptions();Ct(t,"option",e),this.markAsDirty();var r=this.acroField.getOnValues(),n=this.acroField.getExportValues();if(n)for(var i=0,o=n.length;i<o;i++)n[i].decodeText()===t&&this.acroField.setValue(r[i]);else for(i=0,o=r.length;i<o;i++){var a=r[i];a.decodeText()===t&&this.acroField.setValue(a)}},e.prototype.clear=function(){this.markAsDirty(),this.acroField.setValue(Oe.of("Off"))},e.prototype.isOffToggleable=function(){return!this.acroField.hasFlag(Nn.NoToggleToOff)},e.prototype.enableOffToggling=function(){this.acroField.setFlagTo(Nn.NoToggleToOff,!1)},e.prototype.disableOffToggling=function(){this.acroField.setFlagTo(Nn.NoToggleToOff,!0)},e.prototype.isMutuallyExclusive=function(){return!this.acroField.hasFlag(Nn.RadiosInUnison)},e.prototype.enableMutualExclusion=function(){this.acroField.setFlagTo(Nn.RadiosInUnison,!1)},e.prototype.disableMutualExclusion=function(){this.acroField.setFlagTo(Nn.RadiosInUnison,!0)},e.prototype.addOptionToPage=function(t,e,r){var n,i,o,a,s,u,c,l,h;Ft(t,"option",["string"]),Ft(e,"page",[[ms,"PDFPage"]]),Va(r);var f=this.createWidget({x:null!==(n=null==r?void 0:r.x)&&void 0!==n?n:0,y:null!==(i=null==r?void 0:r.y)&&void 0!==i?i:0,width:null!==(o=null==r?void 0:r.width)&&void 0!==o?o:50,height:null!==(a=null==r?void 0:r.height)&&void 0!==a?a:50,textColor:null!==(s=null==r?void 0:r.textColor)&&void 0!==s?s:zo(0,0,0),backgroundColor:null!==(u=null==r?void 0:r.backgroundColor)&&void 0!==u?u:zo(1,1,1),borderColor:null!==(c=null==r?void 0:r.borderColor)&&void 0!==c?c:zo(0,0,0),borderWidth:null!==(l=null==r?void 0:r.borderWidth)&&void 0!==l?l:1,rotate:null!==(h=null==r?void 0:r.rotate)&&void 0!==h?h:Ui(0),hidden:null==r?void 0:r.hidden}),d=this.doc.context.register(f.dict),p=this.acroField.addWidgetWithOpt(d,dr.fromText(t),!this.isMutuallyExclusive());f.setAppearanceState(Oe.of("Off")),this.updateWidgetAppearance(f,p),e.node.addAnnot(d)},e.prototype.needsAppearancesUpdate=function(){for(var t,e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++){var i=e[r],o=i.getAppearanceState(),a=null===(t=i.getAppearances())||void 0===t?void 0:t.normal;if(!(a instanceof Ae))return!0;if(o&&!a.has(o))return!0}return!1},e.prototype.defaultUpdateAppearances=function(){this.updateAppearances()},e.prototype.updateAppearances=function(t){Bt(t,"provider",[Function]);for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++){var i=e[r],o=i.getOnValue();o&&this.updateWidgetAppearance(i,o,t)}},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ca((null!=r?r:Oa)(this,t));this.updateOnOffWidgetAppearance(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(La);const Qa=Ja,_a=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return Ft(e,"acroSignature",[[Ln,"PDFAcroSignature"]]),i.acroField=e,i}return u(e,t),e.prototype.needsAppearancesUpdate=function(){return!1},e.of=function(t,r,n){return new e(t,r,n)},e}(La);var $a=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return Ft(e,"acroText",[[Gn,"PDFAcroText"]]),i.acroField=e,i}return u(e,t),e.prototype.getText=function(){var t=this.acroField.getValue();if(!t&&this.isRichFormatted())throw new ga(this.getName());return null==t?void 0:t.decodeText()},e.prototype.setText=function(t){Bt(t,"text",["string"]);var e=this.getMaxLength();if(void 0!==e&&t&&t.length>e)throw new ma(t.length,e,this.getName());this.markAsDirty(),this.disableRichFormatting(),t?this.acroField.setValue(dr.fromText(t)):this.acroField.removeValue()},e.prototype.getAlignment=function(){var t=this.acroField.getQuadding();return 0===t?To.Left:1===t?To.Center:2===t?To.Right:To.Left},e.prototype.setAlignment=function(t){Ct(t,"alignment",To),this.markAsDirty(),this.acroField.setQuadding(t)},e.prototype.getMaxLength=function(){return this.acroField.getMaxLength()},e.prototype.setMaxLength=function(t){if(Ot(t,"maxLength",0,Number.MAX_SAFE_INTEGER),this.markAsDirty(),void 0===t)this.acroField.removeMaxLength();else{var e=this.getText();if(e&&e.length>t)throw new ya(e.length,t,this.getName());this.acroField.setMaxLength(t)}},e.prototype.removeMaxLength=function(){this.markAsDirty(),this.acroField.removeMaxLength()},e.prototype.setImage=function(t){for(var e=this.getAlignment(),r=e===To.Center?Wa.Center:e===To.Right?Wa.Right:Wa.Left,n=this.acroField.getWidgets(),i=0,o=n.length;i<o;i++){var a=n[i],s=this.createImageAppearanceStream(a,t,r);this.updateWidgetAppearances(a,{normal:s})}this.markAsClean()},e.prototype.setFontSize=function(t){Rt(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.isMultiline=function(){return this.acroField.hasFlag(In.Multiline)},e.prototype.enableMultiline=function(){this.markAsDirty(),this.acroField.setFlagTo(In.Multiline,!0)},e.prototype.disableMultiline=function(){this.markAsDirty(),this.acroField.setFlagTo(In.Multiline,!1)},e.prototype.isPassword=function(){return this.acroField.hasFlag(In.Password)},e.prototype.enablePassword=function(){this.acroField.setFlagTo(In.Password,!0)},e.prototype.disablePassword=function(){this.acroField.setFlagTo(In.Password,!1)},e.prototype.isFileSelector=function(){return this.acroField.hasFlag(In.FileSelect)},e.prototype.enableFileSelection=function(){this.acroField.setFlagTo(In.FileSelect,!0)},e.prototype.disableFileSelection=function(){this.acroField.setFlagTo(In.FileSelect,!1)},e.prototype.isSpellChecked=function(){return!this.acroField.hasFlag(In.DoNotSpellCheck)},e.prototype.enableSpellChecking=function(){this.acroField.setFlagTo(In.DoNotSpellCheck,!1)},e.prototype.disableSpellChecking=function(){this.acroField.setFlagTo(In.DoNotSpellCheck,!0)},e.prototype.isScrollable=function(){return!this.acroField.hasFlag(In.DoNotScroll)},e.prototype.enableScrolling=function(){this.acroField.setFlagTo(In.DoNotScroll,!1)},e.prototype.disableScrolling=function(){this.acroField.setFlagTo(In.DoNotScroll,!0)},e.prototype.isCombed=function(){return this.acroField.hasFlag(In.Comb)&&!this.isMultiline()&&!this.isPassword()&&!this.isFileSelector()&&void 0!==this.getMaxLength()},e.prototype.enableCombing=function(){void 0===this.getMaxLength()&&console.warn("PDFTextFields must have a max length in order to be combed"),this.markAsDirty(),this.disableMultiline(),this.disablePassword(),this.disableFileSelection(),this.acroField.setFlagTo(In.Comb,!0)},e.prototype.disableCombing=function(){this.markAsDirty(),this.acroField.setFlagTo(In.Comb,!1)},e.prototype.isRichFormatted=function(){return this.acroField.hasFlag(In.RichText)},e.prototype.enableRichFormatting=function(){this.acroField.setFlagTo(In.RichText,!0)},e.prototype.disableRichFormatting=function(){this.acroField.setFlagTo(In.RichText,!1)},e.prototype.addToPage=function(t,e){var r,n,i,o,a,s,u;Ft(t,"page",[[ms,"PDFPage"]]),Va(e),e||(e={}),"textColor"in e||(e.textColor=zo(0,0,0)),"backgroundColor"in e||(e.backgroundColor=zo(1,1,1)),"borderColor"in e||(e.borderColor=zo(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var c=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(i=e.width)&&void 0!==i?i:200,height:null!==(o=e.height)&&void 0!==o?o:50,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(a=e.borderWidth)&&void 0!==a?a:0,rotate:null!==(s=e.rotate)&&void 0!==s?s:Ui(0),hidden:e.hidden}),l=this.doc.context.register(c.dict);this.acroField.addWidget(l);var h=null!==(u=e.font)&&void 0!==u?u:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(c,h),t.node.addAnnot(l)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof Re))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){Ft(t,"font",[[ja,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){Ft(t,"font",[[ja,"PDFFont"]]),Bt(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var o=r[n];this.updateWidgetAppearance(o,t,e)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ca((null!=r?r:Ra)(this,t,e));this.updateWidgetAppearanceWithFont(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(La);const ts=$a;var es;!function(t){t.Courier="Courier",t.CourierBold="Courier-Bold",t.CourierOblique="Courier-Oblique",t.CourierBoldOblique="Courier-BoldOblique",t.Helvetica="Helvetica",t.HelveticaBold="Helvetica-Bold",t.HelveticaOblique="Helvetica-Oblique",t.HelveticaBoldOblique="Helvetica-BoldOblique",t.TimesRoman="Times-Roman",t.TimesRomanBold="Times-Bold",t.TimesRomanItalic="Times-Italic",t.TimesRomanBoldItalic="Times-BoldItalic",t.Symbol="Symbol",t.ZapfDingbats="ZapfDingbats"}(es||(es={}));var rs=function(){function t(t,e){var r=this;this.embedDefaultFont=function(){return r.doc.embedStandardFont(es.Helvetica)},Ft(t,"acroForm",[[oi,"PDFAcroForm"]]),Ft(e,"doc",[[ds,"PDFDocument"]]),this.acroForm=t,this.doc=e,this.dirtyFields=new Set,this.defaultFontCache=It.populatedBy(this.embedDefaultFont)}return t.prototype.hasXFA=function(){return this.acroForm.dict.has(Oe.of("XFA"))},t.prototype.deleteXFA=function(){this.acroForm.dict.delete(Oe.of("XFA"))},t.prototype.getFields=function(){for(var t=this.acroForm.getAllFields(),e=[],r=0,n=t.length;r<n;r++){var i=t[r],o=i[0],a=i[1],s=os(o,a,this.doc);s&&e.push(s)}return e},t.prototype.getFieldMaybe=function(t){Ft(t,"name",["string"]);for(var e=this.getFields(),r=0,n=e.length;r<n;r++){var i=e[r];if(i.getName()===t)return i}},t.prototype.getField=function(t){Ft(t,"name",["string"]);var e=this.getFieldMaybe(t);if(e)return e;throw new ha(t)},t.prototype.getButton=function(t){Ft(t,"name",["string"]);var e=this.getField(t);if(e instanceof bs)return e;throw new fa(t,bs,e)},t.prototype.getCheckBox=function(t){Ft(t,"name",["string"]);var e=this.getField(t);if(e instanceof Ka)return e;throw new fa(t,Ka,e)},t.prototype.getDropdown=function(t){Ft(t,"name",["string"]);var e=this.getField(t);if(e instanceof Xa)return e;throw new fa(t,Xa,e)},t.prototype.getOptionList=function(t){Ft(t,"name",["string"]);var e=this.getField(t);if(e instanceof Ya)return e;throw new fa(t,Ya,e)},t.prototype.getRadioGroup=function(t){Ft(t,"name",["string"]);var e=this.getField(t);if(e instanceof Qa)return e;throw new fa(t,Qa,e)},t.prototype.getSignature=function(t){Ft(t,"name",["string"]);var e=this.getField(t);if(e instanceof _a)return e;throw new fa(t,_a,e)},t.prototype.getTextField=function(t){Ft(t,"name",["string"]);var e=this.getField(t);if(e instanceof ts)return e;throw new fa(t,ts,e)},t.prototype.createButton=function(t){Ft(t,"name",["string"]);var e=as(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=Kn.create(this.doc.context);return n.setPartialName(e.terminal),ss(r,[n,n.ref],e.terminal),bs.of(n,n.ref,this.doc)},t.prototype.createCheckBox=function(t){Ft(t,"name",["string"]);var e=as(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=Pn.create(this.doc.context);return n.setPartialName(e.terminal),ss(r,[n,n.ref],e.terminal),Ka.of(n,n.ref,this.doc)},t.prototype.createDropdown=function(t){Ft(t,"name",["string"]);var e=as(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=Vn.create(this.doc.context);return n.setPartialName(e.terminal),ss(r,[n,n.ref],e.terminal),Xa.of(n,n.ref,this.doc)},t.prototype.createOptionList=function(t){Ft(t,"name",["string"]);var e=as(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=Zn.create(this.doc.context);return n.setPartialName(e.terminal),ss(r,[n,n.ref],e.terminal),Ya.of(n,n.ref,this.doc)},t.prototype.createRadioGroup=function(t){Ft(t,"name",["string"]);var e=as(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=Xn.create(this.doc.context);return n.setPartialName(e.terminal),ss(r,[n,n.ref],e.terminal),Qa.of(n,n.ref,this.doc)},t.prototype.createTextField=function(t){Ft(t,"name",["string"]);var e=as(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=Gn.create(this.doc.context);return n.setPartialName(e.terminal),ss(r,[n,n.ref],e.terminal),ts.of(n,n.ref,this.doc)},t.prototype.flatten=function(t){void 0===t&&(t={updateFieldAppearances:!0}),t.updateFieldAppearances&&this.updateFieldAppearances();for(var e=this.getFields(),r=0,n=e.length;r<n;r++){for(var i=e[r],o=i.acroField.getWidgets(),a=0,s=o.length;a<s;a++){var u=o[a],l=this.findWidgetPage(u),h=this.findWidgetAppearanceRef(i,u),d=S("FlatWidget",10);l.node.setXObject(Oe.of(d),h);var p=u.getRectangle(),g=f([so(),Qi(p.x,p.y)],ea(c(c({},p),{rotation:0})),[Fo(d),uo()]).filter(Boolean);l.pushOperators.apply(l,g)}this.removeField(i)}},t.prototype.removeField=function(t){for(var e=t.acroField.getWidgets(),r=new Set,n=0,i=e.length;n<i;n++){var o=e[n],a=this.findWidgetAppearanceRef(t,o),s=this.findWidgetPage(o);r.add(s),s.node.removeAnnot(a)}r.forEach((function(e){return e.node.removeAnnot(t.ref)})),this.acroForm.removeField(t.acroField),this.doc.context.delete(t.ref)},t.prototype.updateFieldAppearances=function(t){Bt(t,"font",[[ja,"PDFFont"]]),t=null!=t?t:this.getDefaultFont();for(var e=this.getFields(),r=0,n=e.length;r<n;r++){var i=e[r];i.needsAppearancesUpdate()&&i.defaultUpdateAppearances(t)}},t.prototype.markFieldAsDirty=function(t){Bt(t,"fieldRef",[[Ie,"PDFRef"]]),this.dirtyFields.add(t)},t.prototype.markFieldAsClean=function(t){Bt(t,"fieldRef",[[Ie,"PDFRef"]]),this.dirtyFields.delete(t)},t.prototype.fieldIsDirty=function(t){return Bt(t,"fieldRef",[[Ie,"PDFRef"]]),this.dirtyFields.has(t)},t.prototype.getDefaultFont=function(){return this.defaultFontCache.access()},t.prototype.findWidgetPage=function(t){var e=t.P(),r=this.doc.getPages().find((function(t){return t.ref===e}));if(void 0===r){var n=this.doc.context.getObjectRef(t.dict);if(void 0===n)throw new Error("Could not find PDFRef for PDFObject");if(void 0===(r=this.doc.findPageForAnnotationRef(n)))throw new Error("Could not find page for PDFRef "+n)}return r},t.prototype.findWidgetAppearanceRef=function(t,e){var r,n=e.getNormalAppearance();if(n instanceof Ae&&(t instanceof Ka||t instanceof Qa)){var i=t.acroField.getValue(),o=null!==(r=n.get(i))&&void 0!==r?r:n.get(Oe.of("Off"));o instanceof Ie&&(n=o)}if(!(n instanceof Ie)){var a=t.getName();throw new Error("Failed to extract appearance ref for: "+a)}return n},t.prototype.findOrCreateNonTerminals=function(t){for(var e=[this.acroForm],r=0,n=t.length;r<n;r++){var i=t[r];if(!i)throw new pa(i);var o=e[0],a=e[1],s=this.findNonTerminal(i,o);if(s)e=s;else{var u=qn.create(this.doc.context);u.setPartialName(i),u.setParent(a);var c=this.doc.context.register(u.dict);o.addField(c),e=[u,c]}}return e},t.prototype.findNonTerminal=function(t,e){for(var r=e instanceof oi?this.acroForm.getFields():Yn(e.Kids()),n=0,i=r.length;n<i;n++){var o=r[n],a=o[0],s=o[1];if(a.getPartialName()===t){if(a instanceof qn)return[a,s];throw new da(t)}}},t.of=function(e,r){return new t(e,r)},t}();const ns=rs;var is,os=function(t,e,r){return t instanceof Kn?bs.of(t,e,r):t instanceof Pn?Ka.of(t,e,r):t instanceof Vn?Xa.of(t,e,r):t instanceof Zn?Ya.of(t,e,r):t instanceof Gn?ts.of(t,e,r):t instanceof Xn?Qa.of(t,e,r):t instanceof Ln?_a.of(t,e,r):void 0},as=function(t){if(0===t.length)throw new Error("PDF field names must not be empty strings");for(var e=t.split("."),r=0,n=e.length;r<n;r++)if(""===e[r])throw new Error('Periods in PDF field names must be separated by at least one character: "'+t+'"');return 1===e.length?{nonTerminal:[],terminal:e[0]}:{nonTerminal:e.slice(0,e.length-1),terminal:e[e.length-1]}},ss=function(t,e,r){for(var n=t[0],i=t[1],o=e[0],a=e[1],s=n.normalizedEntries(),u=(Yn("Kids"in s?s.Kids:s.Fields)),c=0,l=u.length;c<l;c++)if(u[c][0].getPartialName()===r)throw new da(r);n.addField(a),o.setParent(i)},us={"4A0":[4767.87,6740.79],"2A0":[3370.39,4767.87],A0:[2383.94,3370.39],A1:[1683.78,2383.94],A2:[1190.55,1683.78],A3:[841.89,1190.55],A4:[595.28,841.89],A5:[419.53,595.28],A6:[297.64,419.53],A7:[209.76,297.64],A8:[147.4,209.76],A9:[104.88,147.4],A10:[73.7,104.88],B0:[2834.65,4008.19],B1:[2004.09,2834.65],B2:[1417.32,2004.09],B3:[1000.63,1417.32],B4:[708.66,1000.63],B5:[498.9,708.66],B6:[354.33,498.9],B7:[249.45,354.33],B8:[175.75,249.45],B9:[124.72,175.75],B10:[87.87,124.72],C0:[2599.37,3676.54],C1:[1836.85,2599.37],C2:[1298.27,1836.85],C3:[918.43,1298.27],C4:[649.13,918.43],C5:[459.21,649.13],C6:[323.15,459.21],C7:[229.61,323.15],C8:[161.57,229.61],C9:[113.39,161.57],C10:[79.37,113.39],RA0:[2437.8,3458.27],RA1:[1729.13,2437.8],RA2:[1218.9,1729.13],RA3:[864.57,1218.9],RA4:[609.45,864.57],SRA0:[2551.18,3628.35],SRA1:[1814.17,2551.18],SRA2:[1275.59,1814.17],SRA3:[907.09,1275.59],SRA4:[637.8,907.09],Executive:[521.86,756],Folio:[612,936],Legal:[612,1008],Letter:[612,792],Tabloid:[792,1224]};!function(t){t[t.Fastest=1/0]="Fastest",t[t.Fast=1500]="Fast",t[t.Medium=500]="Medium",t[t.Slow=100]="Slow"}(is||(is={}));const cs=function(){function t(t,e,r){this.alreadyEmbedded=!1,this.ref=t,this.doc=e,this.embedder=r}return t.prototype.embed=function(){return l(this,void 0,void 0,(function(){var t,e,r,n;return h(this,(function(i){switch(i.label){case 0:return this.alreadyEmbedded?[3,2]:[4,this.embedder.embedIntoContext(this.doc.context,this.ref)];case 1:t=i.sent(),this.doc.catalog.has(Oe.of("Names"))||this.doc.catalog.set(Oe.of("Names"),this.doc.context.obj({})),(e=this.doc.catalog.lookup(Oe.of("Names"),Ae)).has(Oe.of("EmbeddedFiles"))||e.set(Oe.of("EmbeddedFiles"),this.doc.context.obj({})),(r=e.lookup(Oe.of("EmbeddedFiles"),Ae)).has(Oe.of("Names"))||r.set(Oe.of("Names"),this.doc.context.obj([])),(n=r.lookup(Oe.of("Names"),me)).push(dr.fromText(this.embedder.fileName)),n.push(t),this.doc.catalog.has(Oe.of("AF"))||this.doc.catalog.set(Oe.of("AF"),this.doc.context.obj([])),this.doc.catalog.lookup(Oe.of("AF"),me).push(t),this.alreadyEmbedded=!0,i.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}(),ls=function(){function t(t,e,r){this.alreadyEmbedded=!1,this.ref=t,this.doc=e,this.embedder=r}return t.prototype.embed=function(){return l(this,void 0,void 0,(function(){var t,e,r,n,i,o,a;return h(this,(function(s){switch(s.label){case 0:return this.alreadyEmbedded?[3,2]:(t=this.doc,e=t.catalog,r=t.context,[4,this.embedder.embedIntoContext(this.doc.context,this.ref)]);case 1:n=s.sent(),e.has(Oe.of("Names"))||e.set(Oe.of("Names"),r.obj({})),(i=e.lookup(Oe.of("Names"),Ae)).has(Oe.of("JavaScript"))||i.set(Oe.of("JavaScript"),r.obj({})),(o=i.lookup(Oe.of("JavaScript"),Ae)).has(Oe.of("Names"))||o.set(Oe.of("Names"),r.obj([])),(a=o.lookup(Oe.of("Names"),me)).push(dr.fromText(this.embedder.scriptName)),a.push(n),this.alreadyEmbedded=!0,s.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}(),hs=function(){function t(t,e){this.script=t,this.scriptName=e}return t.for=function(e,r){return new t(e,r)},t.prototype.embedIntoContext=function(t,e){return l(this,void 0,void 0,(function(){var r;return h(this,(function(n){return r=t.obj({Type:"Action",S:"JavaScript",JS:dr.fromText(this.script)}),e?(t.assign(e,r),[2,e]):[2,t.register(r)]}))}))},t}();var fs=function(){function t(t,e,r){var n=this;if(this.defaultWordBreaks=[" "],this.computePages=function(){var t=[];return n.catalog.Pages().traverse((function(e,r){if(e instanceof Ze){var i=n.pageMap.get(e);i||(i=ms.of(e,r,n),n.pageMap.set(e,i)),t.push(i)}})),t},this.getOrCreateForm=function(){var t=n.catalog.getOrCreateAcroForm();return ns.of(t,n)},Ft(t,"context",[[He,"PDFContext"]]),Ft(e,"ignoreEncryption",["boolean"]),this.context=t,this.catalog=t.lookup(t.trailerInfo.Root),this.isEncrypted=!!t.lookup(t.trailerInfo.Encrypt),this.pageCache=It.populatedBy(this.computePages),this.pageMap=new Map,this.formCache=It.populatedBy(this.getOrCreateForm),this.fonts=[],this.images=[],this.embeddedPages=[],this.embeddedFiles=[],this.javaScripts=[],!e&&this.isEncrypted)throw new sa;r&&this.updateInfoDict()}return t.load=function(e,r){return void 0===r&&(r={}),l(this,void 0,void 0,(function(){var n,i,o,a,s,u,c,l,f,d,p;return h(this,(function(h){switch(h.label){case 0:return n=r.ignoreEncryption,i=void 0!==n&&n,o=r.parseSpeed,a=void 0===o?is.Slow:o,s=r.throwOnInvalidObject,u=void 0!==s&&s,c=r.updateMetadata,l=void 0===c||c,f=r.capNumbers,d=void 0!==f&&f,Ft(e,"pdf",["string",Uint8Array,ArrayBuffer]),Ft(i,"ignoreEncryption",["boolean"]),Ft(a,"parseSpeed",["number"]),Ft(u,"throwOnInvalidObject",["boolean"]),p=V(e),[4,Oi.forBytesWithOptions(p,a,u,d).parseDocument()];case 1:return[2,new t(h.sent(),i,l)]}}))}))},t.create=function(e){return void 0===e&&(e={}),l(this,void 0,void 0,(function(){var r,n,i,o,a,s;return h(this,(function(u){return r=e.updateMetadata,n=void 0===r||r,i=He.create(),o=ui.withContext(i),a=i.register(o),s=ai.withContextAndPages(i,a),i.trailerInfo.Root=i.register(s),[2,new t(i,!1,n)]}))}))},t.prototype.registerFontkit=function(t){this.fontkit=t},t.prototype.getForm=function(){var t=this.formCache.access();return t.hasXFA()&&(console.warn("Removing XFA form data as pdf-lib does not support reading or writing XFA"),t.deleteXFA()),t},t.prototype.getTitle=function(){var t=this.getInfoDict().lookup(Oe.Title);if(t)return ps(t),t.decodeText()},t.prototype.getAuthor=function(){var t=this.getInfoDict().lookup(Oe.Author);if(t)return ps(t),t.decodeText()},t.prototype.getSubject=function(){var t=this.getInfoDict().lookup(Oe.Subject);if(t)return ps(t),t.decodeText()},t.prototype.getKeywords=function(){var t=this.getInfoDict().lookup(Oe.Keywords);if(t)return ps(t),t.decodeText()},t.prototype.getCreator=function(){var t=this.getInfoDict().lookup(Oe.Creator);if(t)return ps(t),t.decodeText()},t.prototype.getProducer=function(){var t=this.getInfoDict().lookup(Oe.Producer);if(t)return ps(t),t.decodeText()},t.prototype.getCreationDate=function(){var t=this.getInfoDict().lookup(Oe.CreationDate);if(t)return ps(t),t.decodeDate()},t.prototype.getModificationDate=function(){var t=this.getInfoDict().lookup(Oe.ModDate);if(t)return ps(t),t.decodeDate()},t.prototype.setTitle=function(t,e){Ft(t,"title",["string"]);var r=Oe.of("Title");this.getInfoDict().set(r,dr.fromText(t)),(null==e?void 0:e.showInWindowTitleBar)&&this.catalog.getOrCreateViewerPreferences().setDisplayDocTitle(!0)},t.prototype.setAuthor=function(t){Ft(t,"author",["string"]);var e=Oe.of("Author");this.getInfoDict().set(e,dr.fromText(t))},t.prototype.setSubject=function(t){Ft(t,"author",["string"]);var e=Oe.of("Subject");this.getInfoDict().set(e,dr.fromText(t))},t.prototype.setKeywords=function(t){Ft(t,"keywords",[Array]);var e=Oe.of("Keywords");this.getInfoDict().set(e,dr.fromText(t.join(" ")))},t.prototype.setCreator=function(t){Ft(t,"creator",["string"]);var e=Oe.of("Creator");this.getInfoDict().set(e,dr.fromText(t))},t.prototype.setProducer=function(t){Ft(t,"creator",["string"]);var e=Oe.of("Producer");this.getInfoDict().set(e,dr.fromText(t))},t.prototype.setLanguage=function(t){Ft(t,"language",["string"]);var e=Oe.of("Lang");this.catalog.set(e,wr.of(t))},t.prototype.setCreationDate=function(t){Ft(t,"creationDate",[[Date,"Date"]]);var e=Oe.of("CreationDate");this.getInfoDict().set(e,wr.fromDate(t))},t.prototype.setModificationDate=function(t){Ft(t,"modificationDate",[[Date,"Date"]]);var e=Oe.of("ModDate");this.getInfoDict().set(e,wr.fromDate(t))},t.prototype.getPageCount=function(){return void 0===this.pageCount&&(this.pageCount=this.getPages().length),this.pageCount},t.prototype.getPages=function(){return this.pageCache.access()},t.prototype.getPage=function(t){var e=this.getPages();return Tt(t,"index",0,e.length-1),e[t]},t.prototype.getPageIndices=function(){return function(t,e){for(var r=new Array(e-0),n=0,i=r.length;n<i;n++)r[n]=0+n;return r}(0,this.getPageCount())},t.prototype.removePage=function(t){var e=this.getPageCount();if(0===this.pageCount)throw new la;Tt(t,"index",0,e-1),this.catalog.removeLeafNode(t),this.pageCount=e-1},t.prototype.addPage=function(t){return Ft(t,"page",["undefined",[ms,"PDFPage"],Array]),this.insertPage(this.getPageCount(),t)},t.prototype.insertPage=function(t,e){var r=this.getPageCount();if(Tt(t,"index",0,r),Ft(e,"page",["undefined",[ms,"PDFPage"],Array]),!e||Array.isArray(e)){var n=Array.isArray(e)?e:us.A4;(e=ms.create(this)).setSize.apply(e,n)}else if(e.doc!==this)throw new ca;var i=this.catalog.insertLeafNode(e.ref,t);return e.node.setParent(i),this.pageMap.set(e.node,e),this.pageCache.invalidate(),this.pageCount=r+1,e},t.prototype.copyPages=function(e,r){return l(this,void 0,void 0,(function(){var n,i,o,a,s,u,c,l;return h(this,(function(h){switch(h.label){case 0:return Ft(e,"srcDoc",[[t,"PDFDocument"]]),Ft(r,"indices",[Array]),[4,e.flush()];case 1:for(h.sent(),n=Je.for(e.context,this.context),i=e.getPages(),o=new Array(r.length),a=0,s=r.length;a<s;a++)u=i[r[a]],c=n.copy(u.node),l=this.context.register(c),o[a]=ms.of(c,l,this);return[2,o]}}))}))},t.prototype.addJavaScript=function(t,e){Ft(t,"name",["string"]),Ft(e,"script",["string"]);var r=hs.for(e,t),n=this.context.nextRef(),i=ls.of(n,this,r);this.javaScripts.push(i)},t.prototype.attach=function(t,e,r){return void 0===r&&(r={}),l(this,void 0,void 0,(function(){var n,i,o,a;return h(this,(function(s){return Ft(t,"attachment",["string",Uint8Array,ArrayBuffer]),Ft(e,"name",["string"]),Bt(r.mimeType,"mimeType",["string"]),Bt(r.description,"description",["string"]),Bt(r.creationDate,"options.creationDate",[Date]),Bt(r.modificationDate,"options.modificationDate",[Date]),kt(r.afRelationship,"options.afRelationship",Sr),n=V(t),i=Br.for(n,e,r),o=this.context.nextRef(),a=cs.of(o,this,i),this.embeddedFiles.push(a),[2]}))}))},t.prototype.embedFont=function(t,e){return void 0===e&&(e={}),l(this,void 0,void 0,(function(){var r,n,i,o,a,s,u,c,l,f;return h(this,(function(h){switch(h.label){case 0:return r=e.subset,n=void 0!==r&&r,i=e.customName,o=e.features,Ft(t,"font",["string",Uint8Array,ArrayBuffer]),Ft(n,"subset",["boolean"]),bt(t)?(a=gr.for(t,i),[3,7]):[3,1];case 1:return(d=t)instanceof Uint8Array||d instanceof ArrayBuffer||"string"==typeof d?(s=V(t),u=this.assertFontkit(),n?[4,kr.for(u,s,i,o)]:[3,3]):[3,6];case 2:return c=h.sent(),[3,5];case 3:return[4,Ar.for(u,s,i,o)];case 4:c=h.sent(),h.label=5;case 5:return a=c,[3,7];case 6:throw new TypeError("`font` must be one of `StandardFonts | string | Uint8Array | ArrayBuffer`");case 7:return l=this.context.nextRef(),f=ja.of(l,this,a),this.fonts.push(f),[2,f]}var d}))}))},t.prototype.embedStandardFont=function(t,e){if(Ft(t,"font",["string"]),!bt(t))throw new TypeError("`font` must be one of type `StandardFonts`");var r=gr.for(t,e),n=this.context.nextRef(),i=ja.of(n,this,r);return this.fonts.push(i),i},t.prototype.embedJpg=function(t){return l(this,void 0,void 0,(function(){var e,r,n,i;return h(this,(function(o){switch(o.label){case 0:return Ft(t,"jpg",["string",Uint8Array,ArrayBuffer]),e=V(t),[4,zr.for(e)];case 1:return r=o.sent(),n=this.context.nextRef(),i=Ma.of(n,this,r),this.images.push(i),[2,i]}}))}))},t.prototype.embedPng=function(t){return l(this,void 0,void 0,(function(){var e,r,n,i;return h(this,(function(o){switch(o.label){case 0:return Ft(t,"png",["string",Uint8Array,ArrayBuffer]),e=V(t),[4,Mr.for(e)];case 1:return r=o.sent(),n=this.context.nextRef(),i=Ma.of(n,this,r),this.images.push(i),[2,i]}}))}))},t.prototype.embedPdf=function(e,r){return void 0===r&&(r=[0]),l(this,void 0,void 0,(function(){var n,i;return h(this,(function(o){switch(o.label){case 0:return Ft(e,"pdf",["string",Uint8Array,ArrayBuffer,[t,"PDFDocument"]]),Ft(r,"indices",[Array]),e instanceof t?(n=e,[3,3]):[3,1];case 1:return[4,t.load(e)];case 2:n=o.sent(),o.label=3;case 3:return i=function(t,e){for(var r=new Array(e.length),n=0,i=e.length;n<i;n++)r[n]=t[e[n]];return r}(n.getPages(),r),[2,this.embedPages(i)]}}))}))},t.prototype.embedPage=function(t,e,r){return l(this,void 0,void 0,(function(){return h(this,(function(n){switch(n.label){case 0:return Ft(t,"page",[[ms,"PDFPage"]]),[4,this.embedPages([t],[e],[r])];case 1:return[2,n.sent()[0]]}}))}))},t.prototype.embedPages=function(t,e,r){return void 0===e&&(e=[]),void 0===r&&(r=[]),l(this,void 0,void 0,(function(){var n,i,o,a,s,u,c,l,f,d,p,g,v;return h(this,(function(h){switch(h.label){case 0:if(0===t.length)return[2,[]];for(u=0,c=t.length-1;u<c;u++)if(n=t[u],i=t[u+1],n.node.context!==i.node.context)throw new Ht;o=t[0].node.context,a=o===this.context?function(t){return t}:Je.for(o,this.context).copy,s=new Array(t.length),u=0,c=t.length,h.label=1;case 1:return u<c?(l=a(t[u].node),f=e[u],d=r[u],[4,cn.for(l,f,d)]):[3,4];case 2:p=h.sent(),g=this.context.nextRef(),s[u]=Na.of(g,this,p),h.label=3;case 3:return u++,[3,1];case 4:return(v=this.embeddedPages).push.apply(v,s),[2,s]}}))}))},t.prototype.flush=function(){return l(this,void 0,void 0,(function(){return h(this,(function(t){switch(t.label){case 0:return[4,this.embedAll(this.fonts)];case 1:return t.sent(),[4,this.embedAll(this.images)];case 2:return t.sent(),[4,this.embedAll(this.embeddedPages)];case 3:return t.sent(),[4,this.embedAll(this.embeddedFiles)];case 4:return t.sent(),[4,this.embedAll(this.javaScripts)];case 5:return t.sent(),[2]}}))}))},t.prototype.save=function(t){return void 0===t&&(t={}),l(this,void 0,void 0,(function(){var e,r,n,i,o,a,s,u,c;return h(this,(function(l){switch(l.label){case 0:return e=t.useObjectStreams,r=void 0===e||e,n=t.addDefaultPage,i=void 0===n||n,o=t.objectsPerTick,a=void 0===o?50:o,s=t.updateFieldAppearances,u=void 0===s||s,Ft(r,"useObjectStreams",["boolean"]),Ft(i,"addDefaultPage",["boolean"]),Ft(a,"objectsPerTick",["number"]),Ft(u,"updateFieldAppearances",["boolean"]),i&&0===this.getPageCount()&&this.addPage(),u&&(c=this.formCache.getValue())&&c.updateFieldAppearances(),[4,this.flush()];case 1:return l.sent(),[2,(r?hr:ir).forContext(this.context,a).serializeToBuffer()]}}))}))},t.prototype.saveAsBase64=function(t){return void 0===t&&(t={}),l(this,void 0,void 0,(function(){var e,r,n,i,o;return h(this,(function(a){switch(a.label){case 0:return e=t.dataUri,r=void 0!==e&&e,n=function(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(t);i<n.length;i++)e.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(t,n[i])&&(r[n[i]]=t[n[i]])}return r}(t,["dataUri"]),Ft(r,"dataUri",["boolean"]),[4,this.save(n)];case 1:return i=a.sent(),o=function(t){for(var e="",r=t.length,n=0;n<r;n+=3)e+=d[t[n]>>2],e+=d[(3&t[n])<<4|t[n+1]>>4],e+=d[(15&t[n+1])<<2|t[n+2]>>6],e+=d[63&t[n+2]];return r%3==2?e=e.substring(0,e.length-1)+"=":r%3==1&&(e=e.substring(0,e.length-2)+"=="),e}(i),[2,r?"data:application/pdf;base64,"+o:o]}}))}))},t.prototype.findPageForAnnotationRef=function(t){for(var e=this.getPages(),r=0,n=e.length;r<n;r++){var i=e[r],o=i.node.Annots();if(void 0!==(null==o?void 0:o.indexOf(t)))return i}},t.prototype.embedAll=function(t){return l(this,void 0,void 0,(function(){var e,r;return h(this,(function(n){switch(n.label){case 0:e=0,r=t.length,n.label=1;case 1:return e<r?[4,t[e].embed()]:[3,4];case 2:n.sent(),n.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t.prototype.updateInfoDict=function(){var t="pdf-lib (https://github.com/Hopding/pdf-lib)",e=new Date,r=this.getInfoDict();this.setProducer(t),this.setModificationDate(e),r.get(Oe.of("Creator"))||this.setCreator(t),r.get(Oe.of("CreationDate"))||this.setCreationDate(e)},t.prototype.getInfoDict=function(){var t=this.context.lookup(this.context.trailerInfo.Info);if(t instanceof Ae)return t;var e=this.context.obj({});return this.context.trailerInfo.Info=this.context.register(e),e},t.prototype.assertFontkit=function(){if(!this.fontkit)throw new ua;return this.fontkit},t}();const ds=fs;function ps(t){if(!(t instanceof dr||t instanceof wr))throw new Vt([dr,wr],t)}var gs;!function(t){t.Normal="Normal",t.Multiply="Multiply",t.Screen="Screen",t.Overlay="Overlay",t.Darken="Darken",t.Lighten="Lighten",t.ColorDodge="ColorDodge",t.ColorBurn="ColorBurn",t.HardLight="HardLight",t.SoftLight="SoftLight",t.Difference="Difference",t.Exclusion="Exclusion"}(gs||(gs={}));var vs=function(){function t(t,e,r){this.fontSize=24,this.fontColor=zo(0,0,0),this.lineHeight=24,this.x=0,this.y=0,Ft(t,"leafNode",[[Ze,"PDFPageLeaf"]]),Ft(e,"ref",[[Ie,"PDFRef"]]),Ft(r,"doc",[[ds,"PDFDocument"]]),this.node=t,this.ref=e,this.doc=r}return t.prototype.setRotation=function(t){var e=Li(t);zt(e,"degreesAngle",90),this.node.set(Oe.of("Rotate"),this.doc.context.obj(e))},t.prototype.getRotation=function(){var t=this.node.Rotate();return Ui(t?t.asNumber():0)},t.prototype.setSize=function(t,e){Ft(t,"width",["number"]),Ft(e,"height",["number"]);var r=this.getMediaBox();this.setMediaBox(r.x,r.y,t,e);var n=this.getCropBox(),i=this.getBleedBox(),o=this.getTrimBox(),a=this.getArtBox(),s=this.node.CropBox(),u=this.node.BleedBox(),c=this.node.TrimBox(),l=this.node.ArtBox();s&&wt(n,r)&&this.setCropBox(r.x,r.y,t,e),u&&wt(i,r)&&this.setBleedBox(r.x,r.y,t,e),c&&wt(o,r)&&this.setTrimBox(r.x,r.y,t,e),l&&wt(a,r)&&this.setArtBox(r.x,r.y,t,e)},t.prototype.setWidth=function(t){Ft(t,"width",["number"]),this.setSize(t,this.getSize().height)},t.prototype.setHeight=function(t){Ft(t,"height",["number"]),this.setSize(this.getSize().width,t)},t.prototype.setMediaBox=function(t,e,r,n){Ft(t,"x",["number"]),Ft(e,"y",["number"]),Ft(r,"width",["number"]),Ft(n,"height",["number"]);var i=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(Oe.MediaBox,i)},t.prototype.setCropBox=function(t,e,r,n){Ft(t,"x",["number"]),Ft(e,"y",["number"]),Ft(r,"width",["number"]),Ft(n,"height",["number"]);var i=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(Oe.CropBox,i)},t.prototype.setBleedBox=function(t,e,r,n){Ft(t,"x",["number"]),Ft(e,"y",["number"]),Ft(r,"width",["number"]),Ft(n,"height",["number"]);var i=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(Oe.BleedBox,i)},t.prototype.setTrimBox=function(t,e,r,n){Ft(t,"x",["number"]),Ft(e,"y",["number"]),Ft(r,"width",["number"]),Ft(n,"height",["number"]);var i=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(Oe.TrimBox,i)},t.prototype.setArtBox=function(t,e,r,n){Ft(t,"x",["number"]),Ft(e,"y",["number"]),Ft(r,"width",["number"]),Ft(n,"height",["number"]);var i=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(Oe.ArtBox,i)},t.prototype.getSize=function(){var t=this.getMediaBox();return{width:t.width,height:t.height}},t.prototype.getWidth=function(){return this.getSize().width},t.prototype.getHeight=function(){return this.getSize().height},t.prototype.getMediaBox=function(){return this.node.MediaBox().asRectangle()},t.prototype.getCropBox=function(){var t,e=this.node.CropBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getMediaBox()},t.prototype.getBleedBox=function(){var t,e=this.node.BleedBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getCropBox()},t.prototype.getTrimBox=function(){var t,e=this.node.TrimBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getCropBox()},t.prototype.getArtBox=function(){var t,e=this.node.ArtBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getCropBox()},t.prototype.translateContent=function(t,e){Ft(t,"x",["number"]),Ft(e,"y",["number"]),this.node.normalize(),this.getContentStream();var r=this.createContentStream(so(),Qi(t,e)),n=this.doc.context.register(r),i=this.createContentStream(uo()),o=this.doc.context.register(i);this.node.wrapContentStreams(n,o)},t.prototype.resetPosition=function(){this.getContentStream(!1),this.x=0,this.y=0},t.prototype.setFont=function(t){Ft(t,"font",[[ja,"PDFFont"]]),this.font=t,this.fontKey=S(this.font.name),this.node.setFontDictionary(Oe.of(this.fontKey),this.font.ref)},t.prototype.setFontSize=function(t){Ft(t,"fontSize",["number"]),this.fontSize=t},t.prototype.setFontColor=function(t){Ft(t,"fontColor",[[Object,"Color"]]),this.fontColor=t},t.prototype.setLineHeight=function(t){Ft(t,"lineHeight",["number"]),this.lineHeight=t},t.prototype.getPosition=function(){return{x:this.x,y:this.y}},t.prototype.getX=function(){return this.x},t.prototype.getY=function(){return this.y},t.prototype.moveTo=function(t,e){Ft(t,"x",["number"]),Ft(e,"y",["number"]),this.x=t,this.y=e},t.prototype.moveDown=function(t){Ft(t,"yDecrease",["number"]),this.y-=t},t.prototype.moveUp=function(t){Ft(t,"yIncrease",["number"]),this.y+=t},t.prototype.moveLeft=function(t){Ft(t,"xDecrease",["number"]),this.x-=t},t.prototype.moveRight=function(t){Ft(t,"xIncrease",["number"]),this.x+=t},t.prototype.pushOperators=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Et(t,"operator",[[Ue,"PDFOperator"]]);var r=this.getContentStream();r.push.apply(r,t)},t.prototype.drawText=function(t,e){var r,n,i,o,a,s,u;void 0===e&&(e={}),Ft(t,"text",["string"]),Bt(e.color,"options.color",[[Object,"Color"]]),Ot(e.opacity,"opacity.opacity",0,1),Bt(e.font,"options.font",[[ja,"PDFFont"]]),Bt(e.size,"options.size",["number"]),Bt(e.rotate,"options.rotate",[[Object,"Rotation"]]),Bt(e.xSkew,"options.xSkew",[[Object,"Rotation"]]),Bt(e.ySkew,"options.ySkew",[[Object,"Rotation"]]),Bt(e.x,"options.x",["number"]),Bt(e.y,"options.y",["number"]),Bt(e.lineHeight,"options.lineHeight",["number"]),Bt(e.maxWidth,"options.maxWidth",["number"]),Bt(e.wordBreaks,"options.wordBreaks",[Array]),kt(e.blendMode,"options.blendMode",gs);var c=this.getFont()[0];e.font&&this.setFont(e.font);for(var l=this.getFont(),h=l[0],f=l[1],d=e.size||this.fontSize,p=e.wordBreaks||this.doc.defaultWordBreaks,g=void 0===e.maxWidth?T(F(t)):function(t,e,r,n){for(var i=function(t){for(var e=B.join("|"),r=["$"],n=0,i=t.length;n<i;n++){var o=t[n];if(E(o))throw new TypeError("`wordBreak` must not include "+e);r.push(""===o?".":o.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))}var a=r.join("|");return new RegExp("("+e+")|((.*?)("+a+"))","gm")}(e),o=F(t).match(i),a="",s=0,u=[],c=function(){""!==a&&u.push(a),a="",s=0},l=0,h=o.length;l<h;l++){var f=o[l];if(E(f))c();else{var d=n(f);s+d>r&&c(),a+=f,s+=d}}return c(),u}(t,p,e.maxWidth,(function(t){return h.widthOfTextAtSize(t,d)})),v=new Array(g.length),m=0,y=g.length;m<y;m++)v[m]=h.encodeText(g[m]);var b=this.maybeEmbedGraphicsState({opacity:e.opacity,blendMode:e.blendMode}),w=this.getContentStream();w.push.apply(w,function(t,e){for(var r,n=[so(),e.graphicsState&&ao(e.graphicsState),xo(),Io(e.color),Co(e.font,e.size),(r=e.lineHeight,Ue.of(We.SetTextLineHeight,[Ni(r)])),So(qi(e.rotate),qi(e.xSkew),qi(e.ySkew),e.x,e.y)].filter(Boolean),i=0,o=t.length;i<o;i++)n.push(wo(t[i]),Ue.of(We.NextLine));return n.push(Ao(),uo()),n}(v,{color:null!==(r=e.color)&&void 0!==r?r:this.fontColor,font:f,size:d,rotate:null!==(n=e.rotate)&&void 0!==n?n:Ui(0),xSkew:null!==(i=e.xSkew)&&void 0!==i?i:Ui(0),ySkew:null!==(o=e.ySkew)&&void 0!==o?o:Ui(0),x:null!==(a=e.x)&&void 0!==a?a:this.x,y:null!==(s=e.y)&&void 0!==s?s:this.y,lineHeight:null!==(u=e.lineHeight)&&void 0!==u?u:this.lineHeight,graphicsState:b})),e.font&&this.setFont(c)},t.prototype.drawImage=function(t,e){var r,n,i,o,a,s,u;void 0===e&&(e={}),Ft(t,"image",[[Ma,"PDFImage"]]),Bt(e.x,"options.x",["number"]),Bt(e.y,"options.y",["number"]),Bt(e.width,"options.width",["number"]),Bt(e.height,"options.height",["number"]),Bt(e.rotate,"options.rotate",[[Object,"Rotation"]]),Bt(e.xSkew,"options.xSkew",[[Object,"Rotation"]]),Bt(e.ySkew,"options.ySkew",[[Object,"Rotation"]]),Ot(e.opacity,"opacity.opacity",0,1),kt(e.blendMode,"options.blendMode",gs);var c=S("Image",10);this.node.setXObject(Oe.of(c),t.ref);var l=this.maybeEmbedGraphicsState({opacity:e.opacity,blendMode:e.blendMode}),h=this.getContentStream();h.push.apply(h,Qo(c,{x:null!==(r=e.x)&&void 0!==r?r:this.x,y:null!==(n=e.y)&&void 0!==n?n:this.y,width:null!==(i=e.width)&&void 0!==i?i:t.size().width,height:null!==(o=e.height)&&void 0!==o?o:t.size().height,rotate:null!==(a=e.rotate)&&void 0!==a?a:Ui(0),xSkew:null!==(s=e.xSkew)&&void 0!==s?s:Ui(0),ySkew:null!==(u=e.ySkew)&&void 0!==u?u:Ui(0),graphicsState:l}))},t.prototype.drawPage=function(t,e){var r,n,i,o,a;void 0===e&&(e={}),Ft(t,"embeddedPage",[[Na,"PDFEmbeddedPage"]]),Bt(e.x,"options.x",["number"]),Bt(e.y,"options.y",["number"]),Bt(e.xScale,"options.xScale",["number"]),Bt(e.yScale,"options.yScale",["number"]),Bt(e.width,"options.width",["number"]),Bt(e.height,"options.height",["number"]),Bt(e.rotate,"options.rotate",[[Object,"Rotation"]]),Bt(e.xSkew,"options.xSkew",[[Object,"Rotation"]]),Bt(e.ySkew,"options.ySkew",[[Object,"Rotation"]]),Ot(e.opacity,"opacity.opacity",0,1),kt(e.blendMode,"options.blendMode",gs);var s=S("EmbeddedPdfPage",10);this.node.setXObject(Oe.of(s),t.ref);var u=this.maybeEmbedGraphicsState({opacity:e.opacity,blendMode:e.blendMode}),c=void 0!==e.width?e.width/t.width:void 0!==e.xScale?e.xScale:1,l=void 0!==e.height?e.height/t.height:void 0!==e.yScale?e.yScale:1,h=this.getContentStream();h.push.apply(h,function(t,e){return[so(),e.graphicsState&&ao(e.graphicsState),Qi(e.x,e.y),$i(qi(e.rotate)),_i(e.xScale,e.yScale),eo(qi(e.xSkew),qi(e.ySkew)),Fo(t),uo()].filter(Boolean)}(s,{x:null!==(r=e.x)&&void 0!==r?r:this.x,y:null!==(n=e.y)&&void 0!==n?n:this.y,xScale:c,yScale:l,rotate:null!==(i=e.rotate)&&void 0!==i?i:Ui(0),xSkew:null!==(o=e.xSkew)&&void 0!==o?o:Ui(0),ySkew:null!==(a=e.ySkew)&&void 0!==a?a:Ui(0),graphicsState:u}))},t.prototype.drawSvgPath=function(t,e){var r,n,i,o,a,s,u,c,l;void 0===e&&(e={}),Ft(t,"path",["string"]),Bt(e.x,"options.x",["number"]),Bt(e.y,"options.y",["number"]),Bt(e.scale,"options.scale",["number"]),Bt(e.rotate,"options.rotate",[[Object,"Rotation"]]),Bt(e.borderWidth,"options.borderWidth",["number"]),Bt(e.color,"options.color",[[Object,"Color"]]),Ot(e.opacity,"opacity.opacity",0,1),Bt(e.borderColor,"options.borderColor",[[Object,"Color"]]),Bt(e.borderDashArray,"options.borderDashArray",[Array]),Bt(e.borderDashPhase,"options.borderDashPhase",["number"]),kt(e.borderLineCap,"options.borderLineCap",ji),Ot(e.borderOpacity,"options.borderOpacity",0,1),kt(e.blendMode,"options.blendMode",gs);var h=this.maybeEmbedGraphicsState({opacity:e.opacity,borderOpacity:e.borderOpacity,blendMode:e.blendMode});"color"in e||"borderColor"in e||(e.borderColor=zo(0,0,0));var d=this.getContentStream();d.push.apply(d,function(t,e){var r,n,i;return f([so(),e.graphicsState&&ao(e.graphicsState),Qi(e.x,e.y),$i(qi(null!==(r=e.rotate)&&void 0!==r?r:Ui(0))),e.scale?_i(e.scale,-e.scale):_i(1,-1),e.color&&Io(e.color),e.borderColor&&jo(e.borderColor),e.borderWidth&&co(e.borderWidth),e.borderLineCap&&io(e.borderLineCap),ro(null!==(n=e.borderDashArray)&&void 0!==n?n:[],null!==(i=e.borderDashPhase)&&void 0!==i?i:0)],function(t){return function(t){Wo=Vo=qo=Lo=Go=Ko=0;for(var e=[],r=0;r<t.length;r++){var n=t[r];if(n.cmd&&"function"==typeof Xo[n.cmd]){var i=Xo[n.cmd](n.args);Array.isArray(i)?e=e.concat(i):e.push(i)}}return e}(function(t){for(var e,r=[],n=[],i="",o=!1,a=0,s=0,u=t;s<u.length;s++){var c=u[s];if(Ho.has(c))a=Ho.get(c),e&&(i.length>0&&(n[n.length]=+i),r[r.length]={cmd:e,args:n},n=[],i="",o=!1),e=c;else if([" ",","].includes(c)||"-"===c&&i.length>0&&"e"!==i[i.length-1]||"."===c&&o){if(0===i.length)continue;n.length===a?(r[r.length]={cmd:e,args:n},n=[+i],"M"===e&&(e="L"),"m"===e&&(e="l")):n[n.length]=+i,o="."===c,i=["-","."].includes(c)?c:""}else i+=c,"."===c&&(o=!0)}return i.length>0&&(n.length===a?(r[r.length]={cmd:e,args:n},n=[+i],"M"===e&&(e="L"),"m"===e&&(e="l")):n[n.length]=+i),r[r.length]={cmd:e,args:n},r}(t))}(t),[e.color&&e.borderWidth?yo():e.color?mo():e.borderColor?vo():fo(),uo()]).filter(Boolean)}(t,{x:null!==(r=e.x)&&void 0!==r?r:this.x,y:null!==(n=e.y)&&void 0!==n?n:this.y,scale:e.scale,rotate:null!==(i=e.rotate)&&void 0!==i?i:Ui(0),color:null!==(o=e.color)&&void 0!==o?o:void 0,borderColor:null!==(a=e.borderColor)&&void 0!==a?a:void 0,borderWidth:null!==(s=e.borderWidth)&&void 0!==s?s:0,borderDashArray:null!==(u=e.borderDashArray)&&void 0!==u?u:void 0,borderDashPhase:null!==(c=e.borderDashPhase)&&void 0!==c?c:void 0,borderLineCap:null!==(l=e.borderLineCap)&&void 0!==l?l:void 0,graphicsState:h}))},t.prototype.drawLine=function(t){var e,r,n,i,o;Ft(t.start,"options.start",[[Object,"{ x: number, y: number }"]]),Ft(t.end,"options.end",[[Object,"{ x: number, y: number }"]]),Ft(t.start.x,"options.start.x",["number"]),Ft(t.start.y,"options.start.y",["number"]),Ft(t.end.x,"options.end.x",["number"]),Ft(t.end.y,"options.end.y",["number"]),Bt(t.thickness,"options.thickness",["number"]),Bt(t.color,"options.color",[[Object,"Color"]]),Bt(t.dashArray,"options.dashArray",[Array]),Bt(t.dashPhase,"options.dashPhase",["number"]),kt(t.lineCap,"options.lineCap",ji),Ot(t.opacity,"opacity.opacity",0,1),kt(t.blendMode,"options.blendMode",gs);var a=this.maybeEmbedGraphicsState({borderOpacity:t.opacity,blendMode:t.blendMode});"color"in t||(t.color=zo(0,0,0));var s=this.getContentStream();s.push.apply(s,function(t){var e,r;return[so(),t.graphicsState&&ao(t.graphicsState),t.color&&jo(t.color),co(t.thickness),ro(null!==(e=t.dashArray)&&void 0!==e?e:[],null!==(r=t.dashPhase)&&void 0!==r?r:0),po(t.start.x,t.start.y),t.lineCap&&io(t.lineCap),po(t.start.x,t.start.y),go(t.end.x,t.end.y),vo(),uo()].filter(Boolean)}({start:t.start,end:t.end,thickness:null!==(e=t.thickness)&&void 0!==e?e:1,color:null!==(r=t.color)&&void 0!==r?r:void 0,dashArray:null!==(n=t.dashArray)&&void 0!==n?n:void 0,dashPhase:null!==(i=t.dashPhase)&&void 0!==i?i:void 0,lineCap:null!==(o=t.lineCap)&&void 0!==o?o:void 0,graphicsState:a}))},t.prototype.drawRectangle=function(t){var e,r,n,i,o,a,s,u,c,l,h,f,d;void 0===t&&(t={}),Bt(t.x,"options.x",["number"]),Bt(t.y,"options.y",["number"]),Bt(t.width,"options.width",["number"]),Bt(t.height,"options.height",["number"]),Bt(t.rotate,"options.rotate",[[Object,"Rotation"]]),Bt(t.xSkew,"options.xSkew",[[Object,"Rotation"]]),Bt(t.ySkew,"options.ySkew",[[Object,"Rotation"]]),Bt(t.borderWidth,"options.borderWidth",["number"]),Bt(t.color,"options.color",[[Object,"Color"]]),Ot(t.opacity,"opacity.opacity",0,1),Bt(t.borderColor,"options.borderColor",[[Object,"Color"]]),Bt(t.borderDashArray,"options.borderDashArray",[Array]),Bt(t.borderDashPhase,"options.borderDashPhase",["number"]),kt(t.borderLineCap,"options.borderLineCap",ji),Ot(t.borderOpacity,"options.borderOpacity",0,1),kt(t.blendMode,"options.blendMode",gs);var p=this.maybeEmbedGraphicsState({opacity:t.opacity,borderOpacity:t.borderOpacity,blendMode:t.blendMode});"color"in t||"borderColor"in t||(t.color=zo(0,0,0));var g=this.getContentStream();g.push.apply(g,_o({x:null!==(e=t.x)&&void 0!==e?e:this.x,y:null!==(r=t.y)&&void 0!==r?r:this.y,width:null!==(n=t.width)&&void 0!==n?n:150,height:null!==(i=t.height)&&void 0!==i?i:100,rotate:null!==(o=t.rotate)&&void 0!==o?o:Ui(0),xSkew:null!==(a=t.xSkew)&&void 0!==a?a:Ui(0),ySkew:null!==(s=t.ySkew)&&void 0!==s?s:Ui(0),borderWidth:null!==(u=t.borderWidth)&&void 0!==u?u:0,color:null!==(c=t.color)&&void 0!==c?c:void 0,borderColor:null!==(l=t.borderColor)&&void 0!==l?l:void 0,borderDashArray:null!==(h=t.borderDashArray)&&void 0!==h?h:void 0,borderDashPhase:null!==(f=t.borderDashPhase)&&void 0!==f?f:void 0,graphicsState:p,borderLineCap:null!==(d=t.borderLineCap)&&void 0!==d?d:void 0}))},t.prototype.drawSquare=function(t){void 0===t&&(t={});var e=t.size;Bt(e,"size",["number"]),this.drawRectangle(c(c({},t),{width:e,height:e}))},t.prototype.drawEllipse=function(t){var e,r,n,i,o,a,s,u,c,l,h;void 0===t&&(t={}),Bt(t.x,"options.x",["number"]),Bt(t.y,"options.y",["number"]),Bt(t.xScale,"options.xScale",["number"]),Bt(t.yScale,"options.yScale",["number"]),Bt(t.rotate,"options.rotate",[[Object,"Rotation"]]),Bt(t.color,"options.color",[[Object,"Color"]]),Ot(t.opacity,"opacity.opacity",0,1),Bt(t.borderColor,"options.borderColor",[[Object,"Color"]]),Ot(t.borderOpacity,"options.borderOpacity",0,1),Bt(t.borderWidth,"options.borderWidth",["number"]),Bt(t.borderDashArray,"options.borderDashArray",[Array]),Bt(t.borderDashPhase,"options.borderDashPhase",["number"]),kt(t.borderLineCap,"options.borderLineCap",ji),kt(t.blendMode,"options.blendMode",gs);var f=this.maybeEmbedGraphicsState({opacity:t.opacity,borderOpacity:t.borderOpacity,blendMode:t.blendMode});"color"in t||"borderColor"in t||(t.color=zo(0,0,0));var d=this.getContentStream();d.push.apply(d,ta({x:null!==(e=t.x)&&void 0!==e?e:this.x,y:null!==(r=t.y)&&void 0!==r?r:this.y,xScale:null!==(n=t.xScale)&&void 0!==n?n:100,yScale:null!==(i=t.yScale)&&void 0!==i?i:100,rotate:null!==(o=t.rotate)&&void 0!==o?o:void 0,color:null!==(a=t.color)&&void 0!==a?a:void 0,borderColor:null!==(s=t.borderColor)&&void 0!==s?s:void 0,borderWidth:null!==(u=t.borderWidth)&&void 0!==u?u:0,borderDashArray:null!==(c=t.borderDashArray)&&void 0!==c?c:void 0,borderDashPhase:null!==(l=t.borderDashPhase)&&void 0!==l?l:void 0,borderLineCap:null!==(h=t.borderLineCap)&&void 0!==h?h:void 0,graphicsState:f}))},t.prototype.drawCircle=function(t){void 0===t&&(t={});var e=t.size,r=void 0===e?100:e;Bt(r,"size",["number"]),this.drawEllipse(c(c({},t),{xScale:r,yScale:r}))},t.prototype.getFont=function(){if(!this.font||!this.fontKey){var t=this.doc.embedStandardFont(es.Helvetica);this.setFont(t)}return[this.font,this.fontKey]},t.prototype.getContentStream=function(t){return void 0===t&&(t=!0),t&&this.contentStream||(this.contentStream=this.createContentStream(),this.contentStreamRef=this.doc.context.register(this.contentStream),this.node.addContentStream(this.contentStreamRef)),this.contentStream},t.prototype.createContentStream=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=this.doc.context.obj({}),n=Le.of(r,t);return n},t.prototype.maybeEmbedGraphicsState=function(t){var e=t.opacity,r=t.borderOpacity,n=t.blendMode;if(void 0!==e||void 0!==r||void 0!==n){var i=S("GS",10),o=this.doc.context.obj({Type:"ExtGState",ca:e,CA:r,BM:n});return this.node.setExtGState(Oe.of(i),o),i}},t.of=function(e,r,n){return new t(e,r,n)},t.create=function(e){Ft(e,"doc",[[ds,"PDFDocument"]]);var r=Ie.of(-1),n=Ze.withContextAndParent(e.context,r);return new t(n,e.context.register(n),e)},t}();const ms=vs;var ys=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return Ft(e,"acroButton",[[Kn,"PDFAcroPushButton"]]),i.acroField=e,i}return u(e,t),e.prototype.setImage=function(t,e){void 0===e&&(e=Wa.Center);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var o=r[n],a=this.createImageAppearanceStream(o,t,e);this.updateWidgetAppearances(o,{normal:a})}this.markAsClean()},e.prototype.setFontSize=function(t){Rt(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.addToPage=function(t,e,r){var n,i,o,a,s,u,c,l,h,f,d;Bt(t,"text",["string"]),Bt(e,"page",[[ms,"PDFPage"]]),Va(r);var p=this.createWidget({x:(null!==(n=null==r?void 0:r.x)&&void 0!==n?n:0)-(null!==(i=null==r?void 0:r.borderWidth)&&void 0!==i?i:0)/2,y:(null!==(o=null==r?void 0:r.y)&&void 0!==o?o:0)-(null!==(a=null==r?void 0:r.borderWidth)&&void 0!==a?a:0)/2,width:null!==(s=null==r?void 0:r.width)&&void 0!==s?s:100,height:null!==(u=null==r?void 0:r.height)&&void 0!==u?u:50,textColor:null!==(c=null==r?void 0:r.textColor)&&void 0!==c?c:zo(0,0,0),backgroundColor:null!==(l=null==r?void 0:r.backgroundColor)&&void 0!==l?l:zo(.75,.75,.75),borderColor:null==r?void 0:r.borderColor,borderWidth:null!==(h=null==r?void 0:r.borderWidth)&&void 0!==h?h:0,rotate:null!==(f=null==r?void 0:r.rotate)&&void 0!==f?f:Ui(0),caption:t,hidden:null==r?void 0:r.hidden}),g=this.doc.context.register(p.dict);this.acroField.addWidget(g);var v=null!==(d=null==r?void 0:r.font)&&void 0!==d?d:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(p,v),e.node.addAnnot(g)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof Re))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){Ft(t,"font",[[ja,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){Ft(t,"font",[[ja,"PDFFont"]]),Bt(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var o=r[n];this.updateWidgetAppearance(o,t,e)}},e.prototype.updateWidgetAppearance=function(t,e,r){var n=Ca((null!=r?r:za)(this,t,e));this.updateWidgetAppearanceWithFont(t,e,n)},e.of=function(t,r,n){return new e(t,r,n)},e}(La);const bs=ys;var ws=r(4043),xs=r(3162);let As,Cs,ks,Ss,Fs,Bs,Es,Ts=1;function Os(t,e){const r=new Date,n=()=>{const i=new Date-r;if(i>e)return void(t.style.visibility="hidden");const o=1-i/e;t.style.opacity=o,window.requestAnimationFrame(n)};window.requestAnimationFrame(n)}function zs(t,e){let r=As;for(let t=0;t<e.length-1;++t)r=r[e[t]];r[e[e.length-1]]=t,Is()}function Rs(t){return t.replace(/^["]+|["]+$/g,"")}function Ps(t){const e=t.currentTarget.files[0];if(!e)return;const r=new FileReader;r.onload=async function(){const t=r.result.split(/\r\n|\n/).map(Rs);As.guestList=t,Fs.classList.remove("disabled"),Es.innerHTML=`CSV file loaded. ${t.length} lines found (may include empty lines)`},r.readAsText(e)}function Ds(t){const e=t.currentTarget.files[0];if(!e)return;const r=new FileReader;r.onload=async function(){As.guest.font.base64=r.result,As.guest.font.family=`Custom-${Math.floor(1e5*Math.random())}`,new FontFace(As.guest.font.family,`url(${As.guest.font.base64})`).load().then((t=>{document.fonts.add(t),Is()})).catch((t=>console.error("Font load error:",t)))},r.readAsDataURL(e)}function Ns(t){const e=t.currentTarget.files[0];if(!e)return;const r=new FileReader;r.onload=async function(){const t=await async function(t){return new Promise(((e,r)=>{const n=new Image;n.onload=function(){e(n)},n.onerror=function(){r(new Error(`Image ${t} cannot be loaded`))},n.src=t}))}(r.result);As.cardImgBase64=r.result,As.cardImg=t,ks.style.height=ks.clientWidth*t.height/t.width+"px",ks.style.backgroundImage=`url(${r.result})`,Ts=As.previewWidth/As.cardImg.width,Is(),document.querySelector(".textControls").style.visibility="visible",Cs.style.visibility="visible",function(){const t=document.querySelector(".previewTextHint");t.style.top=Cs.offsetTop-t.offsetHeight/2+"px",t.style.left=`${Cs.offsetLeft+Cs.offsetWidth+20}px`;const e=t.querySelector(".hintCloseButton"),r=setTimeout((()=>{Os(t,1e3)}),5e3);e.addEventListener("click",(()=>{clearTimeout(r),Os(t,1e3)})),t.style.opacity=1,t.style.visibility="visible"}(),Ss.classList.remove("disabled"),document.querySelector(".fontUploadButton").classList.remove("disabled")},r.readAsDataURL(e)}function Is(){const t=As.previewTextContent.replace(As.guest.lineBreakCharacter,"<br/>");Cs.innerHTML=`${As.guest.prefix}${t}${As.guest.suffix}`,Cs.style.fontFamily=As.guest.font.family,Cs.style.fontSize=As.guest.font.size*Ts+"px",Cs.style.fontWeight=As.guest.font.weight,Cs.style.color=As.guest.color;const e=Cs.offsetWidth,r=As.previewWidth;Cs.style.left=(r-e)/2+"px",Cs.style.top=As.guest.position.y*Ts+"px",Bs.classList.add("disabled")}!function(t){As=t,ks=document.querySelector(".cardPreview");const e=function(){const t=Math.min(.7*window.innerWidth,900);if(ks.style.width=`${t}px`,As.previewWidth=t,As.cardImg){const e=As.cardImg;Ts=t/e.width,ks.style.height=Ts*e.height+"px",Is()}};e(),window.addEventListener("resize",(function(){e()})),document.querySelector("#imageUploadInput").addEventListener("change",Ns),Cs=document.querySelector(".previewText"),function(){let t=!1,e=0,r=0;Cs.addEventListener("mousedown",(function(n){n.preventDefault(),e=Cs.offsetTop-n.clientY,r=Cs.offsetParent.offsetHeight,t=!0})),document.addEventListener("mouseup",(function(){t=!1})),document.addEventListener("mousemove",(function(n){if(n.preventDefault(),t){const i=Cs.style.top;Cs.style.top=n.clientY+e+"px",(Cs.offsetTop<0||Cs.offsetTop+Cs.offsetHeight>r)&&(Cs.style.top=i,t=!1),As.guest.position.y=Cs.offsetTop/Ts,Bs.classList.add("disabled")}}))}(),document.querySelector("#csvUploadInput").addEventListener("change",Ps),document.querySelector("#fontUploadInput").addEventListener("change",Ds),As.resultContainerEl=document.querySelector(".resultSection"),Es=document.querySelector(".progressText"),As.progressTextEl=Es,As.actionButtons=document.querySelectorAll(".actionButton"),Ss=document.querySelector(".csvUploadButton"),Fs=document.querySelector(".processButton"),Bs=document.querySelector(".downloadButton"),Bs.addEventListener("click",(()=>async function(t){const e=new ws;for(const r of t){const{filename:t,pdfBase64:n}=r;e.file(`${t}.pdf`,n,{base64:!0})}e.generateAsync({type:"blob"}).then((t=>{(0,xs.saveAs)(t,"results.zip")}))}(t.resultCards)));const n=()=>{Bs.classList.remove("disabled")};Fs.addEventListener("click",(()=>async function(t,e){try{const n=await createImageBitmap(t.cardImg),i=new OffscreenCanvas(n.width,n.height),o=t.guestList,a=[];t.resultContainerEl.innerHTML="",t.actionButtons.forEach((t=>{t.classList.add("disabled")}));const s=new Worker(new URL(r.p+r.u(536),r.b));s.postMessage({canvas:i,cardImg:n,guestList:o,guestConfig:t.guest},[i]),s.onmessage=r=>{switch(r.data.type){case"progress":{a.push({filename:r.data.filename,pdfBase64:r.data.pdfBase64});const e=`Processed ${r.data.current} cards. Last processed: ${r.data.guest}`;t.progressTextEl.innerHTML=e;const i=document.createElement("canvas"),o=400,s=o*n.height/n.width;i.width=o,i.height=s,i.style.margin="5px",i.getContext("2d").drawImage(r.data.finalImg,0,0,o,s),t.resultContainerEl.appendChild(i);break}case"end":t.resultCards=a,e(),t.actionButtons.forEach((t=>{t.classList.remove("disabled")}));break;case"info":console.log("W:",r.data);break;default:throw{error:"Unknown message from worker",message:r.data}}}}catch(t){console.log(t)}}(As,n))),function(){const t=document.querySelector("#textColorInput"),e=document.querySelector(".textColorPreview");t.value=As.guest.color,e.style.backgroundColor=As.guest.color;const r=/^#[A-Fa-f0-9]{6}$/;t.addEventListener("input",(n=>{const i=t.value;null!=i.match(r)?(t.classList.remove("error"),e.style.backgroundColor=i,As.guest.color=i,Is()):t.classList.add("error")}));const n=document.querySelector("#textSizeInput");n.value=As.guest.font.size;const i=/^[0-9]+(\.[0-9]*)?$/;n.addEventListener("input",(t=>{const e=n.value,r=e.match(i),o=parseFloat(e);null==r||isNaN(o)?n.classList.add("error"):(n.classList.remove("error"),As.guest.font.size=o,Is())}));const o=document.querySelector("#textPrefixInput"),a=document.querySelector("#textSuffixInput"),s=document.querySelector("#textPreviewContentInput");o.value=As.guest.prefix,a.value=As.guest.suffix,s.value=As.previewTextContent,o.addEventListener("input",(t=>{zs(o.value,["guest","prefix"])})),a.addEventListener("input",(t=>{zs(a.value,["guest","suffix"])})),s.addEventListener("input",(t=>{zs(s.value,["previewTextContent"])}))}()}({cardImg:void 0,previewWidth:void 0,previewTextContent:"John Doe & Jane Citizen",guest:{prefix:"Dear ",suffix:",",lineBreakCharacter:"#",color:"#52644e",font:{family:"Now Alt",weight:500,size:32,base64:void 0},position:{y:530}},guestList:void 0,resultCards:[],resultContainerEl:void 0,progressTextEl:void 0,actionButtons:void 0})}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.exports}r.m=t,r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.u=t=>t+".1cb35b8fd4135cf259f8.js",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.p="",r.b=document.baseURI||self.location.href,r(2194)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,