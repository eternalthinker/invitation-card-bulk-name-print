(()=>{"use strict";var e,t,a={536:(e,t,a)=>{var r=a(9055);function n(e,t,a,r){const n=e.getContext("2d");n.clearRect(0,0,e.width,e.height),n.drawImage(t,0,0);const o=r.font,i=`${o.weight} ${o.size}px "${o.family}"`;n.font=i,n.fillStyle=r.color,n.textBaseline="top";const s=n.measureText(a).width;n.fillText(a,(e.width-s)/2,r.position.y)}async function o(e){const t=await r.PDFDocument.create(),a=t.addPage([e.width,e.height]),n=await e.convertToBlob({type:"image/png"}),o=await n.arrayBuffer(),i=await t.embedPng(o);return a.drawImage(i,{x:0,y:0,width:i.width,height:i.height}),await t.saveAsBase64()}a(4043),a(3162);const i=a.p+"fonts/34cd748d760d618c54403a69086e4f99.otf";onmessage=async e=>{try{const{guestConfig:t}=e.data,a=t.font.base64||i,r=new FontFace(t.font.family,`url(${a})`);self.fonts.add(r),await r.load(),await async function(e){const{canvas:t,guestList:a,cardImg:r,guestConfig:i}=e;for(let e=0;e<a.length;++e){const s=a[e];if(0===s.length)return;n(t,r,`${i.prefix}${s}${i.suffix}`.toUpperCase(),i);const f=await o(t);postMessage({type:"progress",current:e+1,guest:s,finalImg:t.transferToImageBitmap(),pdfBase64:f,filename:s.replace(/\W+/g,"_").toLowerCase()})}}(e.data),postMessage({type:"end"})}catch(e){postMessage({type:"error",error:e})}}}},r={};function n(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return a[e].call(o.exports,o,o.exports,n),o.exports}n.m=a,n.x=()=>{var e=n.O(void 0,[841],(()=>n(536)));return n.O(e)},e=[],n.O=(t,a,r,o)=>{if(!a){var i=1/0;for(l=0;l<e.length;l++){for(var[a,r,o]=e[l],s=!0,f=0;f<a.length;f++)(!1&o||i>=o)&&Object.keys(n.O).every((e=>n.O[e](a[f])))?a.splice(f--,1):(s=!1,o<i&&(i=o));if(s){e.splice(l--,1);var c=r();void 0!==c&&(t=c)}}return t}o=o||0;for(var l=e.length;l>0&&e[l-1][2]>o;l--)e[l]=e[l-1];e[l]=[a,r,o]},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce(((t,a)=>(n.f[a](e,t),t)),[])),n.u=e=>e+"."+{536:"a84bdecfda685e20fcf8",841:"9f845d4e0f943240fb0a"}[e]+".js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.p="",(()=>{n.b=self.location+"";var e={536:1};n.f.i=(t,a)=>{e[t]||importScripts(n.p+n.u(t))};var t=self.webpackChunkinvitation_card_bulk_name_print=self.webpackChunkinvitation_card_bulk_name_print||[],a=t.push.bind(t);t.push=t=>{var[r,o,i]=t;for(var s in o)n.o(o,s)&&(n.m[s]=o[s]);for(i&&i(n);r.length;)e[r.pop()]=1;a(t)}})(),t=n.x,n.x=()=>n.e(841).then(t),n.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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REc0RCxHQUFTQSxFQUFRN0QsR0FDZFksRUFBUzVCLFFBQ2RzRSxFQUFnQjFDLEVBQVNrRCxPQUFTLEVBQ25DTCxFQUEyQnBGLEssR1puQnhCekMsRUFBT29FLEVBQW9CL0IsRUFDL0IrQixFQUFvQi9CLEVBQUksSUFDaEIrQixFQUFvQjVCLEVBQUUsS0FBSzJGLEtBQUtuSSxHYURkb0UsRUFBb0IvQixLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW52aXRhdGlvbi1jYXJkLWJ1bGstbmFtZS1wcmludC93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL2ludml0YXRpb24tY2FyZC1idWxrLW5hbWUtcHJpbnQvd2VicGFjay9ydW50aW1lL3N0YXJ0dXAgY2h1bmsgZGVwZW5kZW5jaWVzIiwid2VicGFjazovL2ludml0YXRpb24tY2FyZC1idWxrLW5hbWUtcHJpbnQvLi9zcmMvYWRkX25hbWVzX3RvX2NhcmQuanMiLCJ3ZWJwYWNrOi8vaW52aXRhdGlvbi1jYXJkLWJ1bGstbmFtZS1wcmludC8uL3NyYy9mb250cy9Ob3dBbHQtTWVkaXVtLm90ZiIsIndlYnBhY2s6Ly9pbnZpdGF0aW9uLWNhcmQtYnVsay1uYW1lLXByaW50Ly4vc3JjL2dlbmVyYXRlX2NhcmRzX3dvcmtlci5qcyIsIndlYnBhY2s6Ly9pbnZpdGF0aW9uLWNhcmQtYnVsay1uYW1lLXByaW50L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2ludml0YXRpb24tY2FyZC1idWxrLW5hbWUtcHJpbnQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vaW52aXRhdGlvbi1jYXJkLWJ1bGstbmFtZS1wcmludC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vaW52aXRhdGlvbi1jYXJkLWJ1bGstbmFtZS1wcmludC93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL2ludml0YXRpb24tY2FyZC1idWxrLW5hbWUtcHJpbnQvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2ludml0YXRpb24tY2FyZC1idWxrLW5hbWUtcHJpbnQvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9pbnZpdGF0aW9uLWNhcmQtYnVsay1uYW1lLXByaW50L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vaW52aXRhdGlvbi1jYXJkLWJ1bGstbmFtZS1wcmludC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9pbnZpdGF0aW9uLWNhcmQtYnVsay1uYW1lLXByaW50L3dlYnBhY2svcnVudGltZS9pbXBvcnRTY3JpcHRzIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vaW52aXRhdGlvbi1jYXJkLWJ1bGstbmFtZS1wcmludC93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIG5leHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLng7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnggPSAoKSA9PiB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoODQxKS50aGVuKG5leHQpO1xufTsiLCJpbXBvcnQgeyBQREZEb2N1bWVudCB9IGZyb20gJ3BkZi1saWInO1xyXG5pbXBvcnQgKiBhcyBKU1ppcCBmcm9tICdqc3ppcCc7XHJcbmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZE5hbWVzVG9DYXJkKGNvbmZpZywgb25GaW5pc2gpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgY2FyZEltZyA9IGF3YWl0IGNyZWF0ZUltYWdlQml0bWFwKGNvbmZpZy5jYXJkSW1nKTtcclxuICAgIGNvbnN0IG9mZnNjcmVlbkNhbnZhcyA9IG5ldyBPZmZzY3JlZW5DYW52YXMoY2FyZEltZy53aWR0aCwgY2FyZEltZy5oZWlnaHQpO1xyXG4gICAgY29uc3QgZ3Vlc3RMaXN0ID0gY29uZmlnLmd1ZXN0TGlzdDtcclxuICAgIFxyXG4gICAgY29uc3QgcGRmQmFzZTY0TGlzdCA9IFtdO1xyXG4gICAgY29uZmlnLnJlc3VsdENvbnRhaW5lckVsLmlubmVySFRNTCA9ICcnO1xyXG4gICAgY29uZmlnLmFjdGlvbkJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XHJcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcihcclxuICAgICAgbmV3IFVSTCgnLi9nZW5lcmF0ZV9jYXJkc193b3JrZXIuanMnLCBpbXBvcnQubWV0YS51cmwpLFxyXG4gICAgKTtcclxuICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7XHJcbiAgICAgIGNhbnZhczogb2Zmc2NyZWVuQ2FudmFzLFxyXG4gICAgICBjYXJkSW1nLFxyXG4gICAgICBndWVzdExpc3QsXHJcbiAgICAgIGd1ZXN0Q29uZmlnOiBjb25maWcuZ3Vlc3QsXHJcbiAgICB9LCBbb2Zmc2NyZWVuQ2FudmFzXSk7XHJcblxyXG4gICAgd29ya2VyLm9ubWVzc2FnZSA9IChlKSA9PiB7XHJcbiAgICAgIHN3aXRjaCAoZS5kYXRhLnR5cGUpIHtcclxuICAgICAgICBjYXNlICdwcm9ncmVzcyc6XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcGRmQmFzZTY0TGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgZmlsZW5hbWU6IGUuZGF0YS5maWxlbmFtZSxcclxuICAgICAgICAgICAgcGRmQmFzZTY0OiBlLmRhdGEucGRmQmFzZTY0LFxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgY29uc3QgcHJvZ3Jlc3NUZXh0ID0gYFByb2Nlc3NlZCAke2UuZGF0YS5jdXJyZW50fSBjYXJkcy4gTGFzdCBwcm9jZXNzZWQ6ICR7ZS5kYXRhLmd1ZXN0fWA7XHJcbiAgICAgICAgICBjb25maWcucHJvZ3Jlc3NUZXh0RWwuaW5uZXJIVE1MID0gcHJvZ3Jlc3NUZXh0O1xyXG5cclxuICAgICAgICAgIGNvbnN0IHJlc3VsdENhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgICAgICAgY29uc3QgdyA9IDQwMDtcclxuICAgICAgICAgIGNvbnN0IGggPSB3ICogY2FyZEltZy5oZWlnaHQgLyBjYXJkSW1nLndpZHRoO1xyXG4gICAgICAgICAgcmVzdWx0Q2FudmFzLndpZHRoID0gdztcclxuICAgICAgICAgIHJlc3VsdENhbnZhcy5oZWlnaHQgPSBoO1xyXG4gICAgICAgICAgcmVzdWx0Q2FudmFzLnN0eWxlLm1hcmdpbiA9ICc1cHgnO1xyXG4gICAgICAgICAgY29uc3QgY3R4ID0gcmVzdWx0Q2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgICBjdHguZHJhd0ltYWdlKGUuZGF0YS5maW5hbEltZywgMCwgMCwgdywgaCk7XHJcbiAgICAgICAgICBjb25maWcucmVzdWx0Q29udGFpbmVyRWwuYXBwZW5kQ2hpbGQocmVzdWx0Q2FudmFzKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlICdlbmQnOlxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGNvbmZpZy5yZXN1bHRDYXJkcyA9IHBkZkJhc2U2NExpc3Q7XHJcbiAgICAgICAgICBvbkZpbmlzaCgpO1xyXG4gICAgICAgICAgY29uZmlnLmFjdGlvbkJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHRocm93ICh7IGVycm9yOiAnVW5rbm93biBtZXNzYWdlIGZyb20gd29ya2VyJywgbWVzc2FnZTogZS5kYXRhfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG4gIGNhdGNoIChlcnIpIHtcclxuICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRaaXAocGRmQmFzZTY0TGlzdCkge1xyXG4gIGNvbnN0IHppcCA9IG5ldyBKU1ppcCgpO1xyXG4gIGZvciAoY29uc3QgcGRmSW5mbyBvZiBwZGZCYXNlNjRMaXN0KSB7XHJcbiAgICBjb25zdCB7IGZpbGVuYW1lLCBwZGZCYXNlNjQgfSA9IHBkZkluZm87XHJcbiAgICB6aXAuZmlsZShgJHtmaWxlbmFtZX0ucGRmYCwgcGRmQmFzZTY0LCB7IGJhc2U2NDogdHJ1ZSB9KTtcclxuICB9O1xyXG4gIHppcC5nZW5lcmF0ZUFzeW5jKHsgdHlwZTogJ2Jsb2InfSlcclxuICAgIC50aGVuKGNvbnRlbnQgPT4ge1xyXG4gICAgICBzYXZlQXMoY29udGVudCwgXCJyZXN1bHRzLnppcFwiKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyBVc2VkIGJ5IHdlYiB3b3JrZXJcclxuZXhwb3J0IGZ1bmN0aW9uIGFkZE5hbWVUb0NhcmQoY2FudmFzLCBjYXJkSW1nLCBuYW1lU3RyLCBndWVzdENvbmZpZykge1xyXG4gIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICBjdHguZHJhd0ltYWdlKGNhcmRJbWcsIDAsIDApO1xyXG4gIGNvbnN0IGZvbnQgPSBndWVzdENvbmZpZy5mb250O1xyXG4gIGNvbnN0IGZvbnRTdHIgPSBgJHtmb250LndlaWdodH0gJHtmb250LnNpemV9cHggXCIke2ZvbnQuZmFtaWx5fVwiYDtcclxuICBjdHguZm9udCA9IGZvbnRTdHI7XHJcbiAgY3R4LmZpbGxTdHlsZSA9IGd1ZXN0Q29uZmlnLmNvbG9yO1xyXG4gIGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcclxuICBjb25zdCB0ZXh0V2lkdGggPSBjdHgubWVhc3VyZVRleHQobmFtZVN0cikud2lkdGg7XHJcbiAgY3R4LmZpbGxUZXh0KG5hbWVTdHIsIChjYW52YXMud2lkdGggLSB0ZXh0V2lkdGgpIC8gMiwgZ3Vlc3RDb25maWcucG9zaXRpb24ueSk7XHJcbn1cclxuXHJcbi8vIFVzZWQgYnkgd2ViIHdvcmtlclxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1nVG9QZGYoY2FudmFzKSB7XHJcbiAgY29uc3QgcGRmRG9jID0gYXdhaXQgUERGRG9jdW1lbnQuY3JlYXRlKCk7XHJcbiAgY29uc3QgcGFnZSA9IHBkZkRvYy5hZGRQYWdlKFtjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHRdKTtcclxuICBjb25zdCBibG9iID0gYXdhaXQgY2FudmFzLmNvbnZlcnRUb0Jsb2Ioe1xyXG4gICAgdHlwZTogXCJpbWFnZS9wbmdcIixcclxuICB9KTtcclxuICBjb25zdCBpbWdCdWZmZXIgPSBhd2FpdCBibG9iLmFycmF5QnVmZmVyKCk7XHJcbiAgY29uc3QgY2FyZEltZyA9IGF3YWl0IHBkZkRvYy5lbWJlZFBuZyhpbWdCdWZmZXIpO1xyXG4gIHBhZ2UuZHJhd0ltYWdlKGNhcmRJbWcsIHtcclxuICAgIHg6IDAsXHJcbiAgICB5OiAwLFxyXG4gICAgd2lkdGg6IGNhcmRJbWcud2lkdGgsXHJcbiAgICBoZWlnaHQ6IGNhcmRJbWcuaGVpZ2h0LFxyXG4gIH0pO1xyXG4gIGNvbnN0IHBkZkJhc2U2NCA9IGF3YWl0IHBkZkRvYy5zYXZlQXNCYXNlNjQoKTtcclxuICByZXR1cm4gcGRmQmFzZTY0O1xyXG59XHJcblxyXG4vKlxyXG4gKiBOb3QgdXNlZCwgYXMgY2FyZCBwcmV2aWV3IGlzIHNob3duIHRocm91Z2ggYSBjYW52YXNcclxuICpcclxuYXN5bmMgZnVuY3Rpb24gc2hvd0lmcmFtZShwZGZCYXNlNjQpIHtcclxuICBjb25zdCBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcclxuICBpZnJhbWUuc3JjID0gYGRhdGE6YXBwbGljYXRpb24vcGRmO2Jhc2U2NCwke3BkZkJhc2U2NH1gO1xyXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcclxufVxyXG4qL1xyXG5cclxuLypcclxuICogTm90IHVzZWQsIGFzIHNob3dpbmcgYSBwcmV2aWV3IG9ubHkgcmVxdWlyZXMgc2hvd2luZyB0aGUgaW1hZ2UsXHJcbiAqIGFuZCBub3QgbmVjZXNzYXJpbHkgcmVuZGVyaW5nIHRoZSBmaW5hbCBQREZcclxuICogXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaG93UGRmKHBkZkJhc2U2NCwgc2hvd0VsKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXMsIHJlaikgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcGRmQmluYXJ5ID0gYXRvYihwZGZCYXNlNjQpO1xyXG4gICAgICBjb25zdCBsb2FkaW5nVGFzayA9IHBkZmpzTGliLmdldERvY3VtZW50KHsgZGF0YTogcGRmQmluYXJ5IH0pO1xyXG4gICAgICBjb25zdCBwZGYgPSBhd2FpdCBsb2FkaW5nVGFzay5wcm9taXNlO1xyXG4gICAgICBjb25zdCBwYWdlTnVtYmVyID0gMTtcclxuICAgICAgY29uc3QgcGFnZSA9IGF3YWl0IHBkZi5nZXRQYWdlKHBhZ2VOdW1iZXIpO1xyXG5cclxuICAgICAgY29uc3Qgdmlld3BvcnQgPSBwYWdlLmdldFZpZXdwb3J0KHsgc2NhbGU6IDAuMyB9KTtcclxuICAgICAgY29uc3QgcGRmQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgIHNob3dFbC5hcHBlbmRDaGlsZChwZGZDYW52YXMpO1xyXG4gICAgICBjb25zdCBwZGZDdHggPSBwZGZDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgcGRmQ2FudmFzLndpZHRoID0gdmlld3BvcnQud2lkdGg7XHJcbiAgICAgIHBkZkNhbnZhcy5oZWlnaHQgPSB2aWV3cG9ydC5oZWlnaHQ7XHJcbiAgICAgIGNvbnN0IHJlbmRlckN0eCA9IHtcclxuICAgICAgICBjYW52YXNDb250ZXh0OiBwZGZDdHgsXHJcbiAgICAgICAgdmlld3BvcnQsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCByZW5kZXJUYXNrID0gcGFnZS5yZW5kZXIocmVuZGVyQ3R4KTtcclxuICAgICAgYXdhaXQgcmVuZGVyVGFzay5wcm9taXNlO1xyXG4gICAgICByZXR1cm4gcmVzKHRydWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2goZXJyKSB7XHJcbiAgICAgIHJlaihlcnIpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcbiovXHJcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250cy8zNGNkNzQ4ZDc2MGQ2MThjNTQ0MDNhNjkwODZlNGY5OS5vdGZcIjsiLCJpbXBvcnQgeyBhZGROYW1lVG9DYXJkLCBpbWdUb1BkZiB9IGZyb20gJy4vYWRkX25hbWVzX3RvX2NhcmQnO1xyXG5pbXBvcnQgZGVmYXVsdEZvbnQgZnJvbSAnLi9mb250cy9Ob3dBbHQtTWVkaXVtLm90Zic7XHJcblxyXG5vbm1lc3NhZ2UgPSBhc3luYyAoZSkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IGd1ZXN0Q29uZmlnIH0gPSBlLmRhdGE7XHJcbiAgICBjb25zdCBmb250UGF0aCA9IGd1ZXN0Q29uZmlnLmZvbnQuYmFzZTY0IHx8IGRlZmF1bHRGb250O1xyXG4gICAgY29uc3QgZm9udEZhY2UgPSBuZXcgRm9udEZhY2UoXHJcbiAgICAgIGd1ZXN0Q29uZmlnLmZvbnQuZmFtaWx5LFxyXG4gICAgICBgdXJsKCR7Zm9udFBhdGh9KWAsXHJcbiAgICApO1xyXG4gICAgLy8gYWRkIGl0IHRvIHRoZSBsaXN0IG9mIGZvbnRzIG91ciB3b3JrZXIgc3VwcG9ydHNcclxuICAgIHNlbGYuZm9udHMuYWRkKGZvbnRGYWNlKTtcclxuICAgIC8vIGxvYWQgdGhlIGZvbnRcclxuICAgIGF3YWl0IGZvbnRGYWNlLmxvYWQoKVxyXG5cclxuICAgIGF3YWl0IGFkZE5hbWVzVG9DYXJkKGUuZGF0YSk7XHJcblxyXG4gICAgcG9zdE1lc3NhZ2Uoe1xyXG4gICAgICB0eXBlOiAnZW5kJyxcclxuICAgIH0pO1xyXG4gIH1cclxuICBjYXRjaCAoZXJyKSB7XHJcbiAgICBwb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6ICdlcnJvcicsXHJcbiAgICAgIGVycm9yOiBlcnIsXHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcblxyXG5hc3luYyBmdW5jdGlvbiBhZGROYW1lc1RvQ2FyZChkYXRhKSB7XHJcbiAgY29uc3Qge1xyXG4gICAgY2FudmFzLFxyXG4gICAgZ3Vlc3RMaXN0LFxyXG4gICAgY2FyZEltZyxcclxuICAgIGd1ZXN0Q29uZmlnLFxyXG4gIH0gPSBkYXRhO1xyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBndWVzdExpc3QubGVuZ3RoOyArK2kpIHtcclxuICAgIGNvbnN0IGd1ZXN0ID0gZ3Vlc3RMaXN0W2ldO1xyXG4gICAgaWYgKGd1ZXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBuYW1lU3RyID0gYCR7Z3Vlc3RDb25maWcucHJlZml4fSR7Z3Vlc3R9JHtndWVzdENvbmZpZy5zdWZmaXh9YC50b1VwcGVyQ2FzZSgpO1xyXG4gICAgYWRkTmFtZVRvQ2FyZChjYW52YXMsIGNhcmRJbWcsIG5hbWVTdHIsIGd1ZXN0Q29uZmlnKTtcclxuICAgIGNvbnN0IHBkZkJhc2U2NCA9IGF3YWl0IGltZ1RvUGRmKGNhbnZhcyk7XHJcbiAgICBwb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6ICdwcm9ncmVzcycsXHJcbiAgICAgIGN1cnJlbnQ6IGkrMSxcclxuICAgICAgZ3Vlc3QsXHJcbiAgICAgIGZpbmFsSW1nOiBjYW52YXMudHJhbnNmZXJUb0ltYWdlQml0bWFwKCksXHJcbiAgICAgIHBkZkJhc2U2NCxcclxuICAgICAgZmlsZW5hbWU6IGd1ZXN0LnJlcGxhY2UoL1xcVysvZywgJ18nKS50b0xvd2VyQ2FzZSgpLFxyXG4gICAgfSlcclxuICAgIFxyXG4gIH07XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4vLyB0aGUgc3RhcnR1cCBmdW5jdGlvblxuX193ZWJwYWNrX3JlcXVpcmVfXy54ID0gKCkgPT4ge1xuXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcblx0Ly8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG5cdHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzg0MV0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDUzNikpKVxuXHRfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuXHRyZXR1cm4gX193ZWJwYWNrX2V4cG9ydHNfXztcbn07XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rcyBhbmQgc2libGluZyBjaHVua3MgZm9yIHRoZSBlbnRyeXBvaW50XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyB7XCI1MzZcIjpcIjRiYmRmYjNjZDYxZjllNzIzMDc3XCIsXCI4NDFcIjpcIjZhOTEwZTU0OTY1NmIzYzFmYmEyXCJ9W2NodW5rSWRdICsgXCIuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBzZWxmLmxvY2F0aW9uICsgXCJcIjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBjaHVua3Ncbi8vIFwiMVwiIG1lYW5zIFwiYWxyZWFkeSBsb2FkZWRcIlxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0NTM2OiAxXG59O1xuXG4vLyBpbXBvcnRTY3JpcHRzIGNodW5rIGxvYWRpbmdcbnZhciBpbnN0YWxsQ2h1bmsgPSAoZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdHdoaWxlKGNodW5rSWRzLmxlbmd0aClcblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZHMucG9wKCldID0gMTtcblx0cGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmkgPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0Ly8gXCIxXCIgaXMgdGhlIHNpZ25hbCBmb3IgXCJhbHJlYWR5IGxvYWRlZFwiXG5cdGlmKCFpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0aW1wb3J0U2NyaXB0cyhfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCkpO1xuXHRcdH1cblx0fVxufTtcblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtpbnZpdGF0aW9uX2NhcmRfYnVsa19uYW1lX3ByaW50XCJdID0gc2VsZltcIndlYnBhY2tDaHVua2ludml0YXRpb25fY2FyZF9idWxrX25hbWVfcHJpbnRcIl0gfHwgW107XG52YXIgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24gPSBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IGluc3RhbGxDaHVuaztcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdCIsIi8vIHJ1biBzdGFydHVwXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18ueCgpO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwibmV4dCIsImFkZE5hbWVUb0NhcmQiLCJjYW52YXMiLCJjYXJkSW1nIiwibmFtZVN0ciIsImd1ZXN0Q29uZmlnIiwiY3R4IiwiZ2V0Q29udGV4dCIsImNsZWFyUmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwiZHJhd0ltYWdlIiwiZm9udCIsImZvbnRTdHIiLCJ3ZWlnaHQiLCJzaXplIiwiZmFtaWx5IiwiZmlsbFN0eWxlIiwiY29sb3IiLCJ0ZXh0QmFzZWxpbmUiLCJ0ZXh0V2lkdGgiLCJtZWFzdXJlVGV4dCIsImZpbGxUZXh0IiwicG9zaXRpb24iLCJ5IiwiYXN5bmMiLCJpbWdUb1BkZiIsInBkZkRvYyIsIlBERkRvY3VtZW50IiwicGFnZSIsImFkZFBhZ2UiLCJibG9iIiwiY29udmVydFRvQmxvYiIsInR5cGUiLCJpbWdCdWZmZXIiLCJhcnJheUJ1ZmZlciIsImVtYmVkUG5nIiwieCIsInNhdmVBc0Jhc2U2NCIsIm9ubWVzc2FnZSIsImUiLCJkYXRhIiwiZm9udFBhdGgiLCJiYXNlNjQiLCJmb250RmFjZSIsIkZvbnRGYWNlIiwic2VsZiIsImZvbnRzIiwiYWRkIiwibG9hZCIsImd1ZXN0TGlzdCIsImkiLCJsZW5ndGgiLCJndWVzdCIsInByZWZpeCIsInN1ZmZpeCIsInRvVXBwZXJDYXNlIiwicGRmQmFzZTY0IiwicG9zdE1lc3NhZ2UiLCJjdXJyZW50IiwiZmluYWxJbWciLCJ0cmFuc2ZlclRvSW1hZ2VCaXRtYXAiLCJmaWxlbmFtZSIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImVyciIsImVycm9yIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIiwibSIsIl9fd2VicGFja19leHBvcnRzX18iLCJPIiwicmVzdWx0IiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJmdWxmaWxsZWQiLCJqIiwiT2JqZWN0Iiwia2V5cyIsImV2ZXJ5Iiwia2V5Iiwic3BsaWNlIiwiciIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImYiLCJjaHVua0lkIiwiUHJvbWlzZSIsImFsbCIsInJlZHVjZSIsInByb21pc2VzIiwidSIsImciLCJnbG9iYWxUaGlzIiwidGhpcyIsIkZ1bmN0aW9uIiwid2luZG93Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsImIiLCJsb2NhdGlvbiIsImluc3RhbGxlZENodW5rcyIsImltcG9ydFNjcmlwdHMiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsInB1c2giLCJiaW5kIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwicG9wIiwidGhlbiJdLCJzb3VyY2VSb290IjoiIn0=