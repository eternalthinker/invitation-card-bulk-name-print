/*! For license information please see 841.9f845d4e0f943240fb0a.js.LICENSE.txt */
(self.webpackChunkinvitation_card_bulk_name_print=self.webpackChunkinvitation_card_bulk_name_print||[]).push([[841],{4869:(t,e,r)=>{"use strict";r.d(e,{e:()=>u});var n=r(2467),i=r(8172),o=(0,n.j4)(i),a=JSON.parse(o),s=function(t,e){var r=this;this.canEncodeUnicodeCodePoint=function(t){return t in r.unicodeMappings},this.encodeUnicodeCodePoint=function(t){var e=r.unicodeMappings[t];if(!e){var i=String.fromCharCode(t),o="0x"+(0,n.Sk)(t.toString(16),4,"0"),a=r.name+' cannot encode "'+i+'" ('+o+")";throw new Error(a)}return{code:e[0],name:e[1]}},this.name=t,this.supportedCodePoints=Object.keys(e).map(Number).sort((function(t,e){return t-e})),this.unicodeMappings=e},u={Symbol:new s("Symbol",a.symbol),ZapfDingbats:new s("ZapfDingbats",a.zapfdingbats),WinAnsi:new s("WinAnsi",a.win1252)}},9831:(t,e,r)=>{"use strict";r.d(e,{S:()=>n,Z:()=>y});var n,i=r(2467),o=r(8127),a=r(4139),s=r(5222),u=r(3533),c=r(6672),h=r(3211),l=r(9566),f=r(1182),d=r(6065),p=r(4980),g=r(7687),v={Courier:u,"Courier-Bold":o,"Courier-Oblique":s,"Courier-BoldOblique":a,Helvetica:f,"Helvetica-Bold":c,"Helvetica-Oblique":l,"Helvetica-BoldOblique":h,"Times-Roman":r(3470),"Times-Bold":d,"Times-Italic":g,"Times-BoldItalic":p,Symbol:r(1963),ZapfDingbats:r(3857)};!function(t){t.Courier="Courier",t.CourierBold="Courier-Bold",t.CourierOblique="Courier-Oblique",t.CourierBoldOblique="Courier-BoldOblique",t.Helvetica="Helvetica",t.HelveticaBold="Helvetica-Bold",t.HelveticaOblique="Helvetica-Oblique",t.HelveticaBoldOblique="Helvetica-BoldOblique",t.TimesRoman="Times-Roman",t.TimesRomanBold="Times-Bold",t.TimesRomanItalic="Times-Italic",t.TimesRomanBoldItalic="Times-BoldItalic",t.Symbol="Symbol",t.ZapfDingbats="ZapfDingbats"}(n||(n={}));var m={},y=function(){function t(){var t=this;this.getWidthOfGlyph=function(e){return t.CharWidths[e]},this.getXAxisKerningForPair=function(e,r){return(t.KernPairXAmounts[e]||{})[r]}}return t.load=function(e){var r=m[e];if(r)return r;var n=(0,i.j4)(v[e]),o=Object.assign(new t,JSON.parse(n));return o.CharWidths=o.CharMetrics.reduce((function(t,e){return t[e.N]=e.WX,t}),{}),o.KernPairXAmounts=o.KernPairs.reduce((function(t,e){var r=e[0],n=e[1],i=e[2];return t[r]||(t[r]={}),t[r][n]=i,t}),{}),m[e]=o,o},t}()},6576:(t,e,r)=>{"use strict";r.d(e,{Zx:()=>n.Z,S4:()=>n.S,e$:()=>i.e});var n=r(9831),i=r(4869)},2467:(t,e,r)=>{"use strict";r.d(e,{j4:()=>u,Sk:()=>c});for(var n=r(9591),i=r.n(n),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=new Uint8Array(256),s=0;s<o.length;s++)a[o.charCodeAt(s)]=s;var u=function(t){return function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e}(i().inflate(function(t){var e,r,n,i,o,s=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(s--,"="===t[t.length-2]&&s--);var h=new Uint8Array(s);for(e=0;e<u;e+=4)r=a[t.charCodeAt(e)],n=a[t.charCodeAt(e+1)],i=a[t.charCodeAt(e+2)],o=a[t.charCodeAt(e+3)],h[c++]=r<<2|n>>4,h[c++]=(15&n)<<4|i>>2,h[c++]=(3&i)<<6|63&o;return h}(t)))},c=function(t,e,r){for(var n="",i=0,o=e-t.length;i<o;i++)n+=r;return n+t}},8765:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n,i,o,a=r(9591),s=r.n(a),u={toRGBA8:function(t){var e=t.width,r=t.height;if(null==t.tabs.acTL)return[u.toRGBA8.decodeImage(t.data,e,r,t).buffer];var n=[];null==t.frames[0].data&&(t.frames[0].data=t.data);for(var i=e*r*4,o=new Uint8Array(i),a=new Uint8Array(i),s=new Uint8Array(i),c=0;c<t.frames.length;c++){var h=t.frames[c],l=h.rect.x,f=h.rect.y,d=h.rect.width,p=h.rect.height,g=u.toRGBA8.decodeImage(h.data,d,p,t);if(0!=c)for(var v=0;v<i;v++)s[v]=o[v];if(0==h.blend?u._copyTile(g,d,p,o,e,r,l,f,0):1==h.blend&&u._copyTile(g,d,p,o,e,r,l,f,1),n.push(o.buffer.slice(0)),0==h.dispose);else if(1==h.dispose)u._copyTile(a,d,p,o,e,r,l,f,0);else if(2==h.dispose)for(v=0;v<i;v++)o[v]=s[v]}return n}};u.toRGBA8.decodeImage=function(t,e,r,n){var i=e*r,o=u.decode._getBPP(n),a=Math.ceil(e*o/8),s=new Uint8Array(4*i),c=new Uint32Array(s.buffer),h=n.ctype,l=n.depth,f=u._bin.readUshort;if(Date.now(),6==h){var d=i<<2;if(8==l)for(var p=0;p<d;p+=4)s[p]=t[p],s[p+1]=t[p+1],s[p+2]=t[p+2],s[p+3]=t[p+3];if(16==l)for(p=0;p<d;p++)s[p]=t[p<<1]}else if(2==h){var g=n.tabs.tRNS;if(null==g){if(8==l)for(p=0;p<i;p++){var v=3*p;c[p]=255<<24|t[v+2]<<16|t[v+1]<<8|t[v]}if(16==l)for(p=0;p<i;p++)v=6*p,c[p]=255<<24|t[v+4]<<16|t[v+2]<<8|t[v]}else{var m=g[0],y=g[1],b=g[2];if(8==l)for(p=0;p<i;p++){var w=p<<2;v=3*p,c[p]=255<<24|t[v+2]<<16|t[v+1]<<8|t[v],t[v]==m&&t[v+1]==y&&t[v+2]==b&&(s[w+3]=0)}if(16==l)for(p=0;p<i;p++)w=p<<2,v=6*p,c[p]=255<<24|t[v+4]<<16|t[v+2]<<8|t[v],f(t,v)==m&&f(t,v+2)==y&&f(t,v+4)==b&&(s[w+3]=0)}}else if(3==h){var k=n.tabs.PLTE,x=n.tabs.tRNS,Z=x?x.length:0;if(1==l)for(var S=0;S<r;S++){var C=S*a,F=S*e;for(p=0;p<e;p++){w=F+p<<2;var T=3*(A=t[C+(p>>3)]>>7-((7&p)<<0)&1);s[w]=k[T],s[w+1]=k[T+1],s[w+2]=k[T+2],s[w+3]=A<Z?x[A]:255}}if(2==l)for(S=0;S<r;S++)for(C=S*a,F=S*e,p=0;p<e;p++)w=F+p<<2,T=3*(A=t[C+(p>>2)]>>6-((3&p)<<1)&3),s[w]=k[T],s[w+1]=k[T+1],s[w+2]=k[T+2],s[w+3]=A<Z?x[A]:255;if(4==l)for(S=0;S<r;S++)for(C=S*a,F=S*e,p=0;p<e;p++)w=F+p<<2,T=3*(A=t[C+(p>>1)]>>4-((1&p)<<2)&15),s[w]=k[T],s[w+1]=k[T+1],s[w+2]=k[T+2],s[w+3]=A<Z?x[A]:255;if(8==l)for(p=0;p<i;p++){var A;w=p<<2,T=3*(A=t[p]),s[w]=k[T],s[w+1]=k[T+1],s[w+2]=k[T+2],s[w+3]=A<Z?x[A]:255}}else if(4==h){if(8==l)for(p=0;p<i;p++){w=p<<2;var O=t[R=p<<1];s[w]=O,s[w+1]=O,s[w+2]=O,s[w+3]=t[R+1]}if(16==l)for(p=0;p<i;p++){var R;w=p<<2,O=t[R=p<<2],s[w]=O,s[w+1]=O,s[w+2]=O,s[w+3]=t[R+2]}}else if(0==h)for(m=n.tabs.tRNS?n.tabs.tRNS:-1,S=0;S<r;S++){var z=S*a,P=S*e;if(1==l)for(var D=0;D<e;D++){var N=(O=255*(t[z+(D>>>3)]>>>7-(7&D)&1))==255*m?0:255;c[P+D]=N<<24|O<<16|O<<8|O}else if(2==l)for(D=0;D<e;D++)N=(O=85*(t[z+(D>>>2)]>>>6-((3&D)<<1)&3))==85*m?0:255,c[P+D]=N<<24|O<<16|O<<8|O;else if(4==l)for(D=0;D<e;D++)N=(O=17*(t[z+(D>>>1)]>>>4-((1&D)<<2)&15))==17*m?0:255,c[P+D]=N<<24|O<<16|O<<8|O;else if(8==l)for(D=0;D<e;D++)N=(O=t[z+D])==m?0:255,c[P+D]=N<<24|O<<16|O<<8|O;else if(16==l)for(D=0;D<e;D++)O=t[z+(D<<1)],N=f(t,z+(D<<p))==m?0:255,c[P+D]=N<<24|O<<16|O<<8|O}return s},u.decode=function(t){for(var e,r=new Uint8Array(t),n=8,i=u._bin,o=i.readUshort,a=i.readUint,s={tabs:{},frames:[]},c=new Uint8Array(r.length),h=0,l=0,f=[137,80,78,71,13,10,26,10],d=0;d<8;d++)if(r[d]!=f[d])throw"The input is not a PNG file!";for(;n<r.length;){var p=i.readUint(r,n);n+=4;var g=i.readASCII(r,n,4);if(n+=4,"IHDR"==g)u.decode._IHDR(r,n,s);else if("IDAT"==g){for(d=0;d<p;d++)c[h+d]=r[n+d];h+=p}else if("acTL"==g)s.tabs[g]={num_frames:a(r,n),num_plays:a(r,n+4)},e=new Uint8Array(r.length);else if("fcTL"==g){var v;0!=l&&((v=s.frames[s.frames.length-1]).data=u.decode._decompress(s,e.slice(0,l),v.rect.width,v.rect.height),l=0);var m={x:a(r,n+12),y:a(r,n+16),width:a(r,n+4),height:a(r,n+8)},y=o(r,n+22);y=o(r,n+20)/(0==y?100:y);var b={rect:m,delay:Math.round(1e3*y),dispose:r[n+24],blend:r[n+25]};s.frames.push(b)}else if("fdAT"==g){for(d=0;d<p-4;d++)e[l+d]=r[n+d+4];l+=p-4}else if("pHYs"==g)s.tabs[g]=[i.readUint(r,n),i.readUint(r,n+4),r[n+8]];else if("cHRM"==g)for(s.tabs[g]=[],d=0;d<8;d++)s.tabs[g].push(i.readUint(r,n+4*d));else if("tEXt"==g){null==s.tabs[g]&&(s.tabs[g]={});var w=i.nextZero(r,n),k=i.readASCII(r,n,w-n),x=i.readASCII(r,w+1,n+p-w-1);s.tabs[g][k]=x}else if("iTXt"==g){null==s.tabs[g]&&(s.tabs[g]={}),w=0;var Z=n;w=i.nextZero(r,Z),k=i.readASCII(r,Z,w-Z),r[Z=w+1],r[Z+1],Z+=2,w=i.nextZero(r,Z),i.readASCII(r,Z,w-Z),Z=w+1,w=i.nextZero(r,Z),i.readUTF8(r,Z,w-Z),Z=w+1,x=i.readUTF8(r,Z,p-(Z-n)),s.tabs[g][k]=x}else if("PLTE"==g)s.tabs[g]=i.readBytes(r,n,p);else if("hIST"==g){var S=s.tabs.PLTE.length/3;for(s.tabs[g]=[],d=0;d<S;d++)s.tabs[g].push(o(r,n+2*d))}else if("tRNS"==g)3==s.ctype?s.tabs[g]=i.readBytes(r,n,p):0==s.ctype?s.tabs[g]=o(r,n):2==s.ctype&&(s.tabs[g]=[o(r,n),o(r,n+2),o(r,n+4)]);else if("gAMA"==g)s.tabs[g]=i.readUint(r,n)/1e5;else if("sRGB"==g)s.tabs[g]=r[n];else if("bKGD"==g)0==s.ctype||4==s.ctype?s.tabs[g]=[o(r,n)]:2==s.ctype||6==s.ctype?s.tabs[g]=[o(r,n),o(r,n+2),o(r,n+4)]:3==s.ctype&&(s.tabs[g]=r[n]);else if("IEND"==g)break;n+=p,i.readUint(r,n),n+=4}return 0!=l&&((v=s.frames[s.frames.length-1]).data=u.decode._decompress(s,e.slice(0,l),v.rect.width,v.rect.height),l=0),s.data=u.decode._decompress(s,c,s.width,s.height),delete s.compress,delete s.interlace,delete s.filter,s},u.decode._decompress=function(t,e,r,n){Date.now();var i=u.decode._getBPP(t),o=Math.ceil(r*i/8),a=new Uint8Array((o+1+t.interlace)*n);return e=u.decode._inflate(e,a),Date.now(),0==t.interlace?e=u.decode._filterZero(e,t,0,r,n):1==t.interlace&&(e=u.decode._readInterlace(e,t)),e},u.decode._inflate=function(t,e){return u.inflateRaw(new Uint8Array(t.buffer,2,t.length-6),e)},u.inflateRaw=((o={}).H={},o.H.N=function(t,e){var r,n,i=Uint8Array,a=0,s=0,u=0,c=0,h=0,l=0,f=0,d=0,p=0;if(3==t[0]&&0==t[1])return e||new i(0);var g=o.H,v=g.b,m=g.e,y=g.R,b=g.n,w=g.A,k=g.Z,x=g.m,Z=null==e;for(Z&&(e=new i(t.length>>>2<<3));0==a;)if(a=v(t,p,1),s=v(t,p+1,2),p+=3,0!=s){if(Z&&(e=o.H.W(e,d+(1<<17))),1==s&&(r=x.J,n=x.h,l=511,f=31),2==s){u=m(t,p,5)+257,c=m(t,p+5,5)+1,h=m(t,p+10,4)+4,p+=14;for(var S=1,C=0;C<38;C+=2)x.Q[C]=0,x.Q[C+1]=0;for(C=0;C<h;C++){var F=m(t,p+3*C,3);x.Q[1+(x.X[C]<<1)]=F,F>S&&(S=F)}p+=3*h,b(x.Q,S),w(x.Q,S,x.u),r=x.w,n=x.d,p=y(x.u,(1<<S)-1,u+c,t,p,x.v);var T=g.V(x.v,0,u,x.C);l=(1<<T)-1;var A=g.V(x.v,u,c,x.D);f=(1<<A)-1,b(x.C,T),w(x.C,T,r),b(x.D,A),w(x.D,A,n)}for(;;){var O=r[k(t,p)&l];p+=15&O;var R=O>>>4;if(R>>>8==0)e[d++]=R;else{if(256==R)break;var z=d+R-254;if(R>264){var P=x.q[R-257];z=d+(P>>>3)+m(t,p,7&P),p+=7&P}var D=n[k(t,p)&f];p+=15&D;var N=D>>>4,B=x.c[N],I=(B>>>4)+v(t,p,15&B);for(p+=15&B;d<z;)e[d]=e[d++-I],e[d]=e[d++-I],e[d]=e[d++-I],e[d]=e[d++-I];d=z}}}else{0!=(7&p)&&(p+=8-(7&p));var E=4+(p>>>3),U=t[E-4]|t[E-3]<<8;Z&&(e=o.H.W(e,d+U)),e.set(new i(t.buffer,t.byteOffset+E,U),d),p=E+U<<3,d+=U}return e.length==d?e:e.slice(0,d)},o.H.W=function(t,e){var r=t.length;if(e<=r)return t;var n=new Uint8Array(r<<1);return n.set(t,0),n},o.H.R=function(t,e,r,n,i,a){for(var s=o.H.e,u=o.H.Z,c=0;c<r;){var h=t[u(n,i)&e];i+=15&h;var l=h>>>4;if(l<=15)a[c]=l,c++;else{var f=0,d=0;16==l?(d=3+s(n,i,2),i+=2,f=a[c-1]):17==l?(d=3+s(n,i,3),i+=3):18==l&&(d=11+s(n,i,7),i+=7);for(var p=c+d;c<p;)a[c]=f,c++}}return i},o.H.V=function(t,e,r,n){for(var i=0,o=0,a=n.length>>>1;o<r;){var s=t[o+e];n[o<<1]=0,n[1+(o<<1)]=s,s>i&&(i=s),o++}for(;o<a;)n[o<<1]=0,n[1+(o<<1)]=0,o++;return i},o.H.n=function(t,e){for(var r,n,i,a,s=o.H.m,u=t.length,c=s.j,h=0;h<=e;h++)c[h]=0;for(h=1;h<u;h+=2)c[t[h]]++;var l=s.K;for(r=0,c[0]=0,n=1;n<=e;n++)r=r+c[n-1]<<1,l[n]=r;for(i=0;i<u;i+=2)0!=(a=t[i+1])&&(t[i]=l[a],l[a]++)},o.H.A=function(t,e,r){for(var n=t.length,i=o.H.m.r,a=0;a<n;a+=2)if(0!=t[a+1])for(var s=a>>1,u=t[a+1],c=s<<4|u,h=e-u,l=t[a]<<h,f=l+(1<<h);l!=f;)r[i[l]>>>15-e]=c,l++},o.H.l=function(t,e){for(var r=o.H.m.r,n=15-e,i=0;i<t.length;i+=2){var a=t[i]<<e-t[i+1];t[i]=r[a]>>>n}},o.H.M=function(t,e,r){r<<=7&e;var n=e>>>3;t[n]|=r,t[n+1]|=r>>>8},o.H.I=function(t,e,r){r<<=7&e;var n=e>>>3;t[n]|=r,t[n+1]|=r>>>8,t[n+2]|=r>>>16},o.H.e=function(t,e,r){return(t[e>>>3]|t[1+(e>>>3)]<<8)>>>(7&e)&(1<<r)-1},o.H.b=function(t,e,r){return(t[e>>>3]|t[1+(e>>>3)]<<8|t[2+(e>>>3)]<<16)>>>(7&e)&(1<<r)-1},o.H.Z=function(t,e){return(t[e>>>3]|t[1+(e>>>3)]<<8|t[2+(e>>>3)]<<16)>>>(7&e)},o.H.i=function(t,e){return(t[e>>>3]|t[1+(e>>>3)]<<8|t[2+(e>>>3)]<<16|t[3+(e>>>3)]<<24)>>>(7&e)},o.H.m=(n=Uint16Array,i=Uint32Array,{K:new n(16),j:new n(16),X:[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],S:[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,999,999,999],T:[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0],q:new n(32),p:[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,65535,65535],z:[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0],c:new i(32),J:new n(512),_:[],h:new n(32),$:[],w:new n(32768),C:[],v:[],d:new n(32768),D:[],u:new n(512),Q:[],r:new n(32768),s:new i(286),Y:new i(30),a:new i(19),t:new i(15e3),k:new n(65536),g:new n(32768)}),function(){for(var t=o.H.m,e=0;e<32768;e++){var r=e;r=(4278255360&(r=(4042322160&(r=(3435973836&(r=(2863311530&r)>>>1|(1431655765&r)<<1))>>>2|(858993459&r)<<2))>>>4|(252645135&r)<<4))>>>8|(16711935&r)<<8,t.r[e]=(r>>>16|r<<16)>>>17}function n(t,e,r){for(;0!=e--;)t.push(0,r)}for(e=0;e<32;e++)t.q[e]=t.S[e]<<3|t.T[e],t.c[e]=t.p[e]<<4|t.z[e];n(t._,144,8),n(t._,112,9),n(t._,24,7),n(t._,8,8),o.H.n(t._,9),o.H.A(t._,9,t.J),o.H.l(t._,9),n(t.$,32,5),o.H.n(t.$,5),o.H.A(t.$,5,t.h),o.H.l(t.$,5),n(t.Q,19,0),n(t.C,286,0),n(t.D,30,0),n(t.v,320,0)}(),o.H.N),u.decode._readInterlace=function(t,e){for(var r=e.width,n=e.height,i=u.decode._getBPP(e),o=i>>3,a=Math.ceil(r*i/8),s=new Uint8Array(n*a),c=0,h=[0,0,4,0,2,0,1],l=[0,4,0,2,0,1,0],f=[8,8,8,4,4,2,2],d=[8,8,4,4,2,2,1],p=0;p<7;){for(var g=f[p],v=d[p],m=0,y=0,b=h[p];b<n;)b+=g,y++;for(var w=l[p];w<r;)w+=v,m++;var k=Math.ceil(m*i/8);u.decode._filterZero(t,e,c,m,y);for(var x=0,Z=h[p];Z<n;){for(var S=l[p],C=c+x*k<<3;S<r;){var F;if(1==i&&(F=(F=t[C>>3])>>7-(7&C)&1,s[Z*a+(S>>3)]|=F<<7-((7&S)<<0)),2==i&&(F=(F=t[C>>3])>>6-(7&C)&3,s[Z*a+(S>>2)]|=F<<6-((3&S)<<1)),4==i&&(F=(F=t[C>>3])>>4-(7&C)&15,s[Z*a+(S>>1)]|=F<<4-((1&S)<<2)),i>=8)for(var T=Z*a+S*o,A=0;A<o;A++)s[T+A]=t[(C>>3)+A];C+=i,S+=v}x++,Z+=g}m*y!=0&&(c+=y*(1+k)),p+=1}return s},u.decode._getBPP=function(t){return[1,null,3,1,2,null,4][t.ctype]*t.depth},u.decode._filterZero=function(t,e,r,n,i){var o=u.decode._getBPP(e),a=Math.ceil(n*o/8),s=u.decode._paeth;o=Math.ceil(o/8);var c=0,h=1,l=t[r],f=0;if(l>1&&(t[r]=[0,0,1][l-2]),3==l)for(f=o;f<a;f++)t[f+1]=t[f+1]+(t[f+1-o]>>>1)&255;for(var d=0;d<i;d++)if(f=0,0==(l=t[(h=(c=r+d*a)+d+1)-1]))for(;f<a;f++)t[c+f]=t[h+f];else if(1==l){for(;f<o;f++)t[c+f]=t[h+f];for(;f<a;f++)t[c+f]=t[h+f]+t[c+f-o]}else if(2==l)for(;f<a;f++)t[c+f]=t[h+f]+t[c+f-a];else if(3==l){for(;f<o;f++)t[c+f]=t[h+f]+(t[c+f-a]>>>1);for(;f<a;f++)t[c+f]=t[h+f]+(t[c+f-a]+t[c+f-o]>>>1)}else{for(;f<o;f++)t[c+f]=t[h+f]+s(0,t[c+f-a],0);for(;f<a;f++)t[c+f]=t[h+f]+s(t[c+f-o],t[c+f-a],t[c+f-o-a])}return t},u.decode._paeth=function(t,e,r){var n=t+e-r,i=n-t,o=n-e,a=n-r;return i*i<=o*o&&i*i<=a*a?t:o*o<=a*a?e:r},u.decode._IHDR=function(t,e,r){var n=u._bin;r.width=n.readUint(t,e),e+=4,r.height=n.readUint(t,e),e+=4,r.depth=t[e],e++,r.ctype=t[e],e++,r.compress=t[e],e++,r.filter=t[e],e++,r.interlace=t[e],e++},u._bin={nextZero:function(t,e){for(;0!=t[e];)e++;return e},readUshort:function(t,e){return t[e]<<8|t[e+1]},writeUshort:function(t,e,r){t[e]=r>>8&255,t[e+1]=255&r},readUint:function(t,e){return 16777216*t[e]+(t[e+1]<<16|t[e+2]<<8|t[e+3])},writeUint:function(t,e,r){t[e]=r>>24&255,t[e+1]=r>>16&255,t[e+2]=r>>8&255,t[e+3]=255&r},readASCII:function(t,e,r){for(var n="",i=0;i<r;i++)n+=String.fromCharCode(t[e+i]);return n},writeASCII:function(t,e,r){for(var n=0;n<r.length;n++)t[e+n]=r.charCodeAt(n)},readBytes:function(t,e,r){for(var n=[],i=0;i<r;i++)n.push(t[e+i]);return n},pad:function(t){return t.length<2?"0"+t:t},readUTF8:function(t,e,r){for(var n,i="",o=0;o<r;o++)i+="%"+u._bin.pad(t[e+o].toString(16));try{n=decodeURIComponent(i)}catch(n){return u._bin.readASCII(t,e,r)}return n}},u._copyTile=function(t,e,r,n,i,o,a,s,u){for(var c=Math.min(e,i),h=Math.min(r,o),l=0,f=0,d=0;d<h;d++)for(var p=0;p<c;p++)if(a>=0&&s>=0?(l=d*e+p<<2,f=(s+d)*i+a+p<<2):(l=(-s+d)*e-a+p<<2,f=d*i+p<<2),0==u)n[f]=t[l],n[f+1]=t[l+1],n[f+2]=t[l+2],n[f+3]=t[l+3];else if(1==u){var g=t[l+3]*(1/255),v=t[l]*g,m=t[l+1]*g,y=t[l+2]*g,b=n[f+3]*(1/255),w=n[f]*b,k=n[f+1]*b,x=n[f+2]*b,Z=1-g,S=g+b*Z,C=0==S?0:1/S;n[f+3]=255*S,n[f+0]=(v+w*Z)*C,n[f+1]=(m+k*Z)*C,n[f+2]=(y+x*Z)*C}else if(2==u)g=t[l+3],v=t[l],m=t[l+1],y=t[l+2],b=n[f+3],w=n[f],k=n[f+1],x=n[f+2],g==b&&v==w&&m==k&&y==x?(n[f]=0,n[f+1]=0,n[f+2]=0,n[f+3]=0):(n[f]=v,n[f+1]=m,n[f+2]=y,n[f+3]=g);else if(3==u){if(g=t[l+3],v=t[l],m=t[l+1],y=t[l+2],b=n[f+3],w=n[f],k=n[f+1],x=n[f+2],g==b&&v==w&&m==k&&y==x)continue;if(g<220&&b>20)return!1}return!0},u.encode=function(t,e,r,n,i,o,a){null==n&&(n=0),null==a&&(a=!1);var s=u.encode.compress(t,e,r,n,[!1,!1,!1,0,a]);return u.encode.compressPNG(s,-1),u.encode._main(s,e,r,i,o)},u.encodeLL=function(t,e,r,n,i,o,a,s){for(var c={ctype:0+(1==n?0:2)+(0==i?0:4),depth:o,frames:[]},h=(Date.now(),(n+i)*o),l=h*e,f=0;f<t.length;f++)c.frames.push({rect:{x:0,y:0,width:e,height:r},img:new Uint8Array(t[f]),blend:0,dispose:1,bpp:Math.ceil(h/8),bpl:Math.ceil(l/8)});return u.encode.compressPNG(c,0,!0),u.encode._main(c,e,r,a,s)},u.encode._main=function(t,e,r,n,i){null==i&&(i={});var o=u.crc.crc,a=u._bin.writeUint,s=u._bin.writeUshort,c=u._bin.writeASCII,h=8,l=t.frames.length>1,f=!1,d=33+(l?20:0);if(null!=i.sRGB&&(d+=13),null!=i.pHYs&&(d+=21),3==t.ctype){for(var p=t.plte.length,g=0;g<p;g++)t.plte[g]>>>24!=255&&(f=!0);d+=8+3*p+4+(f?8+1*p+4:0)}for(var v=0;v<t.frames.length;v++)l&&(d+=38),d+=(C=t.frames[v]).cimg.length+12,0!=v&&(d+=4);d+=12;var m=new Uint8Array(d),y=[137,80,78,71,13,10,26,10];for(g=0;g<8;g++)m[g]=y[g];if(a(m,h,13),c(m,h+=4,"IHDR"),a(m,h+=4,e),a(m,h+=4,r),m[h+=4]=t.depth,m[++h]=t.ctype,m[++h]=0,m[++h]=0,m[++h]=0,a(m,++h,o(m,h-17,17)),h+=4,null!=i.sRGB&&(a(m,h,1),c(m,h+=4,"sRGB"),m[h+=4]=i.sRGB,a(m,++h,o(m,h-5,5)),h+=4),null!=i.pHYs&&(a(m,h,9),c(m,h+=4,"pHYs"),a(m,h+=4,i.pHYs[0]),a(m,h+=4,i.pHYs[1]),m[h+=4]=i.pHYs[2],a(m,++h,o(m,h-13,13)),h+=4),l&&(a(m,h,8),c(m,h+=4,"acTL"),a(m,h+=4,t.frames.length),a(m,h+=4,null!=i.loop?i.loop:0),a(m,h+=4,o(m,h-12,12)),h+=4),3==t.ctype){for(a(m,h,3*(p=t.plte.length)),c(m,h+=4,"PLTE"),h+=4,g=0;g<p;g++){var b=3*g,w=t.plte[g],k=255&w,x=w>>>8&255,Z=w>>>16&255;m[h+b+0]=k,m[h+b+1]=x,m[h+b+2]=Z}if(a(m,h+=3*p,o(m,h-3*p-4,3*p+4)),h+=4,f){for(a(m,h,p),c(m,h+=4,"tRNS"),h+=4,g=0;g<p;g++)m[h+g]=t.plte[g]>>>24&255;a(m,h+=p,o(m,h-p-4,p+4)),h+=4}}var S=0;for(v=0;v<t.frames.length;v++){var C=t.frames[v];l&&(a(m,h,26),c(m,h+=4,"fcTL"),a(m,h+=4,S++),a(m,h+=4,C.rect.width),a(m,h+=4,C.rect.height),a(m,h+=4,C.rect.x),a(m,h+=4,C.rect.y),s(m,h+=4,n[v]),s(m,h+=2,1e3),m[h+=2]=C.dispose,m[++h]=C.blend,a(m,++h,o(m,h-30,30)),h+=4);var F=C.cimg;a(m,h,(p=F.length)+(0==v?0:4));var T=h+=4;c(m,h,0==v?"IDAT":"fdAT"),h+=4,0!=v&&(a(m,h,S++),h+=4),m.set(F,h),a(m,h+=p,o(m,T,h-T)),h+=4}return a(m,h,0),c(m,h+=4,"IEND"),a(m,h+=4,o(m,h-4,4)),h+=4,m.buffer},u.encode.compressPNG=function(t,e,r){for(var n=0;n<t.frames.length;n++){var i=t.frames[n],o=(i.rect.width,i.rect.height),a=new Uint8Array(o*i.bpl+o);i.cimg=u.encode._filterZero(i.img,o,i.bpp,i.bpl,a,e,r)}},u.encode.compress=function(t,e,r,n,i){for(var o=i[0],a=i[1],s=i[2],c=i[3],h=i[4],l=6,f=8,d=255,p=0;p<t.length;p++)for(var g=new Uint8Array(t[p]),v=g.length,m=0;m<v;m+=4)d&=g[m+3];var y=255!=d,b=u.encode.framize(t,e,r,o,a,s),w={},k=[],x=[];if(0!=n){var Z=[];for(m=0;m<b.length;m++)Z.push(b[m].img.buffer);var S=u.encode.concatRGBA(Z),C=u.quantize(S,n),F=0,T=new Uint8Array(C.abuf);for(m=0;m<b.length;m++){var A=(H=b[m].img).length;for(x.push(new Uint8Array(C.inds.buffer,F>>2,A>>2)),p=0;p<A;p+=4)H[p]=T[F+p],H[p+1]=T[F+p+1],H[p+2]=T[F+p+2],H[p+3]=T[F+p+3];F+=A}for(m=0;m<C.plte.length;m++)k.push(C.plte[m].est.rgba)}else for(p=0;p<b.length;p++){var O=b[p],R=new Uint32Array(O.img.buffer),z=O.rect.width,P=(v=R.length,new Uint8Array(v));for(x.push(P),m=0;m<v;m++){var D=R[m];if(0!=m&&D==R[m-1])P[m]=P[m-1];else if(m>z&&D==R[m-z])P[m]=P[m-z];else{var N=w[D];if(null==N&&(w[D]=N=k.length,k.push(D),k.length>=300))break;P[m]=N}}}var B=k.length;for(B<=256&&0==h&&(f=B<=2?1:B<=4?2:B<=16?4:8,f=Math.max(f,c)),p=0;p<b.length;p++){(O=b[p]).rect.x,O.rect.y,z=O.rect.width;var I=O.rect.height,E=O.img,U=(new Uint32Array(E.buffer),4*z),j=4;if(B<=256&&0==h){U=Math.ceil(f*z/8);for(var M=new Uint8Array(U*I),V=x[p],W=0;W<I;W++){m=W*U;var G=W*z;if(8==f)for(var q=0;q<z;q++)M[m+q]=V[G+q];else if(4==f)for(q=0;q<z;q++)M[m+(q>>1)]|=V[G+q]<<4-4*(1&q);else if(2==f)for(q=0;q<z;q++)M[m+(q>>2)]|=V[G+q]<<6-2*(3&q);else if(1==f)for(q=0;q<z;q++)M[m+(q>>3)]|=V[G+q]<<7-1*(7&q)}E=M,l=3,j=1}else if(0==y&&1==b.length){M=new Uint8Array(z*I*3);var L=z*I;for(m=0;m<L;m++){var H,K=4*m;M[H=3*m]=E[K],M[H+1]=E[K+1],M[H+2]=E[K+2]}E=M,l=2,j=3,U=3*z}O.img=E,O.bpl=U,O.bpp=j}return{ctype:l,depth:f,plte:k,frames:b}},u.encode.framize=function(t,e,r,n,i,o){for(var a=[],s=0;s<t.length;s++){var c,h=new Uint8Array(t[s]),l=new Uint32Array(h.buffer),f=0,d=0,p=e,g=r,v=n?1:0;if(0!=s){for(var m=o||n||1==s||0!=a[s-2].dispose?1:2,y=0,b=1e9,w=0;w<m;w++){for(var k=new Uint8Array(t[s-1-w]),x=new Uint32Array(t[s-1-w]),Z=e,S=r,C=-1,F=-1,T=0;T<r;T++)for(var A=0;A<e;A++)l[B=T*e+A]!=x[B]&&(A<Z&&(Z=A),A>C&&(C=A),T<S&&(S=T),T>F&&(F=T));-1==C&&(Z=S=C=F=0),i&&(1==(1&Z)&&Z--,1==(1&S)&&S--);var O=(C-Z+1)*(F-S+1);O<b&&(b=O,y=w,f=Z,d=S,p=C-Z+1,g=F-S+1)}k=new Uint8Array(t[s-1-y]),1==y&&(a[s-1].dispose=2),c=new Uint8Array(p*g*4),u._copyTile(k,e,r,c,p,g,-f,-d,0),1==(v=u._copyTile(h,e,r,c,p,g,-f,-d,3)?1:0)?u.encode._prepareDiff(h,e,r,c,{x:f,y:d,width:p,height:g}):u._copyTile(h,e,r,c,p,g,-f,-d,0)}else c=h.slice(0);a.push({rect:{x:f,y:d,width:p,height:g},img:c,blend:v,dispose:0})}if(n)for(s=0;s<a.length;s++)if(1!=(I=a[s]).blend){var R=I.rect,z=a[s-1].rect,P=Math.min(R.x,z.x),D=Math.min(R.y,z.y),N={x:P,y:D,width:Math.max(R.x+R.width,z.x+z.width)-P,height:Math.max(R.y+R.height,z.y+z.height)-D};a[s-1].dispose=1,s-1!=0&&u.encode._updateFrame(t,e,r,a,s-1,N,i),u.encode._updateFrame(t,e,r,a,s,N,i)}if(1!=t.length)for(var B=0;B<a.length;B++){var I;(I=a[B]).rect.width,I.rect.height}return a},u.encode._updateFrame=function(t,e,r,n,i,o,a){for(var s=Uint8Array,c=Uint32Array,h=new s(t[i-1]),l=new c(t[i-1]),f=i+1<t.length?new s(t[i+1]):null,d=new s(t[i]),p=new c(d.buffer),g=e,v=r,m=-1,y=-1,b=0;b<o.height;b++)for(var w=0;w<o.width;w++){var k=o.x+w,x=o.y+b,Z=x*e+k,S=p[Z];0==S||0==n[i-1].dispose&&l[Z]==S&&(null==f||0!=f[4*Z+3])||(k<g&&(g=k),k>m&&(m=k),x<v&&(v=x),x>y&&(y=x))}-1==m&&(g=v=m=y=0),a&&(1==(1&g)&&g--,1==(1&v)&&v--),o={x:g,y:v,width:m-g+1,height:y-v+1};var C=n[i];C.rect=o,C.blend=1,C.img=new Uint8Array(o.width*o.height*4),0==n[i-1].dispose?(u._copyTile(h,e,r,C.img,o.width,o.height,-o.x,-o.y,0),u.encode._prepareDiff(d,e,r,C.img,o)):u._copyTile(d,e,r,C.img,o.width,o.height,-o.x,-o.y,0)},u.encode._prepareDiff=function(t,e,r,n,i){u._copyTile(t,e,r,n,i.width,i.height,-i.x,-i.y,2)},u.encode._filterZero=function(t,e,r,n,i,o,a){var c,h=[],l=[0,1,2,3,4];-1!=o?l=[o]:(e*n>5e5||1==r)&&(l=[0]),a&&(c={level:0});for(var f=a&&null!=UZIP?UZIP:s(),d=0;d<l.length;d++){for(var p=0;p<e;p++)u.encode._filterLine(i,t,p,n,r,l[d]);h.push(f.deflate(i,c))}var g,v=1e9;for(d=0;d<h.length;d++)h[d].length<v&&(g=d,v=h[d].length);return h[g]},u.encode._filterLine=function(t,e,r,n,i,o){var a=r*n,s=a+r,c=u.decode._paeth;if(t[s]=o,s++,0==o)if(n<500)for(var h=0;h<n;h++)t[s+h]=e[a+h];else t.set(new Uint8Array(e.buffer,a,n),s);else if(1==o){for(h=0;h<i;h++)t[s+h]=e[a+h];for(h=i;h<n;h++)t[s+h]=e[a+h]-e[a+h-i]+256&255}else if(0==r){for(h=0;h<i;h++)t[s+h]=e[a+h];if(2==o)for(h=i;h<n;h++)t[s+h]=e[a+h];if(3==o)for(h=i;h<n;h++)t[s+h]=e[a+h]-(e[a+h-i]>>1)+256&255;if(4==o)for(h=i;h<n;h++)t[s+h]=e[a+h]-c(e[a+h-i],0,0)+256&255}else{if(2==o)for(h=0;h<n;h++)t[s+h]=e[a+h]+256-e[a+h-n]&255;if(3==o){for(h=0;h<i;h++)t[s+h]=e[a+h]+256-(e[a+h-n]>>1)&255;for(h=i;h<n;h++)t[s+h]=e[a+h]+256-(e[a+h-n]+e[a+h-i]>>1)&255}if(4==o){for(h=0;h<i;h++)t[s+h]=e[a+h]+256-c(0,e[a+h-n],0)&255;for(h=i;h<n;h++)t[s+h]=e[a+h]+256-c(e[a+h-i],e[a+h-n],e[a+h-i-n])&255}}},u.crc={table:function(){for(var t=new Uint32Array(256),e=0;e<256;e++){for(var r=e,n=0;n<8;n++)1&r?r=3988292384^r>>>1:r>>>=1;t[e]=r}return t}(),update:function(t,e,r,n){for(var i=0;i<n;i++)t=u.crc.table[255&(t^e[r+i])]^t>>>8;return t},crc:function(t,e,r){return 4294967295^u.crc.update(4294967295,t,e,r)}},u.quantize=function(t,e){for(var r=new Uint8Array(t),n=r.slice(0),i=new Uint32Array(n.buffer),o=u.quantize.getKDtree(n,e),a=o[0],s=o[1],c=(u.quantize.planeDst,r),h=i,l=c.length,f=new Uint8Array(r.length>>2),d=0;d<l;d+=4){var p=c[d]*(1/255),g=c[d+1]*(1/255),v=c[d+2]*(1/255),m=c[d+3]*(1/255),y=u.quantize.getNearest(a,p,g,v,m);f[d>>2]=y.ind,h[d>>2]=y.est.rgba}return{abuf:n.buffer,inds:f,plte:s}},u.quantize.getKDtree=function(t,e,r){null==r&&(r=1e-4);var n=new Uint32Array(t.buffer),i={i0:0,i1:t.length,bst:null,est:null,tdst:0,left:null,right:null};i.bst=u.quantize.stats(t,i.i0,i.i1),i.est=u.quantize.estats(i.bst);for(var o=[i];o.length<e;){for(var a=0,s=0,c=0;c<o.length;c++)o[c].est.L>a&&(a=o[c].est.L,s=c);if(a<r)break;var h=o[s],l=u.quantize.splitPixels(t,n,h.i0,h.i1,h.est.e,h.est.eMq255);if(h.i0>=l||h.i1<=l)h.est.L=0;else{var f={i0:h.i0,i1:l,bst:null,est:null,tdst:0,left:null,right:null};f.bst=u.quantize.stats(t,f.i0,f.i1),f.est=u.quantize.estats(f.bst);var d={i0:l,i1:h.i1,bst:null,est:null,tdst:0,left:null,right:null};for(d.bst={R:[],m:[],N:h.bst.N-f.bst.N},c=0;c<16;c++)d.bst.R[c]=h.bst.R[c]-f.bst.R[c];for(c=0;c<4;c++)d.bst.m[c]=h.bst.m[c]-f.bst.m[c];d.est=u.quantize.estats(d.bst),h.left=f,h.right=d,o[s]=f,o.push(d)}}for(o.sort((function(t,e){return e.bst.N-t.bst.N})),c=0;c<o.length;c++)o[c].ind=c;return[i,o]},u.quantize.getNearest=function(t,e,r,n,i){if(null==t.left)return t.tdst=u.quantize.dist(t.est.q,e,r,n,i),t;var o=u.quantize.planeDst(t.est,e,r,n,i),a=t.left,s=t.right;o>0&&(a=t.right,s=t.left);var c=u.quantize.getNearest(a,e,r,n,i);if(c.tdst<=o*o)return c;var h=u.quantize.getNearest(s,e,r,n,i);return h.tdst<c.tdst?h:c},u.quantize.planeDst=function(t,e,r,n,i){var o=t.e;return o[0]*e+o[1]*r+o[2]*n+o[3]*i-t.eMq},u.quantize.dist=function(t,e,r,n,i){var o=e-t[0],a=r-t[1],s=n-t[2],u=i-t[3];return o*o+a*a+s*s+u*u},u.quantize.splitPixels=function(t,e,r,n,i,o){var a=u.quantize.vecDot;for(n-=4;r<n;){for(;a(t,r,i)<=o;)r+=4;for(;a(t,n,i)>o;)n-=4;if(r>=n)break;var s=e[r>>2];e[r>>2]=e[n>>2],e[n>>2]=s,r+=4,n-=4}for(;a(t,r,i)>o;)r-=4;return r+4},u.quantize.vecDot=function(t,e,r){return t[e]*r[0]+t[e+1]*r[1]+t[e+2]*r[2]+t[e+3]*r[3]},u.quantize.stats=function(t,e,r){for(var n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],i=[0,0,0,0],o=r-e>>2,a=e;a<r;a+=4){var s=t[a]*(1/255),u=t[a+1]*(1/255),c=t[a+2]*(1/255),h=t[a+3]*(1/255);i[0]+=s,i[1]+=u,i[2]+=c,i[3]+=h,n[0]+=s*s,n[1]+=s*u,n[2]+=s*c,n[3]+=s*h,n[5]+=u*u,n[6]+=u*c,n[7]+=u*h,n[10]+=c*c,n[11]+=c*h,n[15]+=h*h}return n[4]=n[1],n[8]=n[2],n[9]=n[6],n[12]=n[3],n[13]=n[7],n[14]=n[11],{R:n,m:i,N:o}},u.quantize.estats=function(t){var e=t.R,r=t.m,n=t.N,i=r[0],o=r[1],a=r[2],s=r[3],c=0==n?0:1/n,h=[e[0]-i*i*c,e[1]-i*o*c,e[2]-i*a*c,e[3]-i*s*c,e[4]-o*i*c,e[5]-o*o*c,e[6]-o*a*c,e[7]-o*s*c,e[8]-a*i*c,e[9]-a*o*c,e[10]-a*a*c,e[11]-a*s*c,e[12]-s*i*c,e[13]-s*o*c,e[14]-s*a*c,e[15]-s*s*c],l=h,f=u.M4,d=[.5,.5,.5,.5],p=0,g=0;if(0!=n)for(var v=0;v<10&&(d=f.multVec(l,d),g=Math.sqrt(f.dot(d,d)),d=f.sml(1/g,d),!(Math.abs(g-p)<1e-9));v++)p=g;var m=[i*c,o*c,a*c,s*c];return{Cov:h,q:m,e:d,L:p,eMq255:f.dot(f.sml(255,m),d),eMq:f.dot(d,m),rgba:(Math.round(255*m[3])<<24|Math.round(255*m[2])<<16|Math.round(255*m[1])<<8|Math.round(255*m[0])<<0)>>>0}},u.M4={multVec:function(t,e){return[t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3],t[4]*e[0]+t[5]*e[1]+t[6]*e[2]+t[7]*e[3],t[8]*e[0]+t[9]*e[1]+t[10]*e[2]+t[11]*e[3],t[12]*e[0]+t[13]*e[1]+t[14]*e[2]+t[15]*e[3]]},dot:function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},sml:function(t,e){return[t*e[0],t*e[1],t*e[2],t*e[3]]}},u.encode.concatRGBA=function(t){for(var e=0,r=0;r<t.length;r++)e+=t[r].byteLength;var n=new Uint8Array(e),i=0;for(r=0;r<t.length;r++){for(var o=new Uint8Array(t[r]),a=o.length,s=0;s<a;s+=4){var u=o[s],c=o[s+1],h=o[s+2],l=o[s+3];0==l&&(u=c=h=0),n[i+s]=u,n[i+s+1]=c,n[i+s+2]=h,n[i+s+3]=l}i+=a}return n.buffer};const c=u},3162:function(t,e,r){var n;void 0===(n=function(){"use strict";function e(t,e,r){var n=new XMLHttpRequest;n.open("GET",t),n.responseType="blob",n.onload=function(){s(n.response,e,r)},n.onerror=function(){console.error("could not download file")},n.send()}function n(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function i(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(r){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof r.g&&r.g.global===r.g?r.g:void 0,a=o.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),s=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(t,r,a){var s=o.URL||o.webkitURL,u=document.createElement("a");r=r||t.name||"download",u.download=r,u.rel="noopener","string"==typeof t?(u.href=t,u.origin===location.origin?i(u):n(u.href)?e(t,r,a):i(u,u.target="_blank")):(u.href=s.createObjectURL(t),setTimeout((function(){s.revokeObjectURL(u.href)}),4e4),setTimeout((function(){i(u)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,r,o){if(r=r||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,o),r);else if(n(t))e(t,r,o);else{var a=document.createElement("a");a.href=t,a.target="_blank",setTimeout((function(){i(a)}))}}:function(t,r,n,i){if((i=i||open("","_blank"))&&(i.document.title=i.document.body.innerText="downloading..."),"string"==typeof t)return e(t,r,n);var s="application/octet-stream"===t.type,u=/constructor/i.test(o.HTMLElement)||o.safari,c=/CriOS\/[\d]+/.test(navigator.userAgent);if((c||s&&u||a)&&"undefined"!=typeof FileReader){var h=new FileReader;h.onloadend=function(){var t=h.result;t=c?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),i?i.location.href=t:location=t,i=null},h.readAsDataURL(t)}else{var l=o.URL||o.webkitURL,f=l.createObjectURL(t);i?i.location=f:location.href=f,i=null,setTimeout((function(){l.revokeObjectURL(f)}),4e4)}});o.saveAs=s.saveAs=s,t.exports=s}.apply(e,[]))||(t.exports=n)},4043:(t,e,r)=>{t.exports=function t(e,r,n){function i(a,s){if(!r[a]){if(!e[a]){if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var c=r[a]={exports:{}};e[a][0].call(c.exports,(function(t){return i(e[a][1][t]||t)}),c,c.exports,t,e,r,n)}return r[a].exports}for(var o=void 0,a=0;a<n.length;a++)i(n[a]);return i}({1:[function(t,e,r){"use strict";var n=t("./utils"),i=t("./support"),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(t){for(var e,r,i,a,s,u,c,h=[],l=0,f=t.length,d=f,p="string"!==n.getTypeOf(t);l<t.length;)d=f-l,i=p?(e=t[l++],r=l<f?t[l++]:0,l<f?t[l++]:0):(e=t.charCodeAt(l++),r=l<f?t.charCodeAt(l++):0,l<f?t.charCodeAt(l++):0),a=e>>2,s=(3&e)<<4|r>>4,u=1<d?(15&r)<<2|i>>6:64,c=2<d?63&i:64,h.push(o.charAt(a)+o.charAt(s)+o.charAt(u)+o.charAt(c));return h.join("")},r.decode=function(t){var e,r,n,a,s,u,c=0,h=0,l="data:";if(t.substr(0,l.length)===l)throw new Error("Invalid base64 input, it looks like a data url.");var f,d=3*(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(t.charAt(t.length-1)===o.charAt(64)&&d--,t.charAt(t.length-2)===o.charAt(64)&&d--,d%1!=0)throw new Error("Invalid base64 input, bad content length.");for(f=i.uint8array?new Uint8Array(0|d):new Array(0|d);c<t.length;)e=o.indexOf(t.charAt(c++))<<2|(a=o.indexOf(t.charAt(c++)))>>4,r=(15&a)<<4|(s=o.indexOf(t.charAt(c++)))>>2,n=(3&s)<<6|(u=o.indexOf(t.charAt(c++))),f[h++]=e,64!==s&&(f[h++]=r),64!==u&&(f[h++]=n);return f}},{"./support":30,"./utils":32}],2:[function(t,e,r){"use strict";var n=t("./external"),i=t("./stream/DataWorker"),o=t("./stream/Crc32Probe"),a=t("./stream/DataLengthProbe");function s(t,e,r,n,i){this.compressedSize=t,this.uncompressedSize=e,this.crc32=r,this.compression=n,this.compressedContent=i}s.prototype={getContentWorker:function(){var t=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),e=this;return t.on("end",(function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),t},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},s.createWorkerFrom=function(t,e,r){return t.pipe(new o).pipe(new a("uncompressedSize")).pipe(e.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",e)},e.exports=s},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(t,e,r){"use strict";var n=t("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(t){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=t("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(t,e,r){"use strict";var n=t("./utils"),i=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e){return void 0!==t&&t.length?"string"!==n.getTypeOf(t)?function(t,e,r,n){var o=i,a=0+r;t^=-1;for(var s=0;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}(0|e,t,t.length):function(t,e,r,n){var o=i,a=0+r;t^=-1;for(var s=0;s<a;s++)t=t>>>8^o[255&(t^e.charCodeAt(s))];return-1^t}(0|e,t,t.length):0}},{"./utils":32}],5:[function(t,e,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(t,e,r){"use strict";var n;n="undefined"!=typeof Promise?Promise:t("lie"),e.exports={Promise:n}},{lie:37}],7:[function(t,e,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=t("pako"),o=t("./utils"),a=t("./stream/GenericWorker"),s=n?"uint8array":"array";function u(t,e){a.call(this,"FlateWorker/"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={}}r.magic="\b\0",o.inherits(u,a),u.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(o.transformTo(s,t.data),!1)},u.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},u.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},u.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},r.compressWorker=function(t){return new u("Deflate",t)},r.uncompressWorker=function(){return new u("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(t,e,r){"use strict";function n(t,e){var r,n="";for(r=0;r<e;r++)n+=String.fromCharCode(255&t),t>>>=8;return n}function i(t,e,r,i,a,h){var l,f,d=t.file,p=t.compression,g=h!==s.utf8encode,v=o.transformTo("string",h(d.name)),m=o.transformTo("string",s.utf8encode(d.name)),y=d.comment,b=o.transformTo("string",h(y)),w=o.transformTo("string",s.utf8encode(y)),k=m.length!==d.name.length,x=w.length!==y.length,Z="",S="",C="",F=d.dir,T=d.date,A={crc32:0,compressedSize:0,uncompressedSize:0};e&&!r||(A.crc32=t.crc32,A.compressedSize=t.compressedSize,A.uncompressedSize=t.uncompressedSize);var O=0;e&&(O|=8),g||!k&&!x||(O|=2048);var R=0,z=0;F&&(R|=16),"UNIX"===a?(z=798,R|=function(t,e){var r=t;return t||(r=e?16893:33204),(65535&r)<<16}(d.unixPermissions,F)):(z=20,R|=function(t){return 63&(t||0)}(d.dosPermissions)),l=T.getUTCHours(),l<<=6,l|=T.getUTCMinutes(),l<<=5,l|=T.getUTCSeconds()/2,f=T.getUTCFullYear()-1980,f<<=4,f|=T.getUTCMonth()+1,f<<=5,f|=T.getUTCDate(),k&&(S=n(1,1)+n(u(v),4)+m,Z+="up"+n(S.length,2)+S),x&&(C=n(1,1)+n(u(b),4)+w,Z+="uc"+n(C.length,2)+C);var P="";return P+="\n\0",P+=n(O,2),P+=p.magic,P+=n(l,2),P+=n(f,2),P+=n(A.crc32,4),P+=n(A.compressedSize,4),P+=n(A.uncompressedSize,4),P+=n(v.length,2),P+=n(Z.length,2),{fileRecord:c.LOCAL_FILE_HEADER+P+v+Z,dirRecord:c.CENTRAL_FILE_HEADER+n(z,2)+P+n(b.length,2)+"\0\0\0\0"+n(R,4)+n(i,4)+v+Z+b}}var o=t("../utils"),a=t("../stream/GenericWorker"),s=t("../utf8"),u=t("../crc32"),c=t("../signature");function h(t,e,r,n){a.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}o.inherits(h,a),h.prototype.push=function(t){var e=t.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,a.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:r?(e+100*(r-n-1))/r:100}}))},h.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var r=i(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},h.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,r=i(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),e)this.push({data:function(t){return c.DATA_DESCRIPTOR+n(t.crc32,4)+n(t.compressedSize,4)+n(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},h.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var r=this.bytesWritten-t,i=function(t,e,r,i,a){var s=o.transformTo("string",a(i));return c.CENTRAL_DIRECTORY_END+"\0\0\0\0"+n(t,2)+n(t,2)+n(e,4)+n(r,4)+n(s.length,2)+s}(this.dirRecords.length,r,t,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},h.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},h.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on("data",(function(t){e.processChunk(t)})),t.on("end",(function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end()})),t.on("error",(function(t){e.error(t)})),this},h.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},h.prototype.error=function(t){var e=this._sources;if(!a.prototype.error.call(this,t))return!1;for(var r=0;r<e.length;r++)try{e[r].error(t)}catch(t){}return!0},h.prototype.lock=function(){a.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock()},e.exports=h},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(t,e,r){"use strict";var n=t("../compressions"),i=t("./ZipFileWorker");r.generateWorker=function(t,e,r){var o=new i(e.streamFiles,r,e.platform,e.encodeFileName),a=0;try{t.forEach((function(t,r){a++;var i=function(t,e){var r=t||e,i=n[r];if(!i)throw new Error(r+" is not a valid compression method !");return i}(r.options.compression,e.compression),s=r.options.compressionOptions||e.compressionOptions||{},u=r.dir,c=r.date;r._compressWorker(i,s).withStreamInfo("file",{name:t,dir:u,date:c,comment:r.comment||"",unixPermissions:r.unixPermissions,dosPermissions:r.dosPermissions}).pipe(o)})),o.entriesCount=a}catch(t){o.error(t)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(t,e,r){"use strict";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var t=new n;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t}}(n.prototype=t("./object")).loadAsync=t("./load"),n.support=t("./support"),n.defaults=t("./defaults"),n.version="3.7.1",n.loadAsync=function(t,e){return(new n).loadAsync(t,e)},n.external=t("./external"),e.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(t,e,r){"use strict";var n=t("./utils"),i=t("./external"),o=t("./utf8"),a=t("./zipEntries"),s=t("./stream/Crc32Probe"),u=t("./nodejsUtils");function c(t){return new i.Promise((function(e,r){var n=t.decompressed.getContentWorker().pipe(new s);n.on("error",(function(t){r(t)})).on("end",(function(){n.streamInfo.crc32!==t.decompressed.crc32?r(new Error("Corrupted zip : CRC32 mismatch")):e()})).resume()}))}e.exports=function(t,e){var r=this;return e=n.extend(e||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),u.isNode&&u.isStream(t)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",t,!0,e.optimizedBinaryString,e.base64).then((function(t){var r=new a(e);return r.load(t),r})).then((function(t){var r=[i.Promise.resolve(t)],n=t.files;if(e.checkCRC32)for(var o=0;o<n.length;o++)r.push(c(n[o]));return i.Promise.all(r)})).then((function(t){for(var n=t.shift(),i=n.files,o=0;o<i.length;o++){var a=i[o];r.file(a.fileNameStr,a.decompressed,{binary:!0,optimizedBinaryString:!0,date:a.date,dir:a.dir,comment:a.fileCommentStr.length?a.fileCommentStr:null,unixPermissions:a.unixPermissions,dosPermissions:a.dosPermissions,createFolders:e.createFolders})}return n.zipComment.length&&(r.comment=n.zipComment),r}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(t,e,r){"use strict";var n=t("../utils"),i=t("../stream/GenericWorker");function o(t,e){i.call(this,"Nodejs stream input adapter for "+t),this._upstreamEnded=!1,this._bindStream(e)}n.inherits(o,i),o.prototype._bindStream=function(t){var e=this;(this._stream=t).pause(),t.on("data",(function(t){e.push({data:t,meta:{percent:0}})})).on("error",(function(t){e.isPaused?this.generatedError=t:e.error(t)})).on("end",(function(){e.isPaused?e._upstreamEnded=!0:e.end()}))},o.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},e.exports=o},{"../stream/GenericWorker":28,"../utils":32}],13:[function(t,e,r){"use strict";var n=t("readable-stream").Readable;function i(t,e,r){n.call(this,e),this._helper=t;var i=this;t.on("data",(function(t,e){i.push(t)||i._helper.pause(),r&&r(e)})).on("error",(function(t){i.emit("error",t)})).on("end",(function(){i.push(null)}))}t("../utils").inherits(i,n),i.prototype._read=function(){this._helper.resume()},e.exports=i},{"../utils":32,"readable-stream":16}],14:[function(t,e,r){"use strict";e.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(t,e){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(t,e);if("number"==typeof t)throw new Error('The "data" argument must not be a number');return new Buffer(t,e)},allocBuffer:function(t){if(Buffer.alloc)return Buffer.alloc(t);var e=new Buffer(t);return e.fill(0),e},isBuffer:function(t){return Buffer.isBuffer(t)},isStream:function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pause&&"function"==typeof t.resume}}},{}],15:[function(t,e,r){"use strict";function n(t,e,r){var n,i=o.getTypeOf(e),s=o.extend(r||{},u);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(t=g(t)),s.createFolders&&(n=p(t))&&v.call(this,n,!0);var l="string"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!l),(e instanceof c&&0===e.uncompressedSize||s.dir||!e||0===e.length)&&(s.base64=!1,s.binary=!0,e="",s.compression="STORE",i="string");var m;m=e instanceof c||e instanceof a?e:f.isNode&&f.isStream(e)?new d(t,e):o.prepareContent(t,e,s.binary,s.optimizedBinaryString,s.base64);var y=new h(t,m,s);this.files[t]=y}var i=t("./utf8"),o=t("./utils"),a=t("./stream/GenericWorker"),s=t("./stream/StreamHelper"),u=t("./defaults"),c=t("./compressedObject"),h=t("./zipObject"),l=t("./generate"),f=t("./nodejsUtils"),d=t("./nodejs/NodejsStreamInputAdapter"),p=function(t){"/"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return 0<e?t.substring(0,e):""},g=function(t){return"/"!==t.slice(-1)&&(t+="/"),t},v=function(t,e){return e=void 0!==e?e:u.createFolders,t=g(t),this.files[t]||n.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function m(t){return"[object RegExp]"===Object.prototype.toString.call(t)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(t){var e,r,n;for(e in this.files)n=this.files[e],(r=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(r,n)},filter:function(t){var e=[];return this.forEach((function(r,n){t(r,n)&&e.push(n)})),e},file:function(t,e,r){if(1!==arguments.length)return t=this.root+t,n.call(this,t,e,r),this;if(m(t)){var i=t;return this.filter((function(t,e){return!e.dir&&i.test(t)}))}var o=this.files[this.root+t];return o&&!o.dir?o:null},folder:function(t){if(!t)return this;if(m(t))return this.filter((function(e,r){return r.dir&&t.test(e)}));var e=this.root+t,r=v.call(this,e),n=this.clone();return n.root=r.name,n},remove:function(t){t=this.root+t;var e=this.files[t];if(e||("/"!==t.slice(-1)&&(t+="/"),e=this.files[t]),e&&!e.dir)delete this.files[t];else for(var r=this.filter((function(e,r){return r.name.slice(0,t.length)===t})),n=0;n<r.length;n++)delete this.files[r[n].name];return this},generate:function(t){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(t){var e,r={};try{if((r=o.extend(t||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");o.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";e=l.generateWorker(this,r,n)}catch(t){(e=new a("error")).error(t)}return new s(e,r.type||"string",r.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return(t=t||{}).type||(t.type="nodebuffer"),this.generateInternalStream(t).toNodejsStream(e)}};e.exports=y},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(t,e,r){e.exports=t("stream")},{stream:void 0}],17:[function(t,e,r){"use strict";var n=t("./DataReader");function i(t){n.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e]}t("../utils").inherits(i,n),i.prototype.byteAt=function(t){return this.data[this.zero+t]},i.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),r=t.charCodeAt(1),n=t.charCodeAt(2),i=t.charCodeAt(3),o=this.length-4;0<=o;--o)if(this.data[o]===e&&this.data[o+1]===r&&this.data[o+2]===n&&this.data[o+3]===i)return o-this.zero;return-1},i.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),r=t.charCodeAt(1),n=t.charCodeAt(2),i=t.charCodeAt(3),o=this.readData(4);return e===o[0]&&r===o[1]&&n===o[2]&&i===o[3]},i.prototype.readData=function(t){if(this.checkOffset(t),0===t)return[];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./DataReader":18}],18:[function(t,e,r){"use strict";var n=t("../utils");function i(t){this.data=t,this.length=t.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(t){},readInt:function(t){var e,r=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)r=(r<<8)+this.byteAt(e);return this.index+=t,r},readString:function(t){return n.transformTo("string",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},e.exports=i},{"../utils":32}],19:[function(t,e,r){"use strict";var n=t("./Uint8ArrayReader");function i(t){n.call(this,t)}t("../utils").inherits(i,n),i.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(t,e,r){"use strict";var n=t("./DataReader");function i(t){n.call(this,t)}t("../utils").inherits(i,n),i.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},i.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},i.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},i.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./DataReader":18}],21:[function(t,e,r){"use strict";var n=t("./ArrayReader");function i(t){n.call(this,t)}t("../utils").inherits(i,n),i.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(t,e,r){"use strict";var n=t("../utils"),i=t("../support"),o=t("./ArrayReader"),a=t("./StringReader"),s=t("./NodeBufferReader"),u=t("./Uint8ArrayReader");e.exports=function(t){var e=n.getTypeOf(t);return n.checkSupport(e),"string"!==e||i.uint8array?"nodebuffer"===e?new s(t):i.uint8array?new u(n.transformTo("uint8array",t)):new o(n.transformTo("array",t)):new a(t)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(t,e,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(t,e,r){"use strict";var n=t("./GenericWorker"),i=t("../utils");function o(t){n.call(this,"ConvertWorker to "+t),this.destType=t}i.inherits(o,n),o.prototype.processChunk=function(t){this.push({data:i.transformTo(this.destType,t.data),meta:t.meta})},e.exports=o},{"../utils":32,"./GenericWorker":28}],25:[function(t,e,r){"use strict";var n=t("./GenericWorker"),i=t("../crc32");function o(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}t("../utils").inherits(o,n),o.prototype.processChunk=function(t){this.streamInfo.crc32=i(t.data,this.streamInfo.crc32||0),this.push(t)},e.exports=o},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(t,e,r){"use strict";var n=t("../utils"),i=t("./GenericWorker");function o(t){i.call(this,"DataLengthProbe for "+t),this.propName=t,this.withStreamInfo(t,0)}n.inherits(o,i),o.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length}i.prototype.processChunk.call(this,t)},e.exports=o},{"../utils":32,"./GenericWorker":28}],27:[function(t,e,r){"use strict";var n=t("../utils"),i=t("./GenericWorker");function o(t){i.call(this,"DataWorker");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,t.then((function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=n.getTypeOf(t),e.isPaused||e._tickAndRepeat()}),(function(t){e.error(t)}))}n.inherits(o,i),o.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},o.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},o.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":t=this.data.substring(this.index,e);break;case"uint8array":t=this.data.subarray(this.index,e);break;case"array":case"nodebuffer":t=this.data.slice(this.index,e)}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},e.exports=o},{"../utils":32,"./GenericWorker":28}],28:[function(t,e,r){"use strict";function n(t){this.name=t||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(t){this.emit("data",t)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(t){this.emit("error",t)}return!0},error:function(t){return!this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit("error",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(t,e){if(this._listeners[t])for(var r=0;r<this._listeners[t].length;r++)this._listeners[t][r].call(this,e)},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on("data",(function(t){e.processChunk(t)})),t.on("end",(function(){e.end()})),t.on("error",(function(t){e.error(t)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var t=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t)},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var t="Worker "+this.name;return this.previous?this.previous+" -> "+t:t}},e.exports=n},{}],29:[function(t,e,r){"use strict";var n=t("../utils"),i=t("./ConvertWorker"),o=t("./GenericWorker"),a=t("../base64"),s=t("../support"),u=t("../external"),c=null;if(s.nodestream)try{c=t("../nodejs/NodejsStreamOutputAdapter")}catch(t){}function h(t,e,r){var a=e;switch(e){case"blob":case"arraybuffer":a="uint8array";break;case"base64":a="string"}try{this._internalType=a,this._outputType=e,this._mimeType=r,n.checkSupport(a),this._worker=t.pipe(new i(a)),t.lock()}catch(t){this._worker=new o("error"),this._worker.error(t)}}h.prototype={accumulate:function(t){return function(t,e){return new u.Promise((function(r,i){var o=[],s=t._internalType,u=t._outputType,c=t._mimeType;t.on("data",(function(t,r){o.push(t),e&&e(r)})).on("error",(function(t){o=[],i(t)})).on("end",(function(){try{var t=function(t,e,r){switch(t){case"blob":return n.newBlob(n.transformTo("arraybuffer",e),r);case"base64":return a.encode(e);default:return n.transformTo(t,e)}}(u,function(t,e){var r,n=0,i=null,o=0;for(r=0;r<e.length;r++)o+=e[r].length;switch(t){case"string":return e.join("");case"array":return Array.prototype.concat.apply([],e);case"uint8array":for(i=new Uint8Array(o),r=0;r<e.length;r++)i.set(e[r],n),n+=e[r].length;return i;case"nodebuffer":return Buffer.concat(e);default:throw new Error("concat : unsupported type '"+t+"'")}}(s,o),c);r(t)}catch(t){i(t)}o=[]})).resume()}))}(this,t)},on:function(t,e){var r=this;return"data"===t?this._worker.on(t,(function(t){e.call(r,t.data,t.meta)})):this._worker.on(t,(function(){n.delay(e,arguments,r)})),this},resume:function(){return n.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(n.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new c(this,{objectMode:"nodebuffer"!==this._outputType},t)}},e.exports=h},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(t,e,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob("application/zip").size}catch(t){r.blob=!1}}}try{r.nodestream=!!t("readable-stream").Readable}catch(t){r.nodestream=!1}},{"readable-stream":16}],31:[function(t,e,r){"use strict";for(var n=t("./utils"),i=t("./support"),o=t("./nodejsUtils"),a=t("./stream/GenericWorker"),s=new Array(256),u=0;u<256;u++)s[u]=252<=u?6:248<=u?5:240<=u?4:224<=u?3:192<=u?2:1;function c(){a.call(this,"utf-8 decode"),this.leftOver=null}function h(){a.call(this,"utf-8 encode")}s[254]=s[254]=1,r.utf8encode=function(t){return i.nodebuffer?o.newBufferFrom(t,"utf-8"):function(t){var e,r,n,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(n=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(n-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(e=i.uint8array?new Uint8Array(u):new Array(u),o=a=0;a<u;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(n=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(n-56320),o++),r<128?e[a++]=r:(r<2048?e[a++]=192|r>>>6:(r<65536?e[a++]=224|r>>>12:(e[a++]=240|r>>>18,e[a++]=128|r>>>12&63),e[a++]=128|r>>>6&63),e[a++]=128|63&r);return e}(t)},r.utf8decode=function(t){return i.nodebuffer?n.transformTo("nodebuffer",t).toString("utf-8"):function(t){var e,r,i,o,a=t.length,u=new Array(2*a);for(e=r=0;e<a;)if((i=t[e++])<128)u[r++]=i;else if(4<(o=s[i]))u[r++]=65533,e+=o-1;else{for(i&=2===o?31:3===o?15:7;1<o&&e<a;)i=i<<6|63&t[e++],o--;1<o?u[r++]=65533:i<65536?u[r++]=i:(i-=65536,u[r++]=55296|i>>10&1023,u[r++]=56320|1023&i)}return u.length!==r&&(u.subarray?u=u.subarray(0,r):u.length=r),n.applyFromCharCode(u)}(t=n.transformTo(i.uint8array?"uint8array":"array",t))},n.inherits(c,a),c.prototype.processChunk=function(t){var e=n.transformTo(i.uint8array?"uint8array":"array",t.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var o=e;(e=new Uint8Array(o.length+this.leftOver.length)).set(this.leftOver,0),e.set(o,this.leftOver.length)}else e=this.leftOver.concat(e);this.leftOver=null}var a=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0||0===r?e:r+s[t[r]]>e?r:e}(e),u=e;a!==e.length&&(i.uint8array?(u=e.subarray(0,a),this.leftOver=e.subarray(a,e.length)):(u=e.slice(0,a),this.leftOver=e.slice(a,e.length))),this.push({data:r.utf8decode(u),meta:t.meta})},c.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},r.Utf8DecodeWorker=c,n.inherits(h,a),h.prototype.processChunk=function(t){this.push({data:r.utf8encode(t.data),meta:t.meta})},r.Utf8EncodeWorker=h},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(t,e,r){"use strict";var n=t("./support"),i=t("./base64"),o=t("./nodejsUtils"),a=t("set-immediate-shim"),s=t("./external");function u(t){return t}function c(t,e){for(var r=0;r<t.length;++r)e[r]=255&t.charCodeAt(r);return e}r.newBlob=function(t,e){r.checkSupport("blob");try{return new Blob([t],{type:e})}catch(r){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(e)}catch(t){throw new Error("Bug : can't construct the Blob.")}}};var h={stringifyByChunk:function(t,e,r){var n=[],i=0,o=t.length;if(o<=r)return String.fromCharCode.apply(null,t);for(;i<o;)"array"===e||"nodebuffer"===e?n.push(String.fromCharCode.apply(null,t.slice(i,Math.min(i+r,o)))):n.push(String.fromCharCode.apply(null,t.subarray(i,Math.min(i+r,o)))),i+=r;return n.join("")},stringifyByChar:function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e},applyCanBeUsed:{uint8array:function(){try{return n.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return!1}}(),nodebuffer:function(){try{return n.nodebuffer&&1===String.fromCharCode.apply(null,o.allocBuffer(1)).length}catch(t){return!1}}()}};function l(t){var e=65536,n=r.getTypeOf(t),i=!0;if("uint8array"===n?i=h.applyCanBeUsed.uint8array:"nodebuffer"===n&&(i=h.applyCanBeUsed.nodebuffer),i)for(;1<e;)try{return h.stringifyByChunk(t,n,e)}catch(t){e=Math.floor(e/2)}return h.stringifyByChar(t)}function f(t,e){for(var r=0;r<t.length;r++)e[r]=t[r];return e}r.applyFromCharCode=l;var d={};d.string={string:u,array:function(t){return c(t,new Array(t.length))},arraybuffer:function(t){return d.string.uint8array(t).buffer},uint8array:function(t){return c(t,new Uint8Array(t.length))},nodebuffer:function(t){return c(t,o.allocBuffer(t.length))}},d.array={string:l,array:u,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return o.newBufferFrom(t)}},d.arraybuffer={string:function(t){return l(new Uint8Array(t))},array:function(t){return f(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:u,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return o.newBufferFrom(new Uint8Array(t))}},d.uint8array={string:l,array:function(t){return f(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:u,nodebuffer:function(t){return o.newBufferFrom(t)}},d.nodebuffer={string:l,array:function(t){return f(t,new Array(t.length))},arraybuffer:function(t){return d.nodebuffer.uint8array(t).buffer},uint8array:function(t){return f(t,new Uint8Array(t.length))},nodebuffer:u},r.transformTo=function(t,e){if(e=e||"",!t)return e;r.checkSupport(t);var n=r.getTypeOf(e);return d[n][t](e)},r.getTypeOf=function(t){return"string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":n.nodebuffer&&o.isBuffer(t)?"nodebuffer":n.uint8array&&t instanceof Uint8Array?"uint8array":n.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(t){if(!n[t.toLowerCase()])throw new Error(t+" is not supported by this platform")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(t){var e,r,n="";for(r=0;r<(t||"").length;r++)n+="\\x"+((e=t.charCodeAt(r))<16?"0":"")+e.toString(16).toUpperCase();return n},r.delay=function(t,e,r){a((function(){t.apply(r||null,e||[])}))},r.inherits=function(t,e){function r(){}r.prototype=e.prototype,t.prototype=new r},r.extend=function(){var t,e,r={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===r[e]&&(r[e]=arguments[t][e]);return r},r.prepareContent=function(t,e,o,a,u){return s.Promise.resolve(e).then((function(t){return n.blob&&(t instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(t)))&&"undefined"!=typeof FileReader?new s.Promise((function(e,r){var n=new FileReader;n.onload=function(t){e(t.target.result)},n.onerror=function(t){r(t.target.error)},n.readAsArrayBuffer(t)})):t})).then((function(e){var h=r.getTypeOf(e);return h?("arraybuffer"===h?e=r.transformTo("uint8array",e):"string"===h&&(u?e=i.decode(e):o&&!0!==a&&(e=function(t){return c(t,n.uint8array?new Uint8Array(t.length):new Array(t.length))}(e))),e):s.Promise.reject(new Error("Can't read the data of '"+t+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(t,e,r){"use strict";var n=t("./reader/readerFor"),i=t("./utils"),o=t("./signature"),a=t("./zipEntry"),s=(t("./utf8"),t("./support"));function u(t){this.files=[],this.loadOptions=t}u.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(e)+", expected "+i.pretty(t)+")")}},isSignature:function(t,e){var r=this.reader.index;this.reader.setIndex(t);var n=this.reader.readString(4)===e;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=s.uint8array?"uint8array":"array",r=i.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,r,n=this.zip64EndOfCentralSize-44;0<n;)t=this.reader.readInt(2),e=this.reader.readInt(4),r=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(o.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(o.CENTRAL_FILE_HEADER);)(t=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(o.CENTRAL_DIRECTORY_END);if(t<0)throw this.isSignature(0,o.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(t);var e=t;if(this.checkSignature(o.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(t),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,o.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=e-r;if(0<n)this.isSignature(e,o.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(t){this.reader=n(t)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},e.exports=u},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(t,e,r){"use strict";var n=t("./reader/readerFor"),i=t("./utils"),o=t("./compressedObject"),a=t("./crc32"),s=t("./utf8"),u=t("./compressions"),c=t("./support");function h(t,e){this.options=t,this.loadOptions=e}h.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,r;if(t.skip(22),this.fileNameLength=t.readInt(2),r=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(e=function(t){for(var e in u)if(u.hasOwnProperty(e)&&u[e].magic===t)return u[e];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new o(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize))},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==t&&(this.dosPermissions=63&this.externalFileAttributes),3==t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(t){var e,r,n,i=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index+4<i;)e=t.readInt(2),r=t.readInt(2),n=t.readData(r),this.extraFields[e]={id:e,length:r,value:n};t.setIndex(i)},handleUTF8:function(){var t=c.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=s.utf8decode(this.fileName),this.fileCommentStr=s.utf8decode(this.fileComment);else{var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else{var r=i.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var o=i.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(o)}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=n(t.value);return 1!==e.readInt(1)||a(this.fileName)!==e.readInt(4)?null:s.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=n(t.value);return 1!==e.readInt(1)||a(this.fileComment)!==e.readInt(4)?null:s.utf8decode(e.readData(t.length-5))}return null}},e.exports=h},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(t,e,r){"use strict";function n(t,e,r){this.name=t,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=e,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var i=t("./stream/StreamHelper"),o=t("./stream/DataWorker"),a=t("./utf8"),s=t("./compressedObject"),u=t("./stream/GenericWorker");n.prototype={internalStream:function(t){var e=null,r="string";try{if(!t)throw new Error("No output type specified.");var n="string"===(r=t.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),e=this._decompressWorker();var o=!this._dataBinary;o&&!n&&(e=e.pipe(new a.Utf8EncodeWorker)),!o&&n&&(e=e.pipe(new a.Utf8DecodeWorker))}catch(t){(e=new u("error")).error(t)}return new i(e,r,"")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||"nodebuffer").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof s&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),s.createWorkerFrom(r,t,e)},_decompressWorker:function(){return this._data instanceof s?this._data.getContentWorker():this._data instanceof u?this._data:new o(this._data)}};for(var c=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],h=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},l=0;l<c.length;l++)n.prototype[c[l]]=h;e.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(t,e,n){(function(t){"use strict";var r,n,i=t.MutationObserver||t.WebKitMutationObserver;if(i){var o=0,a=new i(h),s=t.document.createTextNode("");a.observe(s,{characterData:!0}),r=function(){s.data=o=++o%2}}else if(t.setImmediate||void 0===t.MessageChannel)r="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){h(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(h,0)};else{var u=new t.MessageChannel;u.port1.onmessage=h,r=function(){u.port2.postMessage(0)}}var c=[];function h(){var t,e;n=!0;for(var r=c.length;r;){for(e=c,c=[],t=-1;++t<r;)e[t]();r=c.length}n=!1}e.exports=function(t){1!==c.push(t)||n||r()}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(t,e,r){"use strict";var n=t("immediate");function i(){}var o={},a=["REJECTED"],s=["FULFILLED"],u=["PENDING"];function c(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,t!==i&&d(this,t)}function h(t,e,r){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function l(t,e,r){n((function(){var n;try{n=e(r)}catch(n){return o.reject(t,n)}n===t?o.reject(t,new TypeError("Cannot resolve promise with itself")):o.resolve(t,n)}))}function f(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function d(t,e){var r=!1;function n(e){r||(r=!0,o.reject(t,e))}function i(e){r||(r=!0,o.resolve(t,e))}var a=p((function(){e(i,n)}));"error"===a.status&&n(a.value)}function p(t,e){var r={};try{r.value=t(e),r.status="success"}catch(t){r.status="error",r.value=t}return r}(e.exports=c).prototype.finally=function(t){if("function"!=typeof t)return this;var e=this.constructor;return this.then((function(r){return e.resolve(t()).then((function(){return r}))}),(function(r){return e.resolve(t()).then((function(){throw r}))}))},c.prototype.catch=function(t){return this.then(null,t)},c.prototype.then=function(t,e){if("function"!=typeof t&&this.state===s||"function"!=typeof e&&this.state===a)return this;var r=new this.constructor(i);return this.state!==u?l(r,this.state===s?t:e,this.outcome):this.queue.push(new h(r,t,e)),r},h.prototype.callFulfilled=function(t){o.resolve(this.promise,t)},h.prototype.otherCallFulfilled=function(t){l(this.promise,this.onFulfilled,t)},h.prototype.callRejected=function(t){o.reject(this.promise,t)},h.prototype.otherCallRejected=function(t){l(this.promise,this.onRejected,t)},o.resolve=function(t,e){var r=p(f,e);if("error"===r.status)return o.reject(t,r.value);var n=r.value;if(n)d(t,n);else{t.state=s,t.outcome=e;for(var i=-1,a=t.queue.length;++i<a;)t.queue[i].callFulfilled(e)}return t},o.reject=function(t,e){t.state=a,t.outcome=e;for(var r=-1,n=t.queue.length;++r<n;)t.queue[r].callRejected(e);return t},c.resolve=function(t){return t instanceof this?t:o.resolve(new this(i),t)},c.reject=function(t){var e=new this(i);return o.reject(e,t)},c.all=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var r=t.length,n=!1;if(!r)return this.resolve([]);for(var a=new Array(r),s=0,u=-1,c=new this(i);++u<r;)h(t[u],u);return c;function h(t,i){e.resolve(t).then((function(t){a[i]=t,++s!==r||n||(n=!0,o.resolve(c,a))}),(function(t){n||(n=!0,o.reject(c,t))}))}},c.race=function(t){if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var e=t.length,r=!1;if(!e)return this.resolve([]);for(var n,a=-1,s=new this(i);++a<e;)n=t[a],this.resolve(n).then((function(t){r||(r=!0,o.resolve(s,t))}),(function(t){r||(r=!0,o.reject(s,t))}));return s}},{immediate:36}],38:[function(t,e,r){"use strict";var n={};(0,t("./lib/utils/common").assign)(n,t("./lib/deflate"),t("./lib/inflate"),t("./lib/zlib/constants")),e.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(t,e,r){"use strict";var n=t("./zlib/deflate"),i=t("./utils/common"),o=t("./utils/strings"),a=t("./zlib/messages"),s=t("./zlib/zstream"),u=Object.prototype.toString;function c(t){if(!(this instanceof c))return new c(t);this.options=i.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},t||{});var e=this.options;e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(0!==r)throw new Error(a[r]);if(e.header&&n.deflateSetHeader(this.strm,e.header),e.dictionary){var h;if(h="string"==typeof e.dictionary?o.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,0!==(r=n.deflateSetDictionary(this.strm,h)))throw new Error(a[r]);this._dict_set=!0}}function h(t,e){var r=new c(e);if(r.push(t,!0),r.err)throw r.msg||a[r.err];return r.result}c.prototype.push=function(t,e){var r,a,s=this.strm,c=this.options.chunkSize;if(this.ended)return!1;a=e===~~e?e:!0===e?4:0,"string"==typeof t?s.input=o.string2buf(t):"[object ArrayBuffer]"===u.call(t)?s.input=new Uint8Array(t):s.input=t,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new i.Buf8(c),s.next_out=0,s.avail_out=c),1!==(r=n.deflate(s,a))&&0!==r)return this.onEnd(r),!(this.ended=!0);0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(o.buf2binstring(i.shrinkBuf(s.output,s.next_out))):this.onData(i.shrinkBuf(s.output,s.next_out)))}while((0<s.avail_in||0===s.avail_out)&&1!==r);return 4===a?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):2!==a||(this.onEnd(0),!(s.avail_out=0))},c.prototype.onData=function(t){this.chunks.push(t)},c.prototype.onEnd=function(t){0===t&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Deflate=c,r.deflate=h,r.deflateRaw=function(t,e){return(e=e||{}).raw=!0,h(t,e)},r.gzip=function(t,e){return(e=e||{}).gzip=!0,h(t,e)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(t,e,r){"use strict";var n=t("./zlib/inflate"),i=t("./utils/common"),o=t("./utils/strings"),a=t("./zlib/constants"),s=t("./zlib/messages"),u=t("./zlib/zstream"),c=t("./zlib/gzheader"),h=Object.prototype.toString;function l(t){if(!(this instanceof l))return new l(t);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&0<=e.windowBits&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(0<=e.windowBits&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),15<e.windowBits&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,e.windowBits);if(r!==a.Z_OK)throw new Error(s[r]);this.header=new c,n.inflateGetHeader(this.strm,this.header)}function f(t,e){var r=new l(e);if(r.push(t,!0),r.err)throw r.msg||s[r.err];return r.result}l.prototype.push=function(t,e){var r,s,u,c,l,f,d=this.strm,p=this.options.chunkSize,g=this.options.dictionary,v=!1;if(this.ended)return!1;s=e===~~e?e:!0===e?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof t?d.input=o.binstring2buf(t):"[object ArrayBuffer]"===h.call(t)?d.input=new Uint8Array(t):d.input=t,d.next_in=0,d.avail_in=d.input.length;do{if(0===d.avail_out&&(d.output=new i.Buf8(p),d.next_out=0,d.avail_out=p),(r=n.inflate(d,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&g&&(f="string"==typeof g?o.string2buf(g):"[object ArrayBuffer]"===h.call(g)?new Uint8Array(g):g,r=n.inflateSetDictionary(this.strm,f)),r===a.Z_BUF_ERROR&&!0===v&&(r=a.Z_OK,v=!1),r!==a.Z_STREAM_END&&r!==a.Z_OK)return this.onEnd(r),!(this.ended=!0);d.next_out&&(0!==d.avail_out&&r!==a.Z_STREAM_END&&(0!==d.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(d.output,d.next_out),c=d.next_out-u,l=o.buf2string(d.output,u),d.next_out=c,d.avail_out=p-c,c&&i.arraySet(d.output,d.output,u,c,0),this.onData(l)):this.onData(i.shrinkBuf(d.output,d.next_out)))),0===d.avail_in&&0===d.avail_out&&(v=!0)}while((0<d.avail_in||0===d.avail_out)&&r!==a.Z_STREAM_END);return r===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),!(d.avail_out=0))},l.prototype.onData=function(t){this.chunks.push(t)},l.prototype.onEnd=function(t){t===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Inflate=l,r.inflate=f,r.inflateRaw=function(t,e){return(e=e||{}).raw=!0,f(t,e)},r.ungzip=f},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(t,e,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(t[n]=r[n])}}return t},r.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var i={arraySet:function(t,e,r,n,i){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+n),i);else for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){var e,r,n,i,o,a;for(e=n=0,r=t.length;e<r;e++)n+=t[e].length;for(a=new Uint8Array(n),e=i=0,r=t.length;e<r;e++)o=t[e],a.set(o,i),i+=o.length;return a}},o={arraySet:function(t,e,r,n,i){for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){return[].concat.apply([],t)}};r.setTyped=function(t){t?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,o))},r.setTyped(n)},{}],42:[function(t,e,r){"use strict";var n=t("./common"),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(t){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){o=!1}for(var a=new n.Buf8(256),s=0;s<256;s++)a[s]=252<=s?6:248<=s?5:240<=s?4:224<=s?3:192<=s?2:1;function u(t,e){if(e<65537&&(t.subarray&&o||!t.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var r="",a=0;a<e;a++)r+=String.fromCharCode(t[a]);return r}a[254]=a[254]=1,r.string2buf=function(t){var e,r,i,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(e=new n.Buf8(u),o=a=0;a<u;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),r<128?e[a++]=r:(r<2048?e[a++]=192|r>>>6:(r<65536?e[a++]=224|r>>>12:(e[a++]=240|r>>>18,e[a++]=128|r>>>12&63),e[a++]=128|r>>>6&63),e[a++]=128|63&r);return e},r.buf2binstring=function(t){return u(t,t.length)},r.binstring2buf=function(t){for(var e=new n.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},r.buf2string=function(t,e){var r,n,i,o,s=e||t.length,c=new Array(2*s);for(r=n=0;r<s;)if((i=t[r++])<128)c[n++]=i;else if(4<(o=a[i]))c[n++]=65533,r+=o-1;else{for(i&=2===o?31:3===o?15:7;1<o&&r<s;)i=i<<6|63&t[r++],o--;1<o?c[n++]=65533:i<65536?c[n++]=i:(i-=65536,c[n++]=55296|i>>10&1023,c[n++]=56320|1023&i)}return u(c,n)},r.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0||0===r?e:r+a[t[r]]>e?r:e}},{"./common":41}],43:[function(t,e,r){"use strict";e.exports=function(t,e,r,n){for(var i=65535&t|0,o=t>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;o=o+(i=i+e[n++]|0)|0,--a;);i%=65521,o%=65521}return i|o<<16|0}},{}],44:[function(t,e,r){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(t,e,r){"use strict";var n=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e,r,i){var o=n,a=i+r;t^=-1;for(var s=i;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}},{}],46:[function(t,e,r){"use strict";var n,i=t("../utils/common"),o=t("./trees"),a=t("./adler32"),s=t("./crc32"),u=t("./messages"),c=-2,h=258,l=262,f=113;function d(t,e){return t.msg=u[e],e}function p(t){return(t<<1)-(4<t?9:0)}function g(t){for(var e=t.length;0<=--e;)t[e]=0}function v(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(i.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function m(t,e){o._tr_flush_block(t,0<=t.block_start?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,v(t.strm)}function y(t,e){t.pending_buf[t.pending++]=e}function b(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function w(t,e){var r,n,i=t.max_chain_length,o=t.strstart,a=t.prev_length,s=t.nice_match,u=t.strstart>t.w_size-l?t.strstart-(t.w_size-l):0,c=t.window,f=t.w_mask,d=t.prev,p=t.strstart+h,g=c[o+a-1],v=c[o+a];t.prev_length>=t.good_match&&(i>>=2),s>t.lookahead&&(s=t.lookahead);do{if(c[(r=e)+a]===v&&c[r+a-1]===g&&c[r]===c[o]&&c[++r]===c[o+1]){o+=2,r++;do{}while(c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&o<p);if(n=h-(p-o),o=p-h,a<n){if(t.match_start=e,s<=(a=n))break;g=c[o+a-1],v=c[o+a]}}}while((e=d[e&f])>u&&0!=--i);return a<=t.lookahead?a:t.lookahead}function k(t){var e,r,n,o,u,c,h,f,d,p,g=t.w_size;do{if(o=t.window_size-t.lookahead-t.strstart,t.strstart>=g+(g-l)){for(i.arraySet(t.window,t.window,g,g,0),t.match_start-=g,t.strstart-=g,t.block_start-=g,e=r=t.hash_size;n=t.head[--e],t.head[e]=g<=n?n-g:0,--r;);for(e=r=g;n=t.prev[--e],t.prev[e]=g<=n?n-g:0,--r;);o+=g}if(0===t.strm.avail_in)break;if(c=t.strm,h=t.window,f=t.strstart+t.lookahead,p=void 0,(d=o)<(p=c.avail_in)&&(p=d),r=0===p?0:(c.avail_in-=p,i.arraySet(h,c.input,c.next_in,p,f),1===c.state.wrap?c.adler=a(c.adler,h,p,f):2===c.state.wrap&&(c.adler=s(c.adler,h,p,f)),c.next_in+=p,c.total_in+=p,p),t.lookahead+=r,t.lookahead+t.insert>=3)for(u=t.strstart-t.insert,t.ins_h=t.window[u],t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+3-1])&t.hash_mask,t.prev[u&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=u,u++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<l&&0!==t.strm.avail_in)}function x(t,e){for(var r,n;;){if(t.lookahead<l){if(k(t),t.lookahead<l&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-l&&(t.match_length=w(t,r)),t.match_length>=3)if(n=o._tr_tally(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){for(t.match_length--;t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart,0!=--t.match_length;);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(m(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,4===e?(m(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(m(t,!1),0===t.strm.avail_out)?1:2}function Z(t,e){for(var r,n,i;;){if(t.lookahead<l){if(k(t),t.lookahead<l&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-l&&(t.match_length=w(t,r),t.match_length<=5&&(1===t.strategy||3===t.match_length&&4096<t.strstart-t.match_start)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){for(i=t.strstart+t.lookahead-3,n=o._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;++t.strstart<=i&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!=--t.prev_length;);if(t.match_available=0,t.match_length=2,t.strstart++,n&&(m(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if((n=o._tr_tally(t,0,t.window[t.strstart-1]))&&m(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(n=o._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,4===e?(m(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(m(t,!1),0===t.strm.avail_out)?1:2}function S(t,e,r,n,i){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=n,this.func=i}function C(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(1146),this.dyn_dtree=new i.Buf16(122),this.bl_tree=new i.Buf16(78),g(this.dyn_ltree),g(this.dyn_dtree),g(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(16),this.heap=new i.Buf16(573),g(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(573),g(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function F(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=2,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:f,t.adler=2===e.wrap?0:1,e.last_flush=0,o._tr_init(e),0):d(t,c)}function T(t){var e=F(t);return 0===e&&function(t){t.window_size=2*t.w_size,g(t.head),t.max_lazy_match=n[t.level].max_lazy,t.good_match=n[t.level].good_length,t.nice_match=n[t.level].nice_length,t.max_chain_length=n[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=2,t.match_available=0,t.ins_h=0}(t.state),e}function A(t,e,r,n,o,a){if(!t)return c;var s=1;if(-1===e&&(e=6),n<0?(s=0,n=-n):15<n&&(s=2,n-=16),o<1||9<o||8!==r||n<8||15<n||e<0||9<e||a<0||4<a)return d(t,c);8===n&&(n=9);var u=new C;return(t.state=u).strm=t,u.wrap=s,u.gzhead=null,u.w_bits=n,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+3-1)/3),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=e,u.strategy=a,u.method=r,T(t)}n=[new S(0,0,0,0,(function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(k(t),0===t.lookahead&&0===e)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var n=t.block_start+r;if((0===t.strstart||t.strstart>=n)&&(t.lookahead=t.strstart-n,t.strstart=n,m(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-l&&(m(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(m(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(m(t,!1),t.strm.avail_out),1)})),new S(4,4,8,4,x),new S(4,5,16,8,x),new S(4,6,32,32,x),new S(4,4,16,16,Z),new S(8,16,32,32,Z),new S(8,16,128,128,Z),new S(8,32,128,256,Z),new S(32,128,258,1024,Z),new S(32,258,258,4096,Z)],r.deflateInit=function(t,e){return A(t,e,8,15,8,0)},r.deflateInit2=A,r.deflateReset=T,r.deflateResetKeep=F,r.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?c:(t.state.gzhead=e,0):c},r.deflate=function(t,e){var r,i,a,u;if(!t||!t.state||5<e||e<0)return t?d(t,c):c;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||666===i.status&&4!==e)return d(t,0===t.avail_out?-5:c);if(i.strm=t,r=i.last_flush,i.last_flush=e,42===i.status)if(2===i.wrap)t.adler=0,y(i,31),y(i,139),y(i,8),i.gzhead?(y(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),y(i,255&i.gzhead.time),y(i,i.gzhead.time>>8&255),y(i,i.gzhead.time>>16&255),y(i,i.gzhead.time>>24&255),y(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),y(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(y(i,255&i.gzhead.extra.length),y(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=s(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(y(i,0),y(i,0),y(i,0),y(i,0),y(i,0),y(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),y(i,3),i.status=f);else{var l=8+(i.w_bits-8<<4)<<8;l|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(l|=32),l+=31-l%31,i.status=f,b(i,l),0!==i.strstart&&(b(i,t.adler>>>16),b(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),v(t),a=i.pending,i.pending!==i.pending_buf_size));)y(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),v(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,y(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),v(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,y(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&v(t),i.pending+2<=i.pending_buf_size&&(y(i,255&t.adler),y(i,t.adler>>8&255),t.adler=0,i.status=f)):i.status=f),0!==i.pending){if(v(t),0===t.avail_out)return i.last_flush=-1,0}else if(0===t.avail_in&&p(e)<=p(r)&&4!==e)return d(t,-5);if(666===i.status&&0!==t.avail_in)return d(t,-5);if(0!==t.avail_in||0!==i.lookahead||0!==e&&666!==i.status){var w=2===i.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(k(t),0===t.lookahead)){if(0===e)return 1;break}if(t.match_length=0,r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(m(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(m(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(m(t,!1),0===t.strm.avail_out)?1:2}(i,e):3===i.strategy?function(t,e){for(var r,n,i,a,s=t.window;;){if(t.lookahead<=h){if(k(t),t.lookahead<=h&&0===e)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&0<t.strstart&&(n=s[i=t.strstart-1])===s[++i]&&n===s[++i]&&n===s[++i]){a=t.strstart+h;do{}while(n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&i<a);t.match_length=h-(a-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(r=o._tr_tally(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(m(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(m(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(m(t,!1),0===t.strm.avail_out)?1:2}(i,e):n[i.level].func(i,e);if(3!==w&&4!==w||(i.status=666),1===w||3===w)return 0===t.avail_out&&(i.last_flush=-1),0;if(2===w&&(1===e?o._tr_align(i):5!==e&&(o._tr_stored_block(i,0,0,!1),3===e&&(g(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),v(t),0===t.avail_out))return i.last_flush=-1,0}return 4!==e?0:i.wrap<=0?1:(2===i.wrap?(y(i,255&t.adler),y(i,t.adler>>8&255),y(i,t.adler>>16&255),y(i,t.adler>>24&255),y(i,255&t.total_in),y(i,t.total_in>>8&255),y(i,t.total_in>>16&255),y(i,t.total_in>>24&255)):(b(i,t.adler>>>16),b(i,65535&t.adler)),v(t),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?0:1)},r.deflateEnd=function(t){var e;return t&&t.state?42!==(e=t.state.status)&&69!==e&&73!==e&&91!==e&&103!==e&&e!==f&&666!==e?d(t,c):(t.state=null,e===f?d(t,-3):0):c},r.deflateSetDictionary=function(t,e){var r,n,o,s,u,h,l,f,d=e.length;if(!t||!t.state)return c;if(2===(s=(r=t.state).wrap)||1===s&&42!==r.status||r.lookahead)return c;for(1===s&&(t.adler=a(t.adler,e,d,0)),r.wrap=0,d>=r.w_size&&(0===s&&(g(r.head),r.strstart=0,r.block_start=0,r.insert=0),f=new i.Buf8(r.w_size),i.arraySet(f,e,d-r.w_size,r.w_size,0),e=f,d=r.w_size),u=t.avail_in,h=t.next_in,l=t.input,t.avail_in=d,t.next_in=0,t.input=e,k(r);r.lookahead>=3;){for(n=r.strstart,o=r.lookahead-2;r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+3-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--o;);r.strstart=n,r.lookahead=2,k(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,t.next_in=h,t.input=l,t.avail_in=u,r.wrap=s,0},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(t,e,r){"use strict";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(t,e,r){"use strict";e.exports=function(t,e){var r,n,i,o,a,s,u,c,h,l,f,d,p,g,v,m,y,b,w,k,x,Z,S,C,F;r=t.state,n=t.next_in,C=t.input,i=n+(t.avail_in-5),o=t.next_out,F=t.output,a=o-(e-t.avail_out),s=o+(t.avail_out-257),u=r.dmax,c=r.wsize,h=r.whave,l=r.wnext,f=r.window,d=r.hold,p=r.bits,g=r.lencode,v=r.distcode,m=(1<<r.lenbits)-1,y=(1<<r.distbits)-1;t:do{p<15&&(d+=C[n++]<<p,p+=8,d+=C[n++]<<p,p+=8),b=g[d&m];e:for(;;){if(d>>>=w=b>>>24,p-=w,0==(w=b>>>16&255))F[o++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=g[(65535&b)+(d&(1<<w)-1)];continue e}if(32&w){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}k=65535&b,(w&=15)&&(p<w&&(d+=C[n++]<<p,p+=8),k+=d&(1<<w)-1,d>>>=w,p-=w),p<15&&(d+=C[n++]<<p,p+=8,d+=C[n++]<<p,p+=8),b=v[d&y];r:for(;;){if(d>>>=w=b>>>24,p-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=v[(65535&b)+(d&(1<<w)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(x=65535&b,p<(w&=15)&&(d+=C[n++]<<p,(p+=8)<w&&(d+=C[n++]<<p,p+=8)),u<(x+=d&(1<<w)-1)){t.msg="invalid distance too far back",r.mode=30;break t}if(d>>>=w,p-=w,(w=o-a)<x){if(h<(w=x-w)&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(S=f,(Z=0)===l){if(Z+=c-w,w<k){for(k-=w;F[o++]=f[Z++],--w;);Z=o-x,S=F}}else if(l<w){if(Z+=c+l-w,(w-=l)<k){for(k-=w;F[o++]=f[Z++],--w;);if(Z=0,l<k){for(k-=w=l;F[o++]=f[Z++],--w;);Z=o-x,S=F}}}else if(Z+=l-w,w<k){for(k-=w;F[o++]=f[Z++],--w;);Z=o-x,S=F}for(;2<k;)F[o++]=S[Z++],F[o++]=S[Z++],F[o++]=S[Z++],k-=3;k&&(F[o++]=S[Z++],1<k&&(F[o++]=S[Z++]))}else{for(Z=o-x;F[o++]=F[Z++],F[o++]=F[Z++],F[o++]=F[Z++],2<(k-=3););k&&(F[o++]=F[Z++],1<k&&(F[o++]=F[Z++]))}break}}break}}while(n<i&&o<s);n-=k=p>>3,d&=(1<<(p-=k<<3))-1,t.next_in=n,t.next_out=o,t.avail_in=n<i?i-n+5:5-(n-i),t.avail_out=o<s?s-o+257:257-(o-s),r.hold=d,r.bits=p}},{}],49:[function(t,e,r){"use strict";var n=t("../utils/common"),i=t("./adler32"),o=t("./crc32"),a=t("./inffast"),s=t("./inftrees"),u=-2;function c(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function h(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function l(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new n.Buf32(852),e.distcode=e.distdyn=new n.Buf32(592),e.sane=1,e.back=-1,0):u}function f(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,l(t)):u}function d(t,e){var r,n;return t&&t.state?(n=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||15<e)?u:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,f(t))):u}function p(t,e){var r,n;return t?(n=new h,(t.state=n).window=null,0!==(r=d(t,e))&&(t.state=null),r):u}var g,v,m=!0;function y(t){if(m){var e;for(g=new n.Buf32(512),v=new n.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(1,t.lens,0,288,g,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(2,t.lens,0,32,v,0,t.work,{bits:5}),m=!1}t.lencode=g,t.lenbits=9,t.distcode=v,t.distbits=5}function b(t,e,r,i){var o,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new n.Buf8(a.wsize)),i>=a.wsize?(n.arraySet(a.window,e,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(i<(o=a.wsize-a.wnext)&&(o=i),n.arraySet(a.window,e,r-i,o,a.wnext),(i-=o)?(n.arraySet(a.window,e,r-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}r.inflateReset=f,r.inflateReset2=d,r.inflateResetKeep=l,r.inflateInit=function(t){return p(t,15)},r.inflateInit2=p,r.inflate=function(t,e){var r,h,l,f,d,p,g,v,m,w,k,x,Z,S,C,F,T,A,O,R,z,P,D,N,B=0,I=new n.Buf8(4),E=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return u;12===(r=t.state).mode&&(r.mode=13),d=t.next_out,l=t.output,g=t.avail_out,f=t.next_in,h=t.input,p=t.avail_in,v=r.hold,m=r.bits,w=p,k=g,P=0;t:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;m<16;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}if(2&r.wrap&&35615===v){I[r.check=0]=255&v,I[1]=v>>>8&255,r.check=o(r.check,I,2,0),m=v=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&v)<<8)+(v>>8))%31){t.msg="incorrect header check",r.mode=30;break}if(8!=(15&v)){t.msg="unknown compression method",r.mode=30;break}if(m-=4,z=8+(15&(v>>>=4)),0===r.wbits)r.wbits=z;else if(z>r.wbits){t.msg="invalid window size",r.mode=30;break}r.dmax=1<<z,t.adler=r.check=1,r.mode=512&v?10:12,m=v=0;break;case 2:for(;m<16;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}if(r.flags=v,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=v>>8&1),512&r.flags&&(I[0]=255&v,I[1]=v>>>8&255,r.check=o(r.check,I,2,0)),m=v=0,r.mode=3;case 3:for(;m<32;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}r.head&&(r.head.time=v),512&r.flags&&(I[0]=255&v,I[1]=v>>>8&255,I[2]=v>>>16&255,I[3]=v>>>24&255,r.check=o(r.check,I,4,0)),m=v=0,r.mode=4;case 4:for(;m<16;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}r.head&&(r.head.xflags=255&v,r.head.os=v>>8),512&r.flags&&(I[0]=255&v,I[1]=v>>>8&255,r.check=o(r.check,I,2,0)),m=v=0,r.mode=5;case 5:if(1024&r.flags){for(;m<16;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}r.length=v,r.head&&(r.head.extra_len=v),512&r.flags&&(I[0]=255&v,I[1]=v>>>8&255,r.check=o(r.check,I,2,0)),m=v=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(p<(x=r.length)&&(x=p),x&&(r.head&&(z=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,h,f,x,z)),512&r.flags&&(r.check=o(r.check,h,x,f)),p-=x,f+=x,r.length-=x),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===p)break t;for(x=0;z=h[f+x++],r.head&&z&&r.length<65536&&(r.head.name+=String.fromCharCode(z)),z&&x<p;);if(512&r.flags&&(r.check=o(r.check,h,x,f)),p-=x,f+=x,z)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===p)break t;for(x=0;z=h[f+x++],r.head&&z&&r.length<65536&&(r.head.comment+=String.fromCharCode(z)),z&&x<p;);if(512&r.flags&&(r.check=o(r.check,h,x,f)),p-=x,f+=x,z)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;m<16;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}if(v!==(65535&r.check)){t.msg="header crc mismatch",r.mode=30;break}m=v=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=12;break;case 10:for(;m<32;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}t.adler=r.check=c(v),m=v=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=d,t.avail_out=g,t.next_in=f,t.avail_in=p,r.hold=v,r.bits=m,2;t.adler=r.check=1,r.mode=12;case 12:if(5===e||6===e)break t;case 13:if(r.last){v>>>=7&m,m-=7&m,r.mode=27;break}for(;m<3;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}switch(r.last=1&v,m-=1,3&(v>>>=1)){case 0:r.mode=14;break;case 1:if(y(r),r.mode=20,6!==e)break;v>>>=2,m-=2;break t;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=30}v>>>=2,m-=2;break;case 14:for(v>>>=7&m,m-=7&m;m<32;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}if((65535&v)!=(v>>>16^65535)){t.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&v,m=v=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(x=r.length){if(p<x&&(x=p),g<x&&(x=g),0===x)break t;n.arraySet(l,h,f,x,d),p-=x,f+=x,g-=x,d+=x,r.length-=x;break}r.mode=12;break;case 17:for(;m<14;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}if(r.nlen=257+(31&v),v>>>=5,m-=5,r.ndist=1+(31&v),v>>>=5,m-=5,r.ncode=4+(15&v),v>>>=4,m-=4,286<r.nlen||30<r.ndist){t.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;m<3;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}r.lens[E[r.have++]]=7&v,v>>>=3,m-=3}for(;r.have<19;)r.lens[E[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,D={bits:r.lenbits},P=s(0,r.lens,0,19,r.lencode,0,r.work,D),r.lenbits=D.bits,P){t.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;F=(B=r.lencode[v&(1<<r.lenbits)-1])>>>16&255,T=65535&B,!((C=B>>>24)<=m);){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}if(T<16)v>>>=C,m-=C,r.lens[r.have++]=T;else{if(16===T){for(N=C+2;m<N;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}if(v>>>=C,m-=C,0===r.have){t.msg="invalid bit length repeat",r.mode=30;break}z=r.lens[r.have-1],x=3+(3&v),v>>>=2,m-=2}else if(17===T){for(N=C+3;m<N;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}m-=C,z=0,x=3+(7&(v>>>=C)),v>>>=3,m-=3}else{for(N=C+7;m<N;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}m-=C,z=0,x=11+(127&(v>>>=C)),v>>>=7,m-=7}if(r.have+x>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=30;break}for(;x--;)r.lens[r.have++]=z}}if(30===r.mode)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,D={bits:r.lenbits},P=s(1,r.lens,0,r.nlen,r.lencode,0,r.work,D),r.lenbits=D.bits,P){t.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,D={bits:r.distbits},P=s(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,D),r.distbits=D.bits,P){t.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(6<=p&&258<=g){t.next_out=d,t.avail_out=g,t.next_in=f,t.avail_in=p,r.hold=v,r.bits=m,a(t,k),d=t.next_out,l=t.output,g=t.avail_out,f=t.next_in,h=t.input,p=t.avail_in,v=r.hold,m=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;F=(B=r.lencode[v&(1<<r.lenbits)-1])>>>16&255,T=65535&B,!((C=B>>>24)<=m);){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}if(F&&0==(240&F)){for(A=C,O=F,R=T;F=(B=r.lencode[R+((v&(1<<A+O)-1)>>A)])>>>16&255,T=65535&B,!(A+(C=B>>>24)<=m);){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}v>>>=A,m-=A,r.back+=A}if(v>>>=C,m-=C,r.back+=C,r.length=T,0===F){r.mode=26;break}if(32&F){r.back=-1,r.mode=12;break}if(64&F){t.msg="invalid literal/length code",r.mode=30;break}r.extra=15&F,r.mode=22;case 22:if(r.extra){for(N=r.extra;m<N;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}r.length+=v&(1<<r.extra)-1,v>>>=r.extra,m-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;F=(B=r.distcode[v&(1<<r.distbits)-1])>>>16&255,T=65535&B,!((C=B>>>24)<=m);){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}if(0==(240&F)){for(A=C,O=F,R=T;F=(B=r.distcode[R+((v&(1<<A+O)-1)>>A)])>>>16&255,T=65535&B,!(A+(C=B>>>24)<=m);){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}v>>>=A,m-=A,r.back+=A}if(v>>>=C,m-=C,r.back+=C,64&F){t.msg="invalid distance code",r.mode=30;break}r.offset=T,r.extra=15&F,r.mode=24;case 24:if(r.extra){for(N=r.extra;m<N;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}r.offset+=v&(1<<r.extra)-1,v>>>=r.extra,m-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===g)break t;if(x=k-g,r.offset>x){if((x=r.offset-x)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=30;break}Z=x>r.wnext?(x-=r.wnext,r.wsize-x):r.wnext-x,x>r.length&&(x=r.length),S=r.window}else S=l,Z=d-r.offset,x=r.length;for(g<x&&(x=g),g-=x,r.length-=x;l[d++]=S[Z++],--x;);0===r.length&&(r.mode=21);break;case 26:if(0===g)break t;l[d++]=r.length,g--,r.mode=21;break;case 27:if(r.wrap){for(;m<32;){if(0===p)break t;p--,v|=h[f++]<<m,m+=8}if(k-=g,t.total_out+=k,r.total+=k,k&&(t.adler=r.check=r.flags?o(r.check,l,k,d-k):i(r.check,l,k,d-k)),k=g,(r.flags?v:c(v))!==r.check){t.msg="incorrect data check",r.mode=30;break}m=v=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;m<32;){if(0===p)break t;p--,v+=h[f++]<<m,m+=8}if(v!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=30;break}m=v=0}r.mode=29;case 29:P=1;break t;case 30:P=-3;break t;case 31:return-4;default:return u}return t.next_out=d,t.avail_out=g,t.next_in=f,t.avail_in=p,r.hold=v,r.bits=m,(r.wsize||k!==t.avail_out&&r.mode<30&&(r.mode<27||4!==e))&&b(t,t.output,t.next_out,k-t.avail_out)?(r.mode=31,-4):(w-=t.avail_in,k-=t.avail_out,t.total_in+=w,t.total_out+=k,r.total+=k,r.wrap&&k&&(t.adler=r.check=r.flags?o(r.check,l,k,t.next_out-k):i(r.check,l,k,t.next_out-k)),t.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==w&&0===k||4===e)&&0===P&&(P=-5),P)},r.inflateEnd=function(t){if(!t||!t.state)return u;var e=t.state;return e.window&&(e.window=null),t.state=null,0},r.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?u:((r.head=e).done=!1,0):u},r.inflateSetDictionary=function(t,e){var r,n=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?u:11===r.mode&&i(1,e,n,0)!==r.check?-3:b(t,e,n,n)?(r.mode=31,-4):(r.havedict=1,0):u},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(t,e,r){"use strict";var n=t("../utils/common"),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,r,u,c,h,l,f){var d,p,g,v,m,y,b,w,k,x=f.bits,Z=0,S=0,C=0,F=0,T=0,A=0,O=0,R=0,z=0,P=0,D=null,N=0,B=new n.Buf16(16),I=new n.Buf16(16),E=null,U=0;for(Z=0;Z<=15;Z++)B[Z]=0;for(S=0;S<u;S++)B[e[r+S]]++;for(T=x,F=15;1<=F&&0===B[F];F--);if(F<T&&(T=F),0===F)return c[h++]=20971520,c[h++]=20971520,f.bits=1,0;for(C=1;C<F&&0===B[C];C++);for(T<C&&(T=C),Z=R=1;Z<=15;Z++)if(R<<=1,(R-=B[Z])<0)return-1;if(0<R&&(0===t||1!==F))return-1;for(I[1]=0,Z=1;Z<15;Z++)I[Z+1]=I[Z]+B[Z];for(S=0;S<u;S++)0!==e[r+S]&&(l[I[e[r+S]]++]=S);if(y=0===t?(D=E=l,19):1===t?(D=i,N-=257,E=o,U-=257,256):(D=a,E=s,-1),Z=C,m=h,O=S=P=0,g=-1,v=(z=1<<(A=T))-1,1===t&&852<z||2===t&&592<z)return 1;for(;;){for(b=Z-O,k=l[S]<y?(w=0,l[S]):l[S]>y?(w=E[U+l[S]],D[N+l[S]]):(w=96,0),d=1<<Z-O,C=p=1<<A;c[m+(P>>O)+(p-=d)]=b<<24|w<<16|k|0,0!==p;);for(d=1<<Z-1;P&d;)d>>=1;if(0!==d?(P&=d-1,P+=d):P=0,S++,0==--B[Z]){if(Z===F)break;Z=e[r+l[S]]}if(T<Z&&(P&v)!==g){for(0===O&&(O=T),m+=C,R=1<<(A=Z-O);A+O<F&&!((R-=B[A+O])<=0);)A++,R<<=1;if(z+=1<<A,1===t&&852<z||2===t&&592<z)return 1;c[g=P&v]=T<<24|A<<16|m-h|0}}return 0!==P&&(c[m+P]=Z-O<<24|64<<16|0),f.bits=T,0}},{"../utils/common":41}],51:[function(t,e,r){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(t,e,r){"use strict";var n=t("../utils/common");function i(t){for(var e=t.length;0<=--e;)t[e]=0}var o=256,a=286,s=30,u=15,c=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],h=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],f=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],d=new Array(576);i(d);var p=new Array(60);i(p);var g=new Array(512);i(g);var v=new Array(256);i(v);var m=new Array(29);i(m);var y,b,w,k=new Array(s);function x(t,e,r,n,i){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=t&&t.length}function Z(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function S(t){return t<256?g[t]:g[256+(t>>>7)]}function C(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function F(t,e,r){t.bi_valid>16-r?(t.bi_buf|=e<<t.bi_valid&65535,C(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=r-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function T(t,e,r){F(t,r[2*e],r[2*e+1])}function A(t,e){for(var r=0;r|=1&t,t>>>=1,r<<=1,0<--e;);return r>>>1}function O(t,e,r){var n,i,o=new Array(16),a=0;for(n=1;n<=u;n++)o[n]=a=a+r[n-1]<<1;for(i=0;i<=e;i++){var s=t[2*i+1];0!==s&&(t[2*i]=A(o[s]++,s))}}function R(t){var e;for(e=0;e<a;e++)t.dyn_ltree[2*e]=0;for(e=0;e<s;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function z(t){8<t.bi_valid?C(t,t.bi_buf):0<t.bi_valid&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function P(t,e,r,n){var i=2*e,o=2*r;return t[i]<t[o]||t[i]===t[o]&&n[e]<=n[r]}function D(t,e,r){for(var n=t.heap[r],i=r<<1;i<=t.heap_len&&(i<t.heap_len&&P(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!P(e,n,t.heap[i],t.depth));)t.heap[r]=t.heap[i],r=i,i<<=1;t.heap[r]=n}function N(t,e,r){var n,i,a,s,u=0;if(0!==t.last_lit)for(;n=t.pending_buf[t.d_buf+2*u]<<8|t.pending_buf[t.d_buf+2*u+1],i=t.pending_buf[t.l_buf+u],u++,0===n?T(t,i,e):(T(t,(a=v[i])+o+1,e),0!==(s=c[a])&&F(t,i-=m[a],s),T(t,a=S(--n),r),0!==(s=h[a])&&F(t,n-=k[a],s)),u<t.last_lit;);T(t,256,e)}function B(t,e){var r,n,i,o=e.dyn_tree,a=e.stat_desc.static_tree,s=e.stat_desc.has_stree,c=e.stat_desc.elems,h=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<c;r++)0!==o[2*r]?(t.heap[++t.heap_len]=h=r,t.depth[r]=0):o[2*r+1]=0;for(;t.heap_len<2;)o[2*(i=t.heap[++t.heap_len]=h<2?++h:0)]=1,t.depth[i]=0,t.opt_len--,s&&(t.static_len-=a[2*i+1]);for(e.max_code=h,r=t.heap_len>>1;1<=r;r--)D(t,o,r);for(i=c;r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],D(t,o,1),n=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=n,o[2*i]=o[2*r]+o[2*n],t.depth[i]=(t.depth[r]>=t.depth[n]?t.depth[r]:t.depth[n])+1,o[2*r+1]=o[2*n+1]=i,t.heap[1]=i++,D(t,o,1),2<=t.heap_len;);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,n,i,o,a,s,c=e.dyn_tree,h=e.max_code,l=e.stat_desc.static_tree,f=e.stat_desc.has_stree,d=e.stat_desc.extra_bits,p=e.stat_desc.extra_base,g=e.stat_desc.max_length,v=0;for(o=0;o<=u;o++)t.bl_count[o]=0;for(c[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<573;r++)g<(o=c[2*c[2*(n=t.heap[r])+1]+1]+1)&&(o=g,v++),c[2*n+1]=o,h<n||(t.bl_count[o]++,a=0,p<=n&&(a=d[n-p]),s=c[2*n],t.opt_len+=s*(o+a),f&&(t.static_len+=s*(l[2*n+1]+a)));if(0!==v){do{for(o=g-1;0===t.bl_count[o];)o--;t.bl_count[o]--,t.bl_count[o+1]+=2,t.bl_count[g]--,v-=2}while(0<v);for(o=g;0!==o;o--)for(n=t.bl_count[o];0!==n;)h<(i=t.heap[--r])||(c[2*i+1]!==o&&(t.opt_len+=(o-c[2*i+1])*c[2*i],c[2*i+1]=o),n--)}}(t,e),O(o,h,t.bl_count)}function I(t,e,r){var n,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),e[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=e[2*(n+1)+1],++s<u&&i===a||(s<c?t.bl_tree[2*i]+=s:0!==i?(i!==o&&t.bl_tree[2*i]++,t.bl_tree[32]++):s<=10?t.bl_tree[34]++:t.bl_tree[36]++,o=i,c=(s=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4))}function E(t,e,r){var n,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),n=0;n<=r;n++)if(i=a,a=e[2*(n+1)+1],!(++s<u&&i===a)){if(s<c)for(;T(t,i,t.bl_tree),0!=--s;);else 0!==i?(i!==o&&(T(t,i,t.bl_tree),s--),T(t,16,t.bl_tree),F(t,s-3,2)):s<=10?(T(t,17,t.bl_tree),F(t,s-3,3)):(T(t,18,t.bl_tree),F(t,s-11,7));o=i,c=(s=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4)}}i(k);var U=!1;function j(t,e,r,i){F(t,0+(i?1:0),3),function(t,e,r,i){z(t),C(t,r),C(t,~r),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r)}r._tr_init=function(t){U||(function(){var t,e,r,n,i,o=new Array(16);for(n=r=0;n<28;n++)for(m[n]=r,t=0;t<1<<c[n];t++)v[r++]=n;for(v[r-1]=n,n=i=0;n<16;n++)for(k[n]=i,t=0;t<1<<h[n];t++)g[i++]=n;for(i>>=7;n<s;n++)for(k[n]=i<<7,t=0;t<1<<h[n]-7;t++)g[256+i++]=n;for(e=0;e<=u;e++)o[e]=0;for(t=0;t<=143;)d[2*t+1]=8,t++,o[8]++;for(;t<=255;)d[2*t+1]=9,t++,o[9]++;for(;t<=279;)d[2*t+1]=7,t++,o[7]++;for(;t<=287;)d[2*t+1]=8,t++,o[8]++;for(O(d,287,o),t=0;t<s;t++)p[2*t+1]=5,p[2*t]=A(t,5);y=new x(d,c,257,a,u),b=new x(p,h,0,s,u),w=new x(new Array(0),l,0,19,7)}(),U=!0),t.l_desc=new Z(t.dyn_ltree,y),t.d_desc=new Z(t.dyn_dtree,b),t.bl_desc=new Z(t.bl_tree,w),t.bi_buf=0,t.bi_valid=0,R(t)},r._tr_stored_block=j,r._tr_flush_block=function(t,e,r,n){var i,a,s=0;0<t.level?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<o;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),B(t,t.l_desc),B(t,t.d_desc),s=function(t){var e;for(I(t,t.dyn_ltree,t.l_desc.max_code),I(t,t.dyn_dtree,t.d_desc.max_code),B(t,t.bl_desc),e=18;3<=e&&0===t.bl_tree[2*f[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),i=t.opt_len+3+7>>>3,(a=t.static_len+3+7>>>3)<=i&&(i=a)):i=a=r+5,r+4<=i&&-1!==e?j(t,e,r,n):4===t.strategy||a===i?(F(t,2+(n?1:0),3),N(t,d,p)):(F(t,4+(n?1:0),3),function(t,e,r,n){var i;for(F(t,e-257,5),F(t,r-1,5),F(t,n-4,4),i=0;i<n;i++)F(t,t.bl_tree[2*f[i]+1],3);E(t,t.dyn_ltree,e-1),E(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),N(t,t.dyn_ltree,t.dyn_dtree)),R(t),n&&z(t)},r._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(v[r]+o+1)]++,t.dyn_dtree[2*S(e)]++),t.last_lit===t.lit_bufsize-1},r._tr_align=function(t){F(t,2,3),T(t,256,d),function(t){16===t.bi_valid?(C(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},{"../utils/common":41}],53:[function(t,e,r){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(t,e,r){"use strict";e.exports="function"==typeof setImmediate?setImmediate:function(){var t=[].slice.apply(arguments);t.splice(1,0,0),setTimeout.apply(null,t)}},{}]},{},[10])(10)},9591:(t,e,r)=>{"use strict";var n={};(0,r(4236).assign)(n,r(4555),r(8843),r(1619)),t.exports=n},4555:(t,e,r)=>{"use strict";var n=r(405),i=r(4236),o=r(9373),a=r(8898),s=r(2292),u=Object.prototype.toString;function c(t){if(!(this instanceof c))return new c(t);this.options=i.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(0!==r)throw new Error(a[r]);if(e.header&&n.deflateSetHeader(this.strm,e.header),e.dictionary){var h;if(h="string"==typeof e.dictionary?o.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,0!==(r=n.deflateSetDictionary(this.strm,h)))throw new Error(a[r]);this._dict_set=!0}}function h(t,e){var r=new c(e);if(r.push(t,!0),r.err)throw r.msg||a[r.err];return r.result}c.prototype.push=function(t,e){var r,a,s=this.strm,c=this.options.chunkSize;if(this.ended)return!1;a=e===~~e?e:!0===e?4:0,"string"==typeof t?s.input=o.string2buf(t):"[object ArrayBuffer]"===u.call(t)?s.input=new Uint8Array(t):s.input=t,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new i.Buf8(c),s.next_out=0,s.avail_out=c),1!==(r=n.deflate(s,a))&&0!==r)return this.onEnd(r),this.ended=!0,!1;0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(o.buf2binstring(i.shrinkBuf(s.output,s.next_out))):this.onData(i.shrinkBuf(s.output,s.next_out)))}while((s.avail_in>0||0===s.avail_out)&&1!==r);return 4===a?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):2!==a||(this.onEnd(0),s.avail_out=0,!0)},c.prototype.onData=function(t){this.chunks.push(t)},c.prototype.onEnd=function(t){0===t&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Deflate=c,e.deflate=h,e.deflateRaw=function(t,e){return(e=e||{}).raw=!0,h(t,e)},e.gzip=function(t,e){return(e=e||{}).gzip=!0,h(t,e)}},8843:(t,e,r)=>{"use strict";var n=r(7948),i=r(4236),o=r(9373),a=r(1619),s=r(8898),u=r(2292),c=r(2401),h=Object.prototype.toString;function l(t){if(!(this instanceof l))return new l(t);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,e.windowBits);if(r!==a.Z_OK)throw new Error(s[r]);if(this.header=new c,n.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=o.string2buf(e.dictionary):"[object ArrayBuffer]"===h.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(r=n.inflateSetDictionary(this.strm,e.dictionary))!==a.Z_OK))throw new Error(s[r])}function f(t,e){var r=new l(e);if(r.push(t,!0),r.err)throw r.msg||s[r.err];return r.result}l.prototype.push=function(t,e){var r,s,u,c,l,f=this.strm,d=this.options.chunkSize,p=this.options.dictionary,g=!1;if(this.ended)return!1;s=e===~~e?e:!0===e?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof t?f.input=o.binstring2buf(t):"[object ArrayBuffer]"===h.call(t)?f.input=new Uint8Array(t):f.input=t,f.next_in=0,f.avail_in=f.input.length;do{if(0===f.avail_out&&(f.output=new i.Buf8(d),f.next_out=0,f.avail_out=d),(r=n.inflate(f,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&p&&(r=n.inflateSetDictionary(this.strm,p)),r===a.Z_BUF_ERROR&&!0===g&&(r=a.Z_OK,g=!1),r!==a.Z_STREAM_END&&r!==a.Z_OK)return this.onEnd(r),this.ended=!0,!1;f.next_out&&(0!==f.avail_out&&r!==a.Z_STREAM_END&&(0!==f.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(f.output,f.next_out),c=f.next_out-u,l=o.buf2string(f.output,u),f.next_out=c,f.avail_out=d-c,c&&i.arraySet(f.output,f.output,u,c,0),this.onData(l)):this.onData(i.shrinkBuf(f.output,f.next_out)))),0===f.avail_in&&0===f.avail_out&&(g=!0)}while((f.avail_in>0||0===f.avail_out)&&r!==a.Z_STREAM_END);return r===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),f.avail_out=0,!0)},l.prototype.onData=function(t){this.chunks.push(t)},l.prototype.onEnd=function(t){t===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Inflate=l,e.inflate=f,e.inflateRaw=function(t,e){return(e=e||{}).raw=!0,f(t,e)},e.ungzip=f},4236:(t,e)=>{"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function n(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var i in r)n(r,i)&&(t[i]=r[i])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var i={arraySet:function(t,e,r,n,i){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+n),i);else for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){var e,r,n,i,o,a;for(n=0,e=0,r=t.length;e<r;e++)n+=t[e].length;for(a=new Uint8Array(n),i=0,e=0,r=t.length;e<r;e++)o=t[e],a.set(o,i),i+=o.length;return a}},o={arraySet:function(t,e,r,n,i){for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,i)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,o))},e.setTyped(r)},9373:(t,e,r)=>{"use strict";var n=r(4236),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(t){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){o=!1}for(var a=new n.Buf8(256),s=0;s<256;s++)a[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1;function u(t,e){if(e<65534&&(t.subarray&&o||!t.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var r="",a=0;a<e;a++)r+=String.fromCharCode(t[a]);return r}a[254]=a[254]=1,e.string2buf=function(t){var e,r,i,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(e=new n.Buf8(u),a=0,o=0;a<u;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),r<128?e[a++]=r:r<2048?(e[a++]=192|r>>>6,e[a++]=128|63&r):r<65536?(e[a++]=224|r>>>12,e[a++]=128|r>>>6&63,e[a++]=128|63&r):(e[a++]=240|r>>>18,e[a++]=128|r>>>12&63,e[a++]=128|r>>>6&63,e[a++]=128|63&r);return e},e.buf2binstring=function(t){return u(t,t.length)},e.binstring2buf=function(t){for(var e=new n.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},e.buf2string=function(t,e){var r,n,i,o,s=e||t.length,c=new Array(2*s);for(n=0,r=0;r<s;)if((i=t[r++])<128)c[n++]=i;else if((o=a[i])>4)c[n++]=65533,r+=o-1;else{for(i&=2===o?31:3===o?15:7;o>1&&r<s;)i=i<<6|63&t[r++],o--;o>1?c[n++]=65533:i<65536?c[n++]=i:(i-=65536,c[n++]=55296|i>>10&1023,c[n++]=56320|1023&i)}return u(c,n)},e.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+a[t[r]]>e?r:e}},6069:t=>{"use strict";t.exports=function(t,e,r,n){for(var i=65535&t|0,o=t>>>16&65535|0,a=0;0!==r;){r-=a=r>2e3?2e3:r;do{o=o+(i=i+e[n++]|0)|0}while(--a);i%=65521,o%=65521}return i|o<<16|0}},1619:t=>{"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},2869:t=>{"use strict";var e=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();t.exports=function(t,r,n,i){var o=e,a=i+n;t^=-1;for(var s=i;s<a;s++)t=t>>>8^o[255&(t^r[s])];return-1^t}},405:(t,e,r)=>{"use strict";var n,i=r(4236),o=r(342),a=r(6069),s=r(2869),u=r(8898),c=-2,h=258,l=262,f=103,d=113,p=666;function g(t,e){return t.msg=u[e],e}function v(t){return(t<<1)-(t>4?9:0)}function m(t){for(var e=t.length;--e>=0;)t[e]=0}function y(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(i.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function b(t,e){o._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,y(t.strm)}function w(t,e){t.pending_buf[t.pending++]=e}function k(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function x(t,e){var r,n,i=t.max_chain_length,o=t.strstart,a=t.prev_length,s=t.nice_match,u=t.strstart>t.w_size-l?t.strstart-(t.w_size-l):0,c=t.window,f=t.w_mask,d=t.prev,p=t.strstart+h,g=c[o+a-1],v=c[o+a];t.prev_length>=t.good_match&&(i>>=2),s>t.lookahead&&(s=t.lookahead);do{if(c[(r=e)+a]===v&&c[r+a-1]===g&&c[r]===c[o]&&c[++r]===c[o+1]){o+=2,r++;do{}while(c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&o<p);if(n=h-(p-o),o=p-h,n>a){if(t.match_start=e,a=n,n>=s)break;g=c[o+a-1],v=c[o+a]}}}while((e=d[e&f])>u&&0!=--i);return a<=t.lookahead?a:t.lookahead}function Z(t){var e,r,n,o,u,c,h,f,d,p,g=t.w_size;do{if(o=t.window_size-t.lookahead-t.strstart,t.strstart>=g+(g-l)){i.arraySet(t.window,t.window,g,g,0),t.match_start-=g,t.strstart-=g,t.block_start-=g,e=r=t.hash_size;do{n=t.head[--e],t.head[e]=n>=g?n-g:0}while(--r);e=r=g;do{n=t.prev[--e],t.prev[e]=n>=g?n-g:0}while(--r);o+=g}if(0===t.strm.avail_in)break;if(c=t.strm,h=t.window,f=t.strstart+t.lookahead,d=o,p=void 0,(p=c.avail_in)>d&&(p=d),r=0===p?0:(c.avail_in-=p,i.arraySet(h,c.input,c.next_in,p,f),1===c.state.wrap?c.adler=a(c.adler,h,p,f):2===c.state.wrap&&(c.adler=s(c.adler,h,p,f)),c.next_in+=p,c.total_in+=p,p),t.lookahead+=r,t.lookahead+t.insert>=3)for(u=t.strstart-t.insert,t.ins_h=t.window[u],t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+3-1])&t.hash_mask,t.prev[u&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=u,u++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<l&&0!==t.strm.avail_in)}function S(t,e){for(var r,n;;){if(t.lookahead<l){if(Z(t),t.lookahead<l&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-l&&(t.match_length=x(t,r)),t.match_length>=3)if(n=o._tr_tally(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(b(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,4===e?(b(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(b(t,!1),0===t.strm.avail_out)?1:2}function C(t,e){for(var r,n,i;;){if(t.lookahead<l){if(Z(t),t.lookahead<l&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-l&&(t.match_length=x(t,r),t.match_length<=5&&(1===t.strategy||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){i=t.strstart+t.lookahead-3,n=o._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=i&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,n&&(b(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if((n=o._tr_tally(t,0,t.window[t.strstart-1]))&&b(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(n=o._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,4===e?(b(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(b(t,!1),0===t.strm.avail_out)?1:2}function F(t,e,r,n,i){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=n,this.func=i}function T(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(1146),this.dyn_dtree=new i.Buf16(122),this.bl_tree=new i.Buf16(78),m(this.dyn_ltree),m(this.dyn_dtree),m(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(16),this.heap=new i.Buf16(573),m(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(573),m(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function A(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=2,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:d,t.adler=2===e.wrap?0:1,e.last_flush=0,o._tr_init(e),0):g(t,c)}function O(t){var e,r=A(t);return 0===r&&((e=t.state).window_size=2*e.w_size,m(e.head),e.max_lazy_match=n[e.level].max_lazy,e.good_match=n[e.level].good_length,e.nice_match=n[e.level].nice_length,e.max_chain_length=n[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0),r}function R(t,e,r,n,o,a){if(!t)return c;var s=1;if(-1===e&&(e=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),o<1||o>9||8!==r||n<8||n>15||e<0||e>9||a<0||a>4)return g(t,c);8===n&&(n=9);var u=new T;return t.state=u,u.strm=t,u.wrap=s,u.gzhead=null,u.w_bits=n,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+3-1)/3),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=e,u.strategy=a,u.method=r,O(t)}n=[new F(0,0,0,0,(function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(Z(t),0===t.lookahead&&0===e)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var n=t.block_start+r;if((0===t.strstart||t.strstart>=n)&&(t.lookahead=t.strstart-n,t.strstart=n,b(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-l&&(b(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(b(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(b(t,!1),t.strm.avail_out),1)})),new F(4,4,8,4,S),new F(4,5,16,8,S),new F(4,6,32,32,S),new F(4,4,16,16,C),new F(8,16,32,32,C),new F(8,16,128,128,C),new F(8,32,128,256,C),new F(32,128,258,1024,C),new F(32,258,258,4096,C)],e.deflateInit=function(t,e){return R(t,e,8,15,8,0)},e.deflateInit2=R,e.deflateReset=O,e.deflateResetKeep=A,e.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?c:(t.state.gzhead=e,0):c},e.deflate=function(t,e){var r,i,a,u;if(!t||!t.state||e>5||e<0)return t?g(t,c):c;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||i.status===p&&4!==e)return g(t,0===t.avail_out?-5:c);if(i.strm=t,r=i.last_flush,i.last_flush=e,42===i.status)if(2===i.wrap)t.adler=0,w(i,31),w(i,139),w(i,8),i.gzhead?(w(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),w(i,255&i.gzhead.time),w(i,i.gzhead.time>>8&255),w(i,i.gzhead.time>>16&255),w(i,i.gzhead.time>>24&255),w(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),w(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(w(i,255&i.gzhead.extra.length),w(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=s(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(w(i,0),w(i,0),w(i,0),w(i,0),w(i,0),w(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),w(i,3),i.status=d);else{var l=8+(i.w_bits-8<<4)<<8;l|=(i.strategy>=2||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(l|=32),l+=31-l%31,i.status=d,k(i,l),0!==i.strstart&&(k(i,t.adler>>>16),k(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),y(t),a=i.pending,i.pending!==i.pending_buf_size));)w(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),y(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,w(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),y(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,w(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.status=f)}else i.status=f;if(i.status===f&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&y(t),i.pending+2<=i.pending_buf_size&&(w(i,255&t.adler),w(i,t.adler>>8&255),t.adler=0,i.status=d)):i.status=d),0!==i.pending){if(y(t),0===t.avail_out)return i.last_flush=-1,0}else if(0===t.avail_in&&v(e)<=v(r)&&4!==e)return g(t,-5);if(i.status===p&&0!==t.avail_in)return g(t,-5);if(0!==t.avail_in||0!==i.lookahead||0!==e&&i.status!==p){var x=2===i.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(Z(t),0===t.lookahead)){if(0===e)return 1;break}if(t.match_length=0,r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(b(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(b(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(b(t,!1),0===t.strm.avail_out)?1:2}(i,e):3===i.strategy?function(t,e){for(var r,n,i,a,s=t.window;;){if(t.lookahead<=h){if(Z(t),t.lookahead<=h&&0===e)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=s[i=t.strstart-1])===s[++i]&&n===s[++i]&&n===s[++i]){a=t.strstart+h;do{}while(n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&i<a);t.match_length=h-(a-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(r=o._tr_tally(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(b(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(b(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(b(t,!1),0===t.strm.avail_out)?1:2}(i,e):n[i.level].func(i,e);if(3!==x&&4!==x||(i.status=p),1===x||3===x)return 0===t.avail_out&&(i.last_flush=-1),0;if(2===x&&(1===e?o._tr_align(i):5!==e&&(o._tr_stored_block(i,0,0,!1),3===e&&(m(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),y(t),0===t.avail_out))return i.last_flush=-1,0}return 4!==e?0:i.wrap<=0?1:(2===i.wrap?(w(i,255&t.adler),w(i,t.adler>>8&255),w(i,t.adler>>16&255),w(i,t.adler>>24&255),w(i,255&t.total_in),w(i,t.total_in>>8&255),w(i,t.total_in>>16&255),w(i,t.total_in>>24&255)):(k(i,t.adler>>>16),k(i,65535&t.adler)),y(t),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?0:1)},e.deflateEnd=function(t){var e;return t&&t.state?42!==(e=t.state.status)&&69!==e&&73!==e&&91!==e&&e!==f&&e!==d&&e!==p?g(t,c):(t.state=null,e===d?g(t,-3):0):c},e.deflateSetDictionary=function(t,e){var r,n,o,s,u,h,l,f,d=e.length;if(!t||!t.state)return c;if(2===(s=(r=t.state).wrap)||1===s&&42!==r.status||r.lookahead)return c;for(1===s&&(t.adler=a(t.adler,e,d,0)),r.wrap=0,d>=r.w_size&&(0===s&&(m(r.head),r.strstart=0,r.block_start=0,r.insert=0),f=new i.Buf8(r.w_size),i.arraySet(f,e,d-r.w_size,r.w_size,0),e=f,d=r.w_size),u=t.avail_in,h=t.next_in,l=t.input,t.avail_in=d,t.next_in=0,t.input=e,Z(r);r.lookahead>=3;){n=r.strstart,o=r.lookahead-2;do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+3-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++}while(--o);r.strstart=n,r.lookahead=2,Z(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,t.next_in=h,t.input=l,t.avail_in=u,r.wrap=s,0},e.deflateInfo="pako deflate (from Nodeca project)"},2401:t=>{"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},4264:t=>{"use strict";t.exports=function(t,e){var r,n,i,o,a,s,u,c,h,l,f,d,p,g,v,m,y,b,w,k,x,Z,S,C,F;r=t.state,n=t.next_in,C=t.input,i=n+(t.avail_in-5),o=t.next_out,F=t.output,a=o-(e-t.avail_out),s=o+(t.avail_out-257),u=r.dmax,c=r.wsize,h=r.whave,l=r.wnext,f=r.window,d=r.hold,p=r.bits,g=r.lencode,v=r.distcode,m=(1<<r.lenbits)-1,y=(1<<r.distbits)-1;t:do{p<15&&(d+=C[n++]<<p,p+=8,d+=C[n++]<<p,p+=8),b=g[d&m];e:for(;;){if(d>>>=w=b>>>24,p-=w,0==(w=b>>>16&255))F[o++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=g[(65535&b)+(d&(1<<w)-1)];continue e}if(32&w){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}k=65535&b,(w&=15)&&(p<w&&(d+=C[n++]<<p,p+=8),k+=d&(1<<w)-1,d>>>=w,p-=w),p<15&&(d+=C[n++]<<p,p+=8,d+=C[n++]<<p,p+=8),b=v[d&y];r:for(;;){if(d>>>=w=b>>>24,p-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=v[(65535&b)+(d&(1<<w)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(x=65535&b,p<(w&=15)&&(d+=C[n++]<<p,(p+=8)<w&&(d+=C[n++]<<p,p+=8)),(x+=d&(1<<w)-1)>u){t.msg="invalid distance too far back",r.mode=30;break t}if(d>>>=w,p-=w,x>(w=o-a)){if((w=x-w)>h&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(Z=0,S=f,0===l){if(Z+=c-w,w<k){k-=w;do{F[o++]=f[Z++]}while(--w);Z=o-x,S=F}}else if(l<w){if(Z+=c+l-w,(w-=l)<k){k-=w;do{F[o++]=f[Z++]}while(--w);if(Z=0,l<k){k-=w=l;do{F[o++]=f[Z++]}while(--w);Z=o-x,S=F}}}else if(Z+=l-w,w<k){k-=w;do{F[o++]=f[Z++]}while(--w);Z=o-x,S=F}for(;k>2;)F[o++]=S[Z++],F[o++]=S[Z++],F[o++]=S[Z++],k-=3;k&&(F[o++]=S[Z++],k>1&&(F[o++]=S[Z++]))}else{Z=o-x;do{F[o++]=F[Z++],F[o++]=F[Z++],F[o++]=F[Z++],k-=3}while(k>2);k&&(F[o++]=F[Z++],k>1&&(F[o++]=F[Z++]))}break}}break}}while(n<i&&o<s);n-=k=p>>3,d&=(1<<(p-=k<<3))-1,t.next_in=n,t.next_out=o,t.avail_in=n<i?i-n+5:5-(n-i),t.avail_out=o<s?s-o+257:257-(o-s),r.hold=d,r.bits=p}},7948:(t,e,r)=>{"use strict";var n=r(4236),i=r(6069),o=r(2869),a=r(4264),s=r(9241),u=-2,c=12,h=30;function l(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function f(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function d(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new n.Buf32(852),e.distcode=e.distdyn=new n.Buf32(592),e.sane=1,e.back=-1,0):u}function p(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,d(t)):u}function g(t,e){var r,n;return t&&t.state?(n=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?u:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,p(t))):u}function v(t,e){var r,n;return t?(n=new f,t.state=n,n.window=null,0!==(r=g(t,e))&&(t.state=null),r):u}var m,y,b=!0;function w(t){if(b){var e;for(m=new n.Buf32(512),y=new n.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(1,t.lens,0,288,m,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(2,t.lens,0,32,y,0,t.work,{bits:5}),b=!1}t.lencode=m,t.lenbits=9,t.distcode=y,t.distbits=5}function k(t,e,r,i){var o,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new n.Buf8(a.wsize)),i>=a.wsize?(n.arraySet(a.window,e,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((o=a.wsize-a.wnext)>i&&(o=i),n.arraySet(a.window,e,r-i,o,a.wnext),(i-=o)?(n.arraySet(a.window,e,r-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}e.inflateReset=p,e.inflateReset2=g,e.inflateResetKeep=d,e.inflateInit=function(t){return v(t,15)},e.inflateInit2=v,e.inflate=function(t,e){var r,f,d,p,g,v,m,y,b,x,Z,S,C,F,T,A,O,R,z,P,D,N,B,I,E=0,U=new n.Buf8(4),j=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return u;(r=t.state).mode===c&&(r.mode=13),g=t.next_out,d=t.output,m=t.avail_out,p=t.next_in,f=t.input,v=t.avail_in,y=r.hold,b=r.bits,x=v,Z=m,N=0;t:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;b<16;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(2&r.wrap&&35615===y){r.check=0,U[0]=255&y,U[1]=y>>>8&255,r.check=o(r.check,U,2,0),y=0,b=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&y)<<8)+(y>>8))%31){t.msg="incorrect header check",r.mode=h;break}if(8!=(15&y)){t.msg="unknown compression method",r.mode=h;break}if(b-=4,D=8+(15&(y>>>=4)),0===r.wbits)r.wbits=D;else if(D>r.wbits){t.msg="invalid window size",r.mode=h;break}r.dmax=1<<D,t.adler=r.check=1,r.mode=512&y?10:c,y=0,b=0;break;case 2:for(;b<16;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(r.flags=y,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=h;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=h;break}r.head&&(r.head.text=y>>8&1),512&r.flags&&(U[0]=255&y,U[1]=y>>>8&255,r.check=o(r.check,U,2,0)),y=0,b=0,r.mode=3;case 3:for(;b<32;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.head&&(r.head.time=y),512&r.flags&&(U[0]=255&y,U[1]=y>>>8&255,U[2]=y>>>16&255,U[3]=y>>>24&255,r.check=o(r.check,U,4,0)),y=0,b=0,r.mode=4;case 4:for(;b<16;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.head&&(r.head.xflags=255&y,r.head.os=y>>8),512&r.flags&&(U[0]=255&y,U[1]=y>>>8&255,r.check=o(r.check,U,2,0)),y=0,b=0,r.mode=5;case 5:if(1024&r.flags){for(;b<16;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.length=y,r.head&&(r.head.extra_len=y),512&r.flags&&(U[0]=255&y,U[1]=y>>>8&255,r.check=o(r.check,U,2,0)),y=0,b=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((S=r.length)>v&&(S=v),S&&(r.head&&(D=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,f,p,S,D)),512&r.flags&&(r.check=o(r.check,f,S,p)),v-=S,p+=S,r.length-=S),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===v)break t;S=0;do{D=f[p+S++],r.head&&D&&r.length<65536&&(r.head.name+=String.fromCharCode(D))}while(D&&S<v);if(512&r.flags&&(r.check=o(r.check,f,S,p)),v-=S,p+=S,D)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===v)break t;S=0;do{D=f[p+S++],r.head&&D&&r.length<65536&&(r.head.comment+=String.fromCharCode(D))}while(D&&S<v);if(512&r.flags&&(r.check=o(r.check,f,S,p)),v-=S,p+=S,D)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;b<16;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(y!==(65535&r.check)){t.msg="header crc mismatch",r.mode=h;break}y=0,b=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=c;break;case 10:for(;b<32;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}t.adler=r.check=l(y),y=0,b=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=g,t.avail_out=m,t.next_in=p,t.avail_in=v,r.hold=y,r.bits=b,2;t.adler=r.check=1,r.mode=c;case c:if(5===e||6===e)break t;case 13:if(r.last){y>>>=7&b,b-=7&b,r.mode=27;break}for(;b<3;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}switch(r.last=1&y,b-=1,3&(y>>>=1)){case 0:r.mode=14;break;case 1:if(w(r),r.mode=20,6===e){y>>>=2,b-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=h}y>>>=2,b-=2;break;case 14:for(y>>>=7&b,b-=7&b;b<32;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if((65535&y)!=(y>>>16^65535)){t.msg="invalid stored block lengths",r.mode=h;break}if(r.length=65535&y,y=0,b=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(S=r.length){if(S>v&&(S=v),S>m&&(S=m),0===S)break t;n.arraySet(d,f,p,S,g),v-=S,p+=S,m-=S,g+=S,r.length-=S;break}r.mode=c;break;case 17:for(;b<14;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(r.nlen=257+(31&y),y>>>=5,b-=5,r.ndist=1+(31&y),y>>>=5,b-=5,r.ncode=4+(15&y),y>>>=4,b-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=h;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;b<3;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.lens[j[r.have++]]=7&y,y>>>=3,b-=3}for(;r.have<19;)r.lens[j[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,B={bits:r.lenbits},N=s(0,r.lens,0,19,r.lencode,0,r.work,B),r.lenbits=B.bits,N){t.msg="invalid code lengths set",r.mode=h;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;A=(E=r.lencode[y&(1<<r.lenbits)-1])>>>16&255,O=65535&E,!((T=E>>>24)<=b);){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(O<16)y>>>=T,b-=T,r.lens[r.have++]=O;else{if(16===O){for(I=T+2;b<I;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(y>>>=T,b-=T,0===r.have){t.msg="invalid bit length repeat",r.mode=h;break}D=r.lens[r.have-1],S=3+(3&y),y>>>=2,b-=2}else if(17===O){for(I=T+3;b<I;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}b-=T,D=0,S=3+(7&(y>>>=T)),y>>>=3,b-=3}else{for(I=T+7;b<I;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}b-=T,D=0,S=11+(127&(y>>>=T)),y>>>=7,b-=7}if(r.have+S>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=h;break}for(;S--;)r.lens[r.have++]=D}}if(r.mode===h)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=h;break}if(r.lenbits=9,B={bits:r.lenbits},N=s(1,r.lens,0,r.nlen,r.lencode,0,r.work,B),r.lenbits=B.bits,N){t.msg="invalid literal/lengths set",r.mode=h;break}if(r.distbits=6,r.distcode=r.distdyn,B={bits:r.distbits},N=s(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,B),r.distbits=B.bits,N){t.msg="invalid distances set",r.mode=h;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(v>=6&&m>=258){t.next_out=g,t.avail_out=m,t.next_in=p,t.avail_in=v,r.hold=y,r.bits=b,a(t,Z),g=t.next_out,d=t.output,m=t.avail_out,p=t.next_in,f=t.input,v=t.avail_in,y=r.hold,b=r.bits,r.mode===c&&(r.back=-1);break}for(r.back=0;A=(E=r.lencode[y&(1<<r.lenbits)-1])>>>16&255,O=65535&E,!((T=E>>>24)<=b);){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(A&&0==(240&A)){for(R=T,z=A,P=O;A=(E=r.lencode[P+((y&(1<<R+z)-1)>>R)])>>>16&255,O=65535&E,!(R+(T=E>>>24)<=b);){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}y>>>=R,b-=R,r.back+=R}if(y>>>=T,b-=T,r.back+=T,r.length=O,0===A){r.mode=26;break}if(32&A){r.back=-1,r.mode=c;break}if(64&A){t.msg="invalid literal/length code",r.mode=h;break}r.extra=15&A,r.mode=22;case 22:if(r.extra){for(I=r.extra;b<I;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.length+=y&(1<<r.extra)-1,y>>>=r.extra,b-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;A=(E=r.distcode[y&(1<<r.distbits)-1])>>>16&255,O=65535&E,!((T=E>>>24)<=b);){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(0==(240&A)){for(R=T,z=A,P=O;A=(E=r.distcode[P+((y&(1<<R+z)-1)>>R)])>>>16&255,O=65535&E,!(R+(T=E>>>24)<=b);){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}y>>>=R,b-=R,r.back+=R}if(y>>>=T,b-=T,r.back+=T,64&A){t.msg="invalid distance code",r.mode=h;break}r.offset=O,r.extra=15&A,r.mode=24;case 24:if(r.extra){for(I=r.extra;b<I;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}r.offset+=y&(1<<r.extra)-1,y>>>=r.extra,b-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=h;break}r.mode=25;case 25:if(0===m)break t;if(S=Z-m,r.offset>S){if((S=r.offset-S)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=h;break}S>r.wnext?(S-=r.wnext,C=r.wsize-S):C=r.wnext-S,S>r.length&&(S=r.length),F=r.window}else F=d,C=g-r.offset,S=r.length;S>m&&(S=m),m-=S,r.length-=S;do{d[g++]=F[C++]}while(--S);0===r.length&&(r.mode=21);break;case 26:if(0===m)break t;d[g++]=r.length,m--,r.mode=21;break;case 27:if(r.wrap){for(;b<32;){if(0===v)break t;v--,y|=f[p++]<<b,b+=8}if(Z-=m,t.total_out+=Z,r.total+=Z,Z&&(t.adler=r.check=r.flags?o(r.check,d,Z,g-Z):i(r.check,d,Z,g-Z)),Z=m,(r.flags?y:l(y))!==r.check){t.msg="incorrect data check",r.mode=h;break}y=0,b=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;b<32;){if(0===v)break t;v--,y+=f[p++]<<b,b+=8}if(y!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=h;break}y=0,b=0}r.mode=29;case 29:N=1;break t;case h:N=-3;break t;case 31:return-4;default:return u}return t.next_out=g,t.avail_out=m,t.next_in=p,t.avail_in=v,r.hold=y,r.bits=b,(r.wsize||Z!==t.avail_out&&r.mode<h&&(r.mode<27||4!==e))&&k(t,t.output,t.next_out,Z-t.avail_out)?(r.mode=31,-4):(x-=t.avail_in,Z-=t.avail_out,t.total_in+=x,t.total_out+=Z,r.total+=Z,r.wrap&&Z&&(t.adler=r.check=r.flags?o(r.check,d,Z,t.next_out-Z):i(r.check,d,Z,t.next_out-Z)),t.data_type=r.bits+(r.last?64:0)+(r.mode===c?128:0)+(20===r.mode||15===r.mode?256:0),(0===x&&0===Z||4===e)&&0===N&&(N=-5),N)},e.inflateEnd=function(t){if(!t||!t.state)return u;var e=t.state;return e.window&&(e.window=null),t.state=null,0},e.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?u:(r.head=e,e.done=!1,0):u},e.inflateSetDictionary=function(t,e){var r,n=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?u:11===r.mode&&i(1,e,n,0)!==r.check?-3:k(t,e,n,n)?(r.mode=31,-4):(r.havedict=1,0):u},e.inflateInfo="pako inflate (from Nodeca project)"},9241:(t,e,r)=>{"use strict";var n=r(4236),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,r,u,c,h,l,f){var d,p,g,v,m,y,b,w,k,x=f.bits,Z=0,S=0,C=0,F=0,T=0,A=0,O=0,R=0,z=0,P=0,D=null,N=0,B=new n.Buf16(16),I=new n.Buf16(16),E=null,U=0;for(Z=0;Z<=15;Z++)B[Z]=0;for(S=0;S<u;S++)B[e[r+S]]++;for(T=x,F=15;F>=1&&0===B[F];F--);if(T>F&&(T=F),0===F)return c[h++]=20971520,c[h++]=20971520,f.bits=1,0;for(C=1;C<F&&0===B[C];C++);for(T<C&&(T=C),R=1,Z=1;Z<=15;Z++)if(R<<=1,(R-=B[Z])<0)return-1;if(R>0&&(0===t||1!==F))return-1;for(I[1]=0,Z=1;Z<15;Z++)I[Z+1]=I[Z]+B[Z];for(S=0;S<u;S++)0!==e[r+S]&&(l[I[e[r+S]]++]=S);if(0===t?(D=E=l,y=19):1===t?(D=i,N-=257,E=o,U-=257,y=256):(D=a,E=s,y=-1),P=0,S=0,Z=C,m=h,A=T,O=0,g=-1,v=(z=1<<T)-1,1===t&&z>852||2===t&&z>592)return 1;for(;;){b=Z-O,l[S]<y?(w=0,k=l[S]):l[S]>y?(w=E[U+l[S]],k=D[N+l[S]]):(w=96,k=0),d=1<<Z-O,C=p=1<<A;do{c[m+(P>>O)+(p-=d)]=b<<24|w<<16|k|0}while(0!==p);for(d=1<<Z-1;P&d;)d>>=1;if(0!==d?(P&=d-1,P+=d):P=0,S++,0==--B[Z]){if(Z===F)break;Z=e[r+l[S]]}if(Z>T&&(P&v)!==g){for(0===O&&(O=T),m+=C,R=1<<(A=Z-O);A+O<F&&!((R-=B[A+O])<=0);)A++,R<<=1;if(z+=1<<A,1===t&&z>852||2===t&&z>592)return 1;c[g=P&v]=T<<24|A<<16|m-h|0}}return 0!==P&&(c[m+P]=Z-O<<24|64<<16|0),f.bits=T,0}},8898:t=>{"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},342:(t,e,r)=>{"use strict";var n=r(4236);function i(t){for(var e=t.length;--e>=0;)t[e]=0}var o=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],a=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],u=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],c=new Array(576);i(c);var h=new Array(60);i(h);var l=new Array(512);i(l);var f=new Array(256);i(f);var d=new Array(29);i(d);var p,g,v,m=new Array(30);function y(t,e,r,n,i){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=t&&t.length}function b(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function w(t){return t<256?l[t]:l[256+(t>>>7)]}function k(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function x(t,e,r){t.bi_valid>16-r?(t.bi_buf|=e<<t.bi_valid&65535,k(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=r-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function Z(t,e,r){x(t,r[2*e],r[2*e+1])}function S(t,e){var r=0;do{r|=1&t,t>>>=1,r<<=1}while(--e>0);return r>>>1}function C(t,e,r){var n,i,o=new Array(16),a=0;for(n=1;n<=15;n++)o[n]=a=a+r[n-1]<<1;for(i=0;i<=e;i++){var s=t[2*i+1];0!==s&&(t[2*i]=S(o[s]++,s))}}function F(t){var e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function T(t){t.bi_valid>8?k(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function A(t,e,r,n){var i=2*e,o=2*r;return t[i]<t[o]||t[i]===t[o]&&n[e]<=n[r]}function O(t,e,r){for(var n=t.heap[r],i=r<<1;i<=t.heap_len&&(i<t.heap_len&&A(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!A(e,n,t.heap[i],t.depth));)t.heap[r]=t.heap[i],r=i,i<<=1;t.heap[r]=n}function R(t,e,r){var n,i,s,u,c=0;if(0!==t.last_lit)do{n=t.pending_buf[t.d_buf+2*c]<<8|t.pending_buf[t.d_buf+2*c+1],i=t.pending_buf[t.l_buf+c],c++,0===n?Z(t,i,e):(Z(t,(s=f[i])+256+1,e),0!==(u=o[s])&&x(t,i-=d[s],u),Z(t,s=w(--n),r),0!==(u=a[s])&&x(t,n-=m[s],u))}while(c<t.last_lit);Z(t,256,e)}function z(t,e){var r,n,i,o=e.dyn_tree,a=e.stat_desc.static_tree,s=e.stat_desc.has_stree,u=e.stat_desc.elems,c=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<u;r++)0!==o[2*r]?(t.heap[++t.heap_len]=c=r,t.depth[r]=0):o[2*r+1]=0;for(;t.heap_len<2;)o[2*(i=t.heap[++t.heap_len]=c<2?++c:0)]=1,t.depth[i]=0,t.opt_len--,s&&(t.static_len-=a[2*i+1]);for(e.max_code=c,r=t.heap_len>>1;r>=1;r--)O(t,o,r);i=u;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],O(t,o,1),n=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=n,o[2*i]=o[2*r]+o[2*n],t.depth[i]=(t.depth[r]>=t.depth[n]?t.depth[r]:t.depth[n])+1,o[2*r+1]=o[2*n+1]=i,t.heap[1]=i++,O(t,o,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,n,i,o,a,s,u=e.dyn_tree,c=e.max_code,h=e.stat_desc.static_tree,l=e.stat_desc.has_stree,f=e.stat_desc.extra_bits,d=e.stat_desc.extra_base,p=e.stat_desc.max_length,g=0;for(o=0;o<=15;o++)t.bl_count[o]=0;for(u[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<573;r++)(o=u[2*u[2*(n=t.heap[r])+1]+1]+1)>p&&(o=p,g++),u[2*n+1]=o,n>c||(t.bl_count[o]++,a=0,n>=d&&(a=f[n-d]),s=u[2*n],t.opt_len+=s*(o+a),l&&(t.static_len+=s*(h[2*n+1]+a)));if(0!==g){do{for(o=p-1;0===t.bl_count[o];)o--;t.bl_count[o]--,t.bl_count[o+1]+=2,t.bl_count[p]--,g-=2}while(g>0);for(o=p;0!==o;o--)for(n=t.bl_count[o];0!==n;)(i=t.heap[--r])>c||(u[2*i+1]!==o&&(t.opt_len+=(o-u[2*i+1])*u[2*i],u[2*i+1]=o),n--)}}(t,e),C(o,c,t.bl_count)}function P(t,e,r){var n,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),e[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=e[2*(n+1)+1],++s<u&&i===a||(s<c?t.bl_tree[2*i]+=s:0!==i?(i!==o&&t.bl_tree[2*i]++,t.bl_tree[32]++):s<=10?t.bl_tree[34]++:t.bl_tree[36]++,s=0,o=i,0===a?(u=138,c=3):i===a?(u=6,c=3):(u=7,c=4))}function D(t,e,r){var n,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),n=0;n<=r;n++)if(i=a,a=e[2*(n+1)+1],!(++s<u&&i===a)){if(s<c)do{Z(t,i,t.bl_tree)}while(0!=--s);else 0!==i?(i!==o&&(Z(t,i,t.bl_tree),s--),Z(t,16,t.bl_tree),x(t,s-3,2)):s<=10?(Z(t,17,t.bl_tree),x(t,s-3,3)):(Z(t,18,t.bl_tree),x(t,s-11,7));s=0,o=i,0===a?(u=138,c=3):i===a?(u=6,c=3):(u=7,c=4)}}i(m);var N=!1;function B(t,e,r,i){x(t,0+(i?1:0),3),function(t,e,r,i){T(t),k(t,r),k(t,~r),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r)}e._tr_init=function(t){N||(function(){var t,e,r,n,i,u=new Array(16);for(r=0,n=0;n<28;n++)for(d[n]=r,t=0;t<1<<o[n];t++)f[r++]=n;for(f[r-1]=n,i=0,n=0;n<16;n++)for(m[n]=i,t=0;t<1<<a[n];t++)l[i++]=n;for(i>>=7;n<30;n++)for(m[n]=i<<7,t=0;t<1<<a[n]-7;t++)l[256+i++]=n;for(e=0;e<=15;e++)u[e]=0;for(t=0;t<=143;)c[2*t+1]=8,t++,u[8]++;for(;t<=255;)c[2*t+1]=9,t++,u[9]++;for(;t<=279;)c[2*t+1]=7,t++,u[7]++;for(;t<=287;)c[2*t+1]=8,t++,u[8]++;for(C(c,287,u),t=0;t<30;t++)h[2*t+1]=5,h[2*t]=S(t,5);p=new y(c,o,257,286,15),g=new y(h,a,0,30,15),v=new y(new Array(0),s,0,19,7)}(),N=!0),t.l_desc=new b(t.dyn_ltree,p),t.d_desc=new b(t.dyn_dtree,g),t.bl_desc=new b(t.bl_tree,v),t.bi_buf=0,t.bi_valid=0,F(t)},e._tr_stored_block=B,e._tr_flush_block=function(t,e,r,n){var i,o,a=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),z(t,t.l_desc),z(t,t.d_desc),a=function(t){var e;for(P(t,t.dyn_ltree,t.l_desc.max_code),P(t,t.dyn_dtree,t.d_desc.max_code),z(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*u[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),i=t.opt_len+3+7>>>3,(o=t.static_len+3+7>>>3)<=i&&(i=o)):i=o=r+5,r+4<=i&&-1!==e?B(t,e,r,n):4===t.strategy||o===i?(x(t,2+(n?1:0),3),R(t,c,h)):(x(t,4+(n?1:0),3),function(t,e,r,n){var i;for(x(t,e-257,5),x(t,r-1,5),x(t,n-4,4),i=0;i<n;i++)x(t,t.bl_tree[2*u[i]+1],3);D(t,t.dyn_ltree,e-1),D(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),R(t,t.dyn_ltree,t.dyn_dtree)),F(t),n&&T(t)},e._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(f[r]+256+1)]++,t.dyn_dtree[2*w(e)]++),t.last_lit===t.lit_bufsize-1},e._tr_align=function(t){x(t,2,3),Z(t,256,c),function(t){16===t.bi_valid?(k(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},2292:t=>{"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},5966:(t,e,r)=>{"use strict";r.d(e,{Z:()=>y});var n=r(7638),i=r(4755),o=r(7366),a=r(6013),s=r(5941),u=r(4087),c=r(8418),h=r(9135),l=r(6107),f=r(9874),d=r(1795),p=r(4634),g=r(1071),v=r(6789),m=r(2717);const y=function(){function t(t,e,r){var n=this;if(this.defaultWordBreaks=[" "],this.computePages=function(){var t=[];return n.catalog.Pages().traverse((function(e,r){if(e instanceof l.Eg){var i=n.pageMap.get(e);i||(i=u.Z.of(e,r,n),n.pageMap.set(e,i)),t.push(i)}})),t},this.getOrCreateForm=function(){var t=n.catalog.getOrCreateAcroForm();return c.Z.of(t,n)},(0,d.ku)(t,"context",[[l.o6,"PDFContext"]]),(0,d.ku)(e,"ignoreEncryption",["boolean"]),this.context=t,this.catalog=t.lookup(t.trailerInfo.Root),this.isEncrypted=!!t.lookup(t.trailerInfo.Encrypt),this.pageCache=d.Ct.populatedBy(this.computePages),this.pageMap=new Map,this.formCache=d.Ct.populatedBy(this.getOrCreateForm),this.fonts=[],this.images=[],this.embeddedPages=[],this.embeddedFiles=[],this.javaScripts=[],!e&&this.isEncrypted)throw new i.ip;r&&this.updateInfoDict()}return t.load=function(e,r){return void 0===r&&(r={}),(0,n.mG)(this,void 0,void 0,(function(){var i,o,a,s,u,c,h,p,g,v,m;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return i=r.ignoreEncryption,o=void 0!==i&&i,a=r.parseSpeed,s=void 0===a?f.u.Slow:a,u=r.throwOnInvalidObject,c=void 0!==u&&u,h=r.updateMetadata,p=void 0===h||h,g=r.capNumbers,v=void 0!==g&&g,(0,d.ku)(e,"pdf",["string",Uint8Array,ArrayBuffer]),(0,d.ku)(o,"ignoreEncryption",["boolean"]),(0,d.ku)(s,"parseSpeed",["number"]),(0,d.ku)(c,"throwOnInvalidObject",["boolean"]),m=(0,d._f)(e),[4,l.h9.forBytesWithOptions(m,s,c,v).parseDocument()];case 1:return[2,new t(n.sent(),o,p)]}}))}))},t.create=function(e){return void 0===e&&(e={}),(0,n.mG)(this,void 0,void 0,(function(){var r,i,o,a,s,u;return(0,n.Jh)(this,(function(n){return r=e.updateMetadata,i=void 0===r||r,o=l.o6.create(),a=l.N8.withContext(o),s=o.register(a),u=l.lR.withContextAndPages(o,s),o.trailerInfo.Root=o.register(u),[2,new t(o,!1,i)]}))}))},t.prototype.registerFontkit=function(t){this.fontkit=t},t.prototype.getForm=function(){var t=this.formCache.access();return t.hasXFA()&&(console.warn("Removing XFA form data as pdf-lib does not support reading or writing XFA"),t.deleteXFA()),t},t.prototype.getTitle=function(){var t=this.getInfoDict().lookup(l.wQ.Title);if(t)return b(t),t.decodeText()},t.prototype.getAuthor=function(){var t=this.getInfoDict().lookup(l.wQ.Author);if(t)return b(t),t.decodeText()},t.prototype.getSubject=function(){var t=this.getInfoDict().lookup(l.wQ.Subject);if(t)return b(t),t.decodeText()},t.prototype.getKeywords=function(){var t=this.getInfoDict().lookup(l.wQ.Keywords);if(t)return b(t),t.decodeText()},t.prototype.getCreator=function(){var t=this.getInfoDict().lookup(l.wQ.Creator);if(t)return b(t),t.decodeText()},t.prototype.getProducer=function(){var t=this.getInfoDict().lookup(l.wQ.Producer);if(t)return b(t),t.decodeText()},t.prototype.getCreationDate=function(){var t=this.getInfoDict().lookup(l.wQ.CreationDate);if(t)return b(t),t.decodeDate()},t.prototype.getModificationDate=function(){var t=this.getInfoDict().lookup(l.wQ.ModDate);if(t)return b(t),t.decodeDate()},t.prototype.setTitle=function(t,e){(0,d.ku)(t,"title",["string"]);var r=l.wQ.of("Title");this.getInfoDict().set(r,l.Ij.fromText(t)),(null==e?void 0:e.showInWindowTitleBar)&&this.catalog.getOrCreateViewerPreferences().setDisplayDocTitle(!0)},t.prototype.setAuthor=function(t){(0,d.ku)(t,"author",["string"]);var e=l.wQ.of("Author");this.getInfoDict().set(e,l.Ij.fromText(t))},t.prototype.setSubject=function(t){(0,d.ku)(t,"author",["string"]);var e=l.wQ.of("Subject");this.getInfoDict().set(e,l.Ij.fromText(t))},t.prototype.setKeywords=function(t){(0,d.ku)(t,"keywords",[Array]);var e=l.wQ.of("Keywords");this.getInfoDict().set(e,l.Ij.fromText(t.join(" ")))},t.prototype.setCreator=function(t){(0,d.ku)(t,"creator",["string"]);var e=l.wQ.of("Creator");this.getInfoDict().set(e,l.Ij.fromText(t))},t.prototype.setProducer=function(t){(0,d.ku)(t,"creator",["string"]);var e=l.wQ.of("Producer");this.getInfoDict().set(e,l.Ij.fromText(t))},t.prototype.setLanguage=function(t){(0,d.ku)(t,"language",["string"]);var e=l.wQ.of("Lang");this.catalog.set(e,l.u2.of(t))},t.prototype.setCreationDate=function(t){(0,d.ku)(t,"creationDate",[[Date,"Date"]]);var e=l.wQ.of("CreationDate");this.getInfoDict().set(e,l.u2.fromDate(t))},t.prototype.setModificationDate=function(t){(0,d.ku)(t,"modificationDate",[[Date,"Date"]]);var e=l.wQ.of("ModDate");this.getInfoDict().set(e,l.u2.fromDate(t))},t.prototype.getPageCount=function(){return void 0===this.pageCount&&(this.pageCount=this.getPages().length),this.pageCount},t.prototype.getPages=function(){return this.pageCache.access()},t.prototype.getPage=function(t){var e=this.getPages();return(0,d.gI)(t,"index",0,e.length-1),e[t]},t.prototype.getPageIndices=function(){return(0,d.w6)(0,this.getPageCount())},t.prototype.removePage=function(t){var e=this.getPageCount();if(0===this.pageCount)throw new i.jw;(0,d.gI)(t,"index",0,e-1),this.catalog.removeLeafNode(t),this.pageCount=e-1},t.prototype.addPage=function(t){return(0,d.ku)(t,"page",["undefined",[u.Z,"PDFPage"],Array]),this.insertPage(this.getPageCount(),t)},t.prototype.insertPage=function(t,e){var r=this.getPageCount();if((0,d.gI)(t,"index",0,r),(0,d.ku)(e,"page",["undefined",[u.Z,"PDFPage"],Array]),!e||Array.isArray(e)){var n=Array.isArray(e)?e:h.b.A4;(e=u.Z.create(this)).setSize.apply(e,n)}else if(e.doc!==this)throw new i.Nl;var o=this.catalog.insertLeafNode(e.ref,t);return e.node.setParent(o),this.pageMap.set(e.node,e),this.pageCache.invalidate(),this.pageCount=r+1,e},t.prototype.copyPages=function(e,r){return(0,n.mG)(this,void 0,void 0,(function(){var i,o,a,s,c,h,f,p;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return(0,d.ku)(e,"srcDoc",[[t,"PDFDocument"]]),(0,d.ku)(r,"indices",[Array]),[4,e.flush()];case 1:for(n.sent(),i=l.Wy.for(e.context,this.context),o=e.getPages(),a=new Array(r.length),s=0,c=r.length;s<c;s++)h=o[r[s]],f=i.copy(h.node),p=this.context.register(f),a[s]=u.Z.of(f,p,this);return[2,a]}}))}))},t.prototype.addJavaScript=function(t,e){(0,d.ku)(t,"name",["string"]),(0,d.ku)(e,"script",["string"]);var r=m.Z.for(e,t),n=this.context.nextRef(),i=v.Z.of(n,this,r);this.javaScripts.push(i)},t.prototype.attach=function(t,e,r){return void 0===r&&(r={}),(0,n.mG)(this,void 0,void 0,(function(){var i,o,a,s;return(0,n.Jh)(this,(function(n){return(0,d.ku)(t,"attachment",["string",Uint8Array,ArrayBuffer]),(0,d.ku)(e,"name",["string"]),(0,d.MU)(r.mimeType,"mimeType",["string"]),(0,d.MU)(r.description,"description",["string"]),(0,d.MU)(r.creationDate,"options.creationDate",[Date]),(0,d.MU)(r.modificationDate,"options.modificationDate",[Date]),(0,d.GT)(r.afRelationship,"options.afRelationship",p.J),i=(0,d._f)(t),o=p.Z.for(i,e,r),a=this.context.nextRef(),s=g.Z.of(a,this,o),this.embeddedFiles.push(s),[2]}))}))},t.prototype.embedFont=function(t,e){return void 0===e&&(e={}),(0,n.mG)(this,void 0,void 0,(function(){var r,i,o,s,u,c,h,f,p,g;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return r=e.subset,i=void 0!==r&&r,o=e.customName,s=e.features,(0,d.ku)(t,"font",["string",Uint8Array,ArrayBuffer]),(0,d.ku)(i,"subset",["boolean"]),(0,d.Cl)(t)?(u=l.IL.for(t,o),[3,7]):[3,1];case 1:return(0,d.TE)(t)?(c=(0,d._f)(t),h=this.assertFontkit(),i?[4,l.zO.for(h,c,o,s)]:[3,3]):[3,6];case 2:return f=n.sent(),[3,5];case 3:return[4,l.Wz.for(h,c,o,s)];case 4:f=n.sent(),n.label=5;case 5:return u=f,[3,7];case 6:throw new TypeError("`font` must be one of `StandardFonts | string | Uint8Array | ArrayBuffer`");case 7:return p=this.context.nextRef(),g=a.Z.of(p,this,u),this.fonts.push(g),[2,g]}}))}))},t.prototype.embedStandardFont=function(t,e){if((0,d.ku)(t,"font",["string"]),!(0,d.Cl)(t))throw new TypeError("`font` must be one of type `StandardFonts`");var r=l.IL.for(t,e),n=this.context.nextRef(),i=a.Z.of(n,this,r);return this.fonts.push(i),i},t.prototype.embedJpg=function(t){return(0,n.mG)(this,void 0,void 0,(function(){var e,r,i,o;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return(0,d.ku)(t,"jpg",["string",Uint8Array,ArrayBuffer]),e=(0,d._f)(t),[4,l.sm.for(e)];case 1:return r=n.sent(),i=this.context.nextRef(),o=s.Z.of(i,this,r),this.images.push(o),[2,o]}}))}))},t.prototype.embedPng=function(t){return(0,n.mG)(this,void 0,void 0,(function(){var e,r,i,o;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return(0,d.ku)(t,"png",["string",Uint8Array,ArrayBuffer]),e=(0,d._f)(t),[4,l.Le.for(e)];case 1:return r=n.sent(),i=this.context.nextRef(),o=s.Z.of(i,this,r),this.images.push(o),[2,o]}}))}))},t.prototype.embedPdf=function(e,r){return void 0===r&&(r=[0]),(0,n.mG)(this,void 0,void 0,(function(){var i,o,a;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return(0,d.ku)(e,"pdf",["string",Uint8Array,ArrayBuffer,[t,"PDFDocument"]]),(0,d.ku)(r,"indices",[Array]),e instanceof t?(o=e,[3,3]):[3,1];case 1:return[4,t.load(e)];case 2:o=n.sent(),n.label=3;case 3:return i=o,a=(0,d.Jp)(i.getPages(),r),[2,this.embedPages(a)]}}))}))},t.prototype.embedPage=function(t,e,r){return(0,n.mG)(this,void 0,void 0,(function(){return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return(0,d.ku)(t,"page",[[u.Z,"PDFPage"]]),[4,this.embedPages([t],[e],[r])];case 1:return[2,n.sent()[0]]}}))}))},t.prototype.embedPages=function(t,e,r){return void 0===e&&(e=[]),void 0===r&&(r=[]),(0,n.mG)(this,void 0,void 0,(function(){var i,a,s,u,c,h,f,d,p,g,v,m,y;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:if(0===t.length)return[2,[]];for(h=0,f=t.length-1;h<f;h++)if(i=t[h],a=t[h+1],i.node.context!==a.node.context)throw new l.qX;s=t[0].node.context,u=s===this.context?function(t){return t}:l.Wy.for(s,this.context).copy,c=new Array(t.length),h=0,f=t.length,n.label=1;case 1:return h<f?(d=u(t[h].node),p=e[h],g=r[h],[4,l.dS.for(d,p,g)]):[3,4];case 2:v=n.sent(),m=this.context.nextRef(),c[h]=o.Z.of(m,this,v),n.label=3;case 3:return h++,[3,1];case 4:return(y=this.embeddedPages).push.apply(y,c),[2,c]}}))}))},t.prototype.flush=function(){return(0,n.mG)(this,void 0,void 0,(function(){return(0,n.Jh)(this,(function(t){switch(t.label){case 0:return[4,this.embedAll(this.fonts)];case 1:return t.sent(),[4,this.embedAll(this.images)];case 2:return t.sent(),[4,this.embedAll(this.embeddedPages)];case 3:return t.sent(),[4,this.embedAll(this.embeddedFiles)];case 4:return t.sent(),[4,this.embedAll(this.javaScripts)];case 5:return t.sent(),[2]}}))}))},t.prototype.save=function(t){return void 0===t&&(t={}),(0,n.mG)(this,void 0,void 0,(function(){var e,r,i,o,a,s,u,c,h;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return e=t.useObjectStreams,r=void 0===e||e,i=t.addDefaultPage,o=void 0===i||i,a=t.objectsPerTick,s=void 0===a?50:a,u=t.updateFieldAppearances,c=void 0===u||u,(0,d.ku)(r,"useObjectStreams",["boolean"]),(0,d.ku)(o,"addDefaultPage",["boolean"]),(0,d.ku)(s,"objectsPerTick",["number"]),(0,d.ku)(c,"updateFieldAppearances",["boolean"]),o&&0===this.getPageCount()&&this.addPage(),c&&(h=this.formCache.getValue())&&h.updateFieldAppearances(),[4,this.flush()];case 1:return n.sent(),[2,(r?l.pV:l.Bn).forContext(this.context,s).serializeToBuffer()]}}))}))},t.prototype.saveAsBase64=function(t){return void 0===t&&(t={}),(0,n.mG)(this,void 0,void 0,(function(){var e,r,i,o,a;return(0,n.Jh)(this,(function(s){switch(s.label){case 0:return e=t.dataUri,r=void 0!==e&&e,i=(0,n._T)(t,["dataUri"]),(0,d.ku)(r,"dataUri",["boolean"]),[4,this.save(i)];case 1:return o=s.sent(),a=(0,d.Eo)(o),[2,r?"data:application/pdf;base64,"+a:a]}}))}))},t.prototype.findPageForAnnotationRef=function(t){for(var e=this.getPages(),r=0,n=e.length;r<n;r++){var i=e[r],o=i.node.Annots();if(void 0!==(null==o?void 0:o.indexOf(t)))return i}},t.prototype.embedAll=function(t){return(0,n.mG)(this,void 0,void 0,(function(){var e,r;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:e=0,r=t.length,n.label=1;case 1:return e<r?[4,t[e].embed()]:[3,4];case 2:n.sent(),n.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t.prototype.updateInfoDict=function(){var t="pdf-lib (https://github.com/Hopding/pdf-lib)",e=new Date,r=this.getInfoDict();this.setProducer(t),this.setModificationDate(e),r.get(l.wQ.of("Creator"))||this.setCreator(t),r.get(l.wQ.of("CreationDate"))||this.setCreationDate(e)},t.prototype.getInfoDict=function(){var t=this.context.lookup(this.context.trailerInfo.Info);if(t instanceof l.mh)return t;var e=this.context.obj({});return this.context.trailerInfo.Info=this.context.register(e),e},t.prototype.assertFontkit=function(){if(!this.fontkit)throw new i.I3;return this.fontkit},t}();function b(t){if(!(t instanceof l.Ij||t instanceof l.u2))throw new l.VX([l.Ij,l.u2],t)}},9874:(t,e,r)=>{"use strict";var n;r.d(e,{u:()=>n}),function(t){t[t.Fastest=1/0]="Fastest",t[t.Fast=1500]="Fast",t[t.Medium=500]="Medium",t[t.Slow=100]="Slow"}(n||(n={}))},1071:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(7638),i=r(6107);const o=function(){function t(t,e,r){this.alreadyEmbedded=!1,this.ref=t,this.doc=e,this.embedder=r}return t.prototype.embed=function(){return(0,n.mG)(this,void 0,void 0,(function(){var t,e,r,o;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return this.alreadyEmbedded?[3,2]:[4,this.embedder.embedIntoContext(this.doc.context,this.ref)];case 1:t=n.sent(),this.doc.catalog.has(i.wQ.of("Names"))||this.doc.catalog.set(i.wQ.of("Names"),this.doc.context.obj({})),(e=this.doc.catalog.lookup(i.wQ.of("Names"),i.mh)).has(i.wQ.of("EmbeddedFiles"))||e.set(i.wQ.of("EmbeddedFiles"),this.doc.context.obj({})),(r=e.lookup(i.wQ.of("EmbeddedFiles"),i.mh)).has(i.wQ.of("Names"))||r.set(i.wQ.of("Names"),this.doc.context.obj([])),(o=r.lookup(i.wQ.of("Names"),i.Gr)).push(i.Ij.fromText(this.embedder.fileName)),o.push(t),this.doc.catalog.has(i.wQ.of("AF"))||this.doc.catalog.set(i.wQ.of("AF"),this.doc.context.obj([])),this.doc.catalog.lookup(i.wQ.of("AF"),i.Gr).push(t),this.alreadyEmbedded=!0,n.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}()},7366:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(7638),i=r(5966),o=r(6107),a=r(1795);const s=function(){function t(t,e,r){this.alreadyEmbedded=!1,(0,a.ku)(t,"ref",[[o.$F,"PDFRef"]]),(0,a.ku)(e,"doc",[[i.Z,"PDFDocument"]]),(0,a.ku)(r,"embedder",[[o.dS,"PDFPageEmbedder"]]),this.ref=t,this.doc=e,this.width=r.width,this.height=r.height,this.embedder=r}return t.prototype.scale=function(t){return(0,a.ku)(t,"factor",["number"]),{width:this.width*t,height:this.height*t}},t.prototype.size=function(){return this.scale(1)},t.prototype.embed=function(){return(0,n.mG)(this,void 0,void 0,(function(){return(0,n.Jh)(this,(function(t){switch(t.label){case 0:return this.alreadyEmbedded?[3,2]:[4,this.embedder.embedIntoContext(this.doc.context,this.ref)];case 1:t.sent(),this.alreadyEmbedded=!0,t.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}()},6013:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(7638),i=r(5966),o=r(6107),a=r(1795);const s=function(){function t(t,e,r){this.modified=!0,(0,a.ku)(t,"ref",[[o.$F,"PDFRef"]]),(0,a.ku)(e,"doc",[[i.Z,"PDFDocument"]]),(0,a.ku)(r,"embedder",[[o.Wz,"CustomFontEmbedder"],[o.IL,"StandardFontEmbedder"]]),this.ref=t,this.doc=e,this.name=r.fontName,this.embedder=r}return t.prototype.encodeText=function(t){return(0,a.ku)(t,"text",["string"]),this.modified=!0,this.embedder.encodeText(t)},t.prototype.widthOfTextAtSize=function(t,e){return(0,a.ku)(t,"text",["string"]),(0,a.ku)(e,"size",["number"]),this.embedder.widthOfTextAtSize(t,e)},t.prototype.heightAtSize=function(t,e){var r;return(0,a.ku)(t,"size",["number"]),(0,a.MU)(null==e?void 0:e.descender,"options.descender",["boolean"]),this.embedder.heightOfFontAtSize(t,{descender:null===(r=null==e?void 0:e.descender)||void 0===r||r})},t.prototype.sizeAtHeight=function(t){return(0,a.ku)(t,"height",["number"]),this.embedder.sizeOfFontAtHeight(t)},t.prototype.getCharacterSet=function(){return this.embedder instanceof o.IL?this.embedder.encoding.supportedCodePoints:this.embedder.font.characterSet},t.prototype.embed=function(){return(0,n.mG)(this,void 0,void 0,(function(){return(0,n.Jh)(this,(function(t){switch(t.label){case 0:return this.modified?[4,this.embedder.embedIntoContext(this.doc.context,this.ref)]:[3,2];case 1:t.sent(),this.modified=!1,t.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}()},5941:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(7638),i=r(5966),o=r(6107),a=r(1795);const s=function(){function t(t,e,r){this.alreadyEmbedded=!1,(0,a.ku)(t,"ref",[[o.$F,"PDFRef"]]),(0,a.ku)(e,"doc",[[i.Z,"PDFDocument"]]),(0,a.ku)(r,"embedder",[[o.sm,"JpegEmbedder"],[o.Le,"PngEmbedder"]]),this.ref=t,this.doc=e,this.width=r.width,this.height=r.height,this.embedder=r}return t.prototype.scale=function(t){return(0,a.ku)(t,"factor",["number"]),{width:this.width*t,height:this.height*t}},t.prototype.scaleToFit=function(t,e){(0,a.ku)(t,"width",["number"]),(0,a.ku)(e,"height",["number"]);var r=t/this.width,n=e/this.height,i=Math.min(r,n);return this.scale(i)},t.prototype.size=function(){return this.scale(1)},t.prototype.embed=function(){return(0,n.mG)(this,void 0,void 0,(function(){return(0,n.Jh)(this,(function(t){switch(t.label){case 0:return this.alreadyEmbedded?[3,2]:[4,this.embedder.embedIntoContext(this.doc.context,this.ref)];case 1:t.sent(),this.alreadyEmbedded=!0,t.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}()},6789:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(7638),i=r(6107);const o=function(){function t(t,e,r){this.alreadyEmbedded=!1,this.ref=t,this.doc=e,this.embedder=r}return t.prototype.embed=function(){return(0,n.mG)(this,void 0,void 0,(function(){var t,e,r,o,a,s,u;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return this.alreadyEmbedded?[3,2]:(t=this.doc,e=t.catalog,r=t.context,[4,this.embedder.embedIntoContext(this.doc.context,this.ref)]);case 1:o=n.sent(),e.has(i.wQ.of("Names"))||e.set(i.wQ.of("Names"),r.obj({})),(a=e.lookup(i.wQ.of("Names"),i.mh)).has(i.wQ.of("JavaScript"))||a.set(i.wQ.of("JavaScript"),r.obj({})),(s=a.lookup(i.wQ.of("JavaScript"),i.mh)).has(i.wQ.of("Names"))||s.set(i.wQ.of("Names"),r.obj([])),(u=s.lookup(i.wQ.of("Names"),i.Gr)).push(i.Ij.fromText(this.embedder.scriptName)),u.push(o),this.alreadyEmbedded=!0,n.label=2;case 2:return[2]}}))}))},t.of=function(e,r,n){return new t(e,r,n)},t}()},4087:(t,e,r)=>{"use strict";r.d(e,{Z:()=>v});var n=r(7638),i=r(985),o=r(1806),a=r(486),s=r(5966),u=r(7366),c=r(6013),h=r(5941),l=r(7531),f=r(5733),d=r(5893),p=r(6107),g=r(1795);const v=function(){function t(t,e,r){this.fontSize=24,this.fontColor=(0,i.B8)(0,0,0),this.lineHeight=24,this.x=0,this.y=0,(0,g.ku)(t,"leafNode",[[p.Eg,"PDFPageLeaf"]]),(0,g.ku)(e,"ref",[[p.$F,"PDFRef"]]),(0,g.ku)(r,"doc",[[s.Z,"PDFDocument"]]),this.node=t,this.ref=e,this.doc=r}return t.prototype.setRotation=function(t){var e=(0,f.Ux)(t);(0,g.m_)(e,"degreesAngle",90),this.node.set(p.wQ.of("Rotate"),this.doc.context.obj(e))},t.prototype.getRotation=function(){var t=this.node.Rotate();return(0,f.RW)(t?t.asNumber():0)},t.prototype.setSize=function(t,e){(0,g.ku)(t,"width",["number"]),(0,g.ku)(e,"height",["number"]);var r=this.getMediaBox();this.setMediaBox(r.x,r.y,t,e);var n=this.getCropBox(),i=this.getBleedBox(),o=this.getTrimBox(),a=this.getArtBox(),s=this.node.CropBox(),u=this.node.BleedBox(),c=this.node.TrimBox(),h=this.node.ArtBox();s&&(0,g.EO)(n,r)&&this.setCropBox(r.x,r.y,t,e),u&&(0,g.EO)(i,r)&&this.setBleedBox(r.x,r.y,t,e),c&&(0,g.EO)(o,r)&&this.setTrimBox(r.x,r.y,t,e),h&&(0,g.EO)(a,r)&&this.setArtBox(r.x,r.y,t,e)},t.prototype.setWidth=function(t){(0,g.ku)(t,"width",["number"]),this.setSize(t,this.getSize().height)},t.prototype.setHeight=function(t){(0,g.ku)(t,"height",["number"]),this.setSize(this.getSize().width,t)},t.prototype.setMediaBox=function(t,e,r,n){(0,g.ku)(t,"x",["number"]),(0,g.ku)(e,"y",["number"]),(0,g.ku)(r,"width",["number"]),(0,g.ku)(n,"height",["number"]);var i=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(p.wQ.MediaBox,i)},t.prototype.setCropBox=function(t,e,r,n){(0,g.ku)(t,"x",["number"]),(0,g.ku)(e,"y",["number"]),(0,g.ku)(r,"width",["number"]),(0,g.ku)(n,"height",["number"]);var i=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(p.wQ.CropBox,i)},t.prototype.setBleedBox=function(t,e,r,n){(0,g.ku)(t,"x",["number"]),(0,g.ku)(e,"y",["number"]),(0,g.ku)(r,"width",["number"]),(0,g.ku)(n,"height",["number"]);var i=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(p.wQ.BleedBox,i)},t.prototype.setTrimBox=function(t,e,r,n){(0,g.ku)(t,"x",["number"]),(0,g.ku)(e,"y",["number"]),(0,g.ku)(r,"width",["number"]),(0,g.ku)(n,"height",["number"]);var i=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(p.wQ.TrimBox,i)},t.prototype.setArtBox=function(t,e,r,n){(0,g.ku)(t,"x",["number"]),(0,g.ku)(e,"y",["number"]),(0,g.ku)(r,"width",["number"]),(0,g.ku)(n,"height",["number"]);var i=this.doc.context.obj([t,e,t+r,e+n]);this.node.set(p.wQ.ArtBox,i)},t.prototype.getSize=function(){var t=this.getMediaBox();return{width:t.width,height:t.height}},t.prototype.getWidth=function(){return this.getSize().width},t.prototype.getHeight=function(){return this.getSize().height},t.prototype.getMediaBox=function(){return this.node.MediaBox().asRectangle()},t.prototype.getCropBox=function(){var t,e=this.node.CropBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getMediaBox()},t.prototype.getBleedBox=function(){var t,e=this.node.BleedBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getCropBox()},t.prototype.getTrimBox=function(){var t,e=this.node.TrimBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getCropBox()},t.prototype.getArtBox=function(){var t,e=this.node.ArtBox();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:this.getCropBox()},t.prototype.translateContent=function(t,e){(0,g.ku)(t,"x",["number"]),(0,g.ku)(e,"y",["number"]),this.node.normalize(),this.getContentStream();var r=this.createContentStream((0,a.bo)(),(0,a.Iu)(t,e)),n=this.doc.context.register(r),i=this.createContentStream((0,a.Pq)()),o=this.doc.context.register(i);this.node.wrapContentStreams(n,o)},t.prototype.resetPosition=function(){this.getContentStream(!1),this.x=0,this.y=0},t.prototype.setFont=function(t){(0,g.ku)(t,"font",[[c.Z,"PDFFont"]]),this.font=t,this.fontKey=(0,g.si)(this.font.name),this.node.setFontDictionary(p.wQ.of(this.fontKey),this.font.ref)},t.prototype.setFontSize=function(t){(0,g.ku)(t,"fontSize",["number"]),this.fontSize=t},t.prototype.setFontColor=function(t){(0,g.ku)(t,"fontColor",[[Object,"Color"]]),this.fontColor=t},t.prototype.setLineHeight=function(t){(0,g.ku)(t,"lineHeight",["number"]),this.lineHeight=t},t.prototype.getPosition=function(){return{x:this.x,y:this.y}},t.prototype.getX=function(){return this.x},t.prototype.getY=function(){return this.y},t.prototype.moveTo=function(t,e){(0,g.ku)(t,"x",["number"]),(0,g.ku)(e,"y",["number"]),this.x=t,this.y=e},t.prototype.moveDown=function(t){(0,g.ku)(t,"yDecrease",["number"]),this.y-=t},t.prototype.moveUp=function(t){(0,g.ku)(t,"yIncrease",["number"]),this.y+=t},t.prototype.moveLeft=function(t){(0,g.ku)(t,"xDecrease",["number"]),this.x-=t},t.prototype.moveRight=function(t){(0,g.ku)(t,"xIncrease",["number"]),this.x+=t},t.prototype.pushOperators=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];(0,g.pO)(t,"operator",[[p.sI,"PDFOperator"]]);var r=this.getContentStream();r.push.apply(r,t)},t.prototype.drawText=function(t,e){var r,n,i,a,s,u,h;void 0===e&&(e={}),(0,g.ku)(t,"text",["string"]),(0,g.MU)(e.color,"options.color",[[Object,"Color"]]),(0,g.zo)(e.opacity,"opacity.opacity",0,1),(0,g.MU)(e.font,"options.font",[[c.Z,"PDFFont"]]),(0,g.MU)(e.size,"options.size",["number"]),(0,g.MU)(e.rotate,"options.rotate",[[Object,"Rotation"]]),(0,g.MU)(e.xSkew,"options.xSkew",[[Object,"Rotation"]]),(0,g.MU)(e.ySkew,"options.ySkew",[[Object,"Rotation"]]),(0,g.MU)(e.x,"options.x",["number"]),(0,g.MU)(e.y,"options.y",["number"]),(0,g.MU)(e.lineHeight,"options.lineHeight",["number"]),(0,g.MU)(e.maxWidth,"options.maxWidth",["number"]),(0,g.MU)(e.wordBreaks,"options.wordBreaks",[Array]),(0,g.GT)(e.blendMode,"options.blendMode",l.b);var d=this.getFont()[0];e.font&&this.setFont(e.font);for(var p=this.getFont(),v=p[0],m=p[1],y=e.size||this.fontSize,b=e.wordBreaks||this.doc.defaultWordBreaks,w=void 0===e.maxWidth?(0,g.f7)((0,g.FV)(t)):(0,g.KU)(t,b,e.maxWidth,(function(t){return v.widthOfTextAtSize(t,y)})),k=new Array(w.length),x=0,Z=w.length;x<Z;x++)k[x]=v.encodeText(w[x]);var S=this.maybeEmbedGraphicsState({opacity:e.opacity,blendMode:e.blendMode}),C=this.getContentStream();C.push.apply(C,(0,o.kw)(k,{color:null!==(r=e.color)&&void 0!==r?r:this.fontColor,font:m,size:y,rotate:null!==(n=e.rotate)&&void 0!==n?n:(0,f.RW)(0),xSkew:null!==(i=e.xSkew)&&void 0!==i?i:(0,f.RW)(0),ySkew:null!==(a=e.ySkew)&&void 0!==a?a:(0,f.RW)(0),x:null!==(s=e.x)&&void 0!==s?s:this.x,y:null!==(u=e.y)&&void 0!==u?u:this.y,lineHeight:null!==(h=e.lineHeight)&&void 0!==h?h:this.lineHeight,graphicsState:S})),e.font&&this.setFont(d)},t.prototype.drawImage=function(t,e){var r,n,i,a,s,u,c;void 0===e&&(e={}),(0,g.ku)(t,"image",[[h.Z,"PDFImage"]]),(0,g.MU)(e.x,"options.x",["number"]),(0,g.MU)(e.y,"options.y",["number"]),(0,g.MU)(e.width,"options.width",["number"]),(0,g.MU)(e.height,"options.height",["number"]),(0,g.MU)(e.rotate,"options.rotate",[[Object,"Rotation"]]),(0,g.MU)(e.xSkew,"options.xSkew",[[Object,"Rotation"]]),(0,g.MU)(e.ySkew,"options.ySkew",[[Object,"Rotation"]]),(0,g.zo)(e.opacity,"opacity.opacity",0,1),(0,g.GT)(e.blendMode,"options.blendMode",l.b);var d=(0,g.si)("Image",10);this.node.setXObject(p.wQ.of(d),t.ref);var v=this.maybeEmbedGraphicsState({opacity:e.opacity,blendMode:e.blendMode}),m=this.getContentStream();m.push.apply(m,(0,o.AE)(d,{x:null!==(r=e.x)&&void 0!==r?r:this.x,y:null!==(n=e.y)&&void 0!==n?n:this.y,width:null!==(i=e.width)&&void 0!==i?i:t.size().width,height:null!==(a=e.height)&&void 0!==a?a:t.size().height,rotate:null!==(s=e.rotate)&&void 0!==s?s:(0,f.RW)(0),xSkew:null!==(u=e.xSkew)&&void 0!==u?u:(0,f.RW)(0),ySkew:null!==(c=e.ySkew)&&void 0!==c?c:(0,f.RW)(0),graphicsState:v}))},t.prototype.drawPage=function(t,e){var r,n,i,a,s;void 0===e&&(e={}),(0,g.ku)(t,"embeddedPage",[[u.Z,"PDFEmbeddedPage"]]),(0,g.MU)(e.x,"options.x",["number"]),(0,g.MU)(e.y,"options.y",["number"]),(0,g.MU)(e.xScale,"options.xScale",["number"]),(0,g.MU)(e.yScale,"options.yScale",["number"]),(0,g.MU)(e.width,"options.width",["number"]),(0,g.MU)(e.height,"options.height",["number"]),(0,g.MU)(e.rotate,"options.rotate",[[Object,"Rotation"]]),(0,g.MU)(e.xSkew,"options.xSkew",[[Object,"Rotation"]]),(0,g.MU)(e.ySkew,"options.ySkew",[[Object,"Rotation"]]),(0,g.zo)(e.opacity,"opacity.opacity",0,1),(0,g.GT)(e.blendMode,"options.blendMode",l.b);var c=(0,g.si)("EmbeddedPdfPage",10);this.node.setXObject(p.wQ.of(c),t.ref);var h=this.maybeEmbedGraphicsState({opacity:e.opacity,blendMode:e.blendMode}),d=void 0!==e.width?e.width/t.width:void 0!==e.xScale?e.xScale:1,v=void 0!==e.height?e.height/t.height:void 0!==e.yScale?e.yScale:1,m=this.getContentStream();m.push.apply(m,(0,o.sS)(c,{x:null!==(r=e.x)&&void 0!==r?r:this.x,y:null!==(n=e.y)&&void 0!==n?n:this.y,xScale:d,yScale:v,rotate:null!==(i=e.rotate)&&void 0!==i?i:(0,f.RW)(0),xSkew:null!==(a=e.xSkew)&&void 0!==a?a:(0,f.RW)(0),ySkew:null!==(s=e.ySkew)&&void 0!==s?s:(0,f.RW)(0),graphicsState:h}))},t.prototype.drawSvgPath=function(t,e){var r,n,s,u,c,h,d,p,v;void 0===e&&(e={}),(0,g.ku)(t,"path",["string"]),(0,g.MU)(e.x,"options.x",["number"]),(0,g.MU)(e.y,"options.y",["number"]),(0,g.MU)(e.scale,"options.scale",["number"]),(0,g.MU)(e.rotate,"options.rotate",[[Object,"Rotation"]]),(0,g.MU)(e.borderWidth,"options.borderWidth",["number"]),(0,g.MU)(e.color,"options.color",[[Object,"Color"]]),(0,g.zo)(e.opacity,"opacity.opacity",0,1),(0,g.MU)(e.borderColor,"options.borderColor",[[Object,"Color"]]),(0,g.MU)(e.borderDashArray,"options.borderDashArray",[Array]),(0,g.MU)(e.borderDashPhase,"options.borderDashPhase",["number"]),(0,g.GT)(e.borderLineCap,"options.borderLineCap",a.kP),(0,g.zo)(e.borderOpacity,"options.borderOpacity",0,1),(0,g.GT)(e.blendMode,"options.blendMode",l.b);var m=this.maybeEmbedGraphicsState({opacity:e.opacity,borderOpacity:e.borderOpacity,blendMode:e.blendMode});"color"in e||"borderColor"in e||(e.borderColor=(0,i.B8)(0,0,0));var y=this.getContentStream();y.push.apply(y,(0,o.os)(t,{x:null!==(r=e.x)&&void 0!==r?r:this.x,y:null!==(n=e.y)&&void 0!==n?n:this.y,scale:e.scale,rotate:null!==(s=e.rotate)&&void 0!==s?s:(0,f.RW)(0),color:null!==(u=e.color)&&void 0!==u?u:void 0,borderColor:null!==(c=e.borderColor)&&void 0!==c?c:void 0,borderWidth:null!==(h=e.borderWidth)&&void 0!==h?h:0,borderDashArray:null!==(d=e.borderDashArray)&&void 0!==d?d:void 0,borderDashPhase:null!==(p=e.borderDashPhase)&&void 0!==p?p:void 0,borderLineCap:null!==(v=e.borderLineCap)&&void 0!==v?v:void 0,graphicsState:m}))},t.prototype.drawLine=function(t){var e,r,n,s,u;(0,g.ku)(t.start,"options.start",[[Object,"{ x: number, y: number }"]]),(0,g.ku)(t.end,"options.end",[[Object,"{ x: number, y: number }"]]),(0,g.ku)(t.start.x,"options.start.x",["number"]),(0,g.ku)(t.start.y,"options.start.y",["number"]),(0,g.ku)(t.end.x,"options.end.x",["number"]),(0,g.ku)(t.end.y,"options.end.y",["number"]),(0,g.MU)(t.thickness,"options.thickness",["number"]),(0,g.MU)(t.color,"options.color",[[Object,"Color"]]),(0,g.MU)(t.dashArray,"options.dashArray",[Array]),(0,g.MU)(t.dashPhase,"options.dashPhase",["number"]),(0,g.GT)(t.lineCap,"options.lineCap",a.kP),(0,g.zo)(t.opacity,"opacity.opacity",0,1),(0,g.GT)(t.blendMode,"options.blendMode",l.b);var c=this.maybeEmbedGraphicsState({borderOpacity:t.opacity,blendMode:t.blendMode});"color"in t||(t.color=(0,i.B8)(0,0,0));var h=this.getContentStream();h.push.apply(h,(0,o.pS)({start:t.start,end:t.end,thickness:null!==(e=t.thickness)&&void 0!==e?e:1,color:null!==(r=t.color)&&void 0!==r?r:void 0,dashArray:null!==(n=t.dashArray)&&void 0!==n?n:void 0,dashPhase:null!==(s=t.dashPhase)&&void 0!==s?s:void 0,lineCap:null!==(u=t.lineCap)&&void 0!==u?u:void 0,graphicsState:c}))},t.prototype.drawRectangle=function(t){var e,r,n,s,u,c,h,d,p,v,m,y,b;void 0===t&&(t={}),(0,g.MU)(t.x,"options.x",["number"]),(0,g.MU)(t.y,"options.y",["number"]),(0,g.MU)(t.width,"options.width",["number"]),(0,g.MU)(t.height,"options.height",["number"]),(0,g.MU)(t.rotate,"options.rotate",[[Object,"Rotation"]]),(0,g.MU)(t.xSkew,"options.xSkew",[[Object,"Rotation"]]),(0,g.MU)(t.ySkew,"options.ySkew",[[Object,"Rotation"]]),(0,g.MU)(t.borderWidth,"options.borderWidth",["number"]),(0,g.MU)(t.color,"options.color",[[Object,"Color"]]),(0,g.zo)(t.opacity,"opacity.opacity",0,1),(0,g.MU)(t.borderColor,"options.borderColor",[[Object,"Color"]]),(0,g.MU)(t.borderDashArray,"options.borderDashArray",[Array]),(0,g.MU)(t.borderDashPhase,"options.borderDashPhase",["number"]),(0,g.GT)(t.borderLineCap,"options.borderLineCap",a.kP),(0,g.zo)(t.borderOpacity,"options.borderOpacity",0,1),(0,g.GT)(t.blendMode,"options.blendMode",l.b);var w=this.maybeEmbedGraphicsState({opacity:t.opacity,borderOpacity:t.borderOpacity,blendMode:t.blendMode});"color"in t||"borderColor"in t||(t.color=(0,i.B8)(0,0,0));var k=this.getContentStream();k.push.apply(k,(0,o.JG)({x:null!==(e=t.x)&&void 0!==e?e:this.x,y:null!==(r=t.y)&&void 0!==r?r:this.y,width:null!==(n=t.width)&&void 0!==n?n:150,height:null!==(s=t.height)&&void 0!==s?s:100,rotate:null!==(u=t.rotate)&&void 0!==u?u:(0,f.RW)(0),xSkew:null!==(c=t.xSkew)&&void 0!==c?c:(0,f.RW)(0),ySkew:null!==(h=t.ySkew)&&void 0!==h?h:(0,f.RW)(0),borderWidth:null!==(d=t.borderWidth)&&void 0!==d?d:0,color:null!==(p=t.color)&&void 0!==p?p:void 0,borderColor:null!==(v=t.borderColor)&&void 0!==v?v:void 0,borderDashArray:null!==(m=t.borderDashArray)&&void 0!==m?m:void 0,borderDashPhase:null!==(y=t.borderDashPhase)&&void 0!==y?y:void 0,graphicsState:w,borderLineCap:null!==(b=t.borderLineCap)&&void 0!==b?b:void 0}))},t.prototype.drawSquare=function(t){void 0===t&&(t={});var e=t.size;(0,g.MU)(e,"size",["number"]),this.drawRectangle((0,n.pi)((0,n.pi)({},t),{width:e,height:e}))},t.prototype.drawEllipse=function(t){var e,r,n,s,u,c,h,f,d,p,v;void 0===t&&(t={}),(0,g.MU)(t.x,"options.x",["number"]),(0,g.MU)(t.y,"options.y",["number"]),(0,g.MU)(t.xScale,"options.xScale",["number"]),(0,g.MU)(t.yScale,"options.yScale",["number"]),(0,g.MU)(t.rotate,"options.rotate",[[Object,"Rotation"]]),(0,g.MU)(t.color,"options.color",[[Object,"Color"]]),(0,g.zo)(t.opacity,"opacity.opacity",0,1),(0,g.MU)(t.borderColor,"options.borderColor",[[Object,"Color"]]),(0,g.zo)(t.borderOpacity,"options.borderOpacity",0,1),(0,g.MU)(t.borderWidth,"options.borderWidth",["number"]),(0,g.MU)(t.borderDashArray,"options.borderDashArray",[Array]),(0,g.MU)(t.borderDashPhase,"options.borderDashPhase",["number"]),(0,g.GT)(t.borderLineCap,"options.borderLineCap",a.kP),(0,g.GT)(t.blendMode,"options.blendMode",l.b);var m=this.maybeEmbedGraphicsState({opacity:t.opacity,borderOpacity:t.borderOpacity,blendMode:t.blendMode});"color"in t||"borderColor"in t||(t.color=(0,i.B8)(0,0,0));var y=this.getContentStream();y.push.apply(y,(0,o.xL)({x:null!==(e=t.x)&&void 0!==e?e:this.x,y:null!==(r=t.y)&&void 0!==r?r:this.y,xScale:null!==(n=t.xScale)&&void 0!==n?n:100,yScale:null!==(s=t.yScale)&&void 0!==s?s:100,rotate:null!==(u=t.rotate)&&void 0!==u?u:void 0,color:null!==(c=t.color)&&void 0!==c?c:void 0,borderColor:null!==(h=t.borderColor)&&void 0!==h?h:void 0,borderWidth:null!==(f=t.borderWidth)&&void 0!==f?f:0,borderDashArray:null!==(d=t.borderDashArray)&&void 0!==d?d:void 0,borderDashPhase:null!==(p=t.borderDashPhase)&&void 0!==p?p:void 0,borderLineCap:null!==(v=t.borderLineCap)&&void 0!==v?v:void 0,graphicsState:m}))},t.prototype.drawCircle=function(t){void 0===t&&(t={});var e=t.size,r=void 0===e?100:e;(0,g.MU)(r,"size",["number"]),this.drawEllipse((0,n.pi)((0,n.pi)({},t),{xScale:r,yScale:r}))},t.prototype.getFont=function(){if(!this.font||!this.fontKey){var t=this.doc.embedStandardFont(d.E.Helvetica);this.setFont(t)}return[this.font,this.fontKey]},t.prototype.getContentStream=function(t){return void 0===t&&(t=!0),t&&this.contentStream||(this.contentStream=this.createContentStream(),this.contentStreamRef=this.doc.context.register(this.contentStream),this.node.addContentStream(this.contentStreamRef)),this.contentStream},t.prototype.createContentStream=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=this.doc.context.obj({}),n=p.kK.of(r,t);return n},t.prototype.maybeEmbedGraphicsState=function(t){var e=t.opacity,r=t.borderOpacity,n=t.blendMode;if(void 0!==e||void 0!==r||void 0!==n){var i=(0,g.si)("GS",10),o=this.doc.context.obj({Type:"ExtGState",ca:e,CA:r,BM:n});return this.node.setExtGState(p.wQ.of(i),o),i}},t.of=function(e,r,n){return new t(e,r,n)},t.create=function(e){(0,g.ku)(e,"doc",[[s.Z,"PDFDocument"]]);var r=p.$F.of(-1),n=p.Eg.withContextAndParent(e.context,r);return new t(n,e.context.register(n),e)},t}()},7531:(t,e,r)=>{"use strict";var n;r.d(e,{b:()=>n}),function(t){t.Normal="Normal",t.Multiply="Multiply",t.Screen="Screen",t.Overlay="Overlay",t.Darken="Darken",t.Lighten="Lighten",t.ColorDodge="ColorDodge",t.ColorBurn="ColorBurn",t.HardLight="HardLight",t.SoftLight="SoftLight",t.Difference="Difference",t.Exclusion="Exclusion"}(n||(n={}))},5893:(t,e,r)=>{"use strict";var n;r.d(e,{E:()=>n}),function(t){t.Courier="Courier",t.CourierBold="Courier-Bold",t.CourierOblique="Courier-Oblique",t.CourierBoldOblique="Courier-BoldOblique",t.Helvetica="Helvetica",t.HelveticaBold="Helvetica-Bold",t.HelveticaOblique="Helvetica-Oblique",t.HelveticaBoldOblique="Helvetica-BoldOblique",t.TimesRoman="Times-Roman",t.TimesRomanBold="Times-Bold",t.TimesRomanItalic="Times-Italic",t.TimesRomanBoldItalic="Times-BoldItalic",t.Symbol="Symbol",t.ZapfDingbats="ZapfDingbats"}(n||(n={}))},985:(t,e,r)=>{"use strict";r.d(e,{se:()=>a,B8:()=>s,Qn:()=>u,l6:()=>f,yb:()=>d,p4:()=>p,wG:()=>g});var n,i=r(486),o=r(1795);!function(t){t.Grayscale="Grayscale",t.RGB="RGB",t.CMYK="CMYK"}(n||(n={}));var a=function(t){return(0,o.gI)(t,"gray",0,1),{type:n.Grayscale,gray:t}},s=function(t,e,r){return(0,o.gI)(t,"red",0,1),(0,o.gI)(e,"green",0,1),(0,o.gI)(r,"blue",0,1),{type:n.RGB,red:t,green:e,blue:r}},u=function(t,e,r,i){return(0,o.gI)(t,"cyan",0,1),(0,o.gI)(e,"magenta",0,1),(0,o.gI)(r,"yellow",0,1),(0,o.gI)(i,"key",0,1),{type:n.CMYK,cyan:t,magenta:e,yellow:r,key:i}},c=n.Grayscale,h=n.RGB,l=n.CMYK,f=function(t){return t.type===c?(0,i.GR)(t.gray):t.type===h?(0,i.mE)(t.red,t.green,t.blue):t.type===l?(0,i.O8)(t.cyan,t.magenta,t.yellow,t.key):(0,o.vU)("Invalid color: "+JSON.stringify(t))},d=function(t){return t.type===c?(0,i.dA)(t.gray):t.type===h?(0,i.XS)(t.red,t.green,t.blue):t.type===l?(0,i.sp)(t.cyan,t.magenta,t.yellow,t.key):(0,o.vU)("Invalid color: "+JSON.stringify(t))},p=function(t,e){return void 0===e&&(e=1),1===(null==t?void 0:t.length)?a(t[0]*e):3===(null==t?void 0:t.length)?s(t[0]*e,t[1]*e,t[2]*e):4===(null==t?void 0:t.length)?u(t[0]*e,t[1]*e,t[2]*e,t[3]*e):void 0},g=function(t){return t.type===c?[t.gray]:t.type===h?[t.red,t.green,t.blue]:t.type===l?[t.cyan,t.magenta,t.yellow,t.key]:(0,o.vU)("Invalid color: "+JSON.stringify(t))}},4755:(t,e,r)=>{"use strict";r.d(e,{ip:()=>o,I3:()=>a,Nl:()=>s,jw:()=>u,wx:()=>c,VV:()=>h,MY:()=>l,Ic:()=>f,E9:()=>d,ll:()=>p,uo:()=>g,_D:()=>v});var n,i=r(7638),o=function(t){function e(){return t.call(this,"Input document to `PDFDocument.load` is encrypted. You can use `PDFDocument.load(..., { ignoreEncryption: true })` if you wish to load the document anyways.")||this}return(0,i.ZT)(e,t),e}(Error),a=function(t){function e(){return t.call(this,"Input to `PDFDocument.embedFont` was a custom font, but no `fontkit` instance was found. You must register a `fontkit` instance with `PDFDocument.registerFontkit(...)` before embedding custom fonts.")||this}return(0,i.ZT)(e,t),e}(Error),s=function(t){function e(){return t.call(this,"A `page` passed to `PDFDocument.addPage` or `PDFDocument.insertPage` was from a different (foreign) PDF document. If you want to copy pages from one PDFDocument to another, you must use `PDFDocument.copyPages(...)` to copy the pages before adding or inserting them.")||this}return(0,i.ZT)(e,t),e}(Error),u=function(t){function e(){return t.call(this,"PDFDocument has no pages so `PDFDocument.removePage` cannot be called")||this}return(0,i.ZT)(e,t),e}(Error),c=function(t){function e(e){var r='PDFDocument has no form field with the name "'+e+'"';return t.call(this,r)||this}return(0,i.ZT)(e,t),e}(Error),h=function(t){function e(e,r,n){var i,o,a='Expected field "'+e+'" to be of type '+(null==r?void 0:r.name)+", but it is actually of type "+(null!==(o=null===(i=null==n?void 0:n.constructor)||void 0===i?void 0:i.name)&&void 0!==o?o:n);return t.call(this,a)||this}return(0,i.ZT)(e,t),e}(Error),l=(n=Error,(0,i.ZT)((function(t){var e='Failed to select check box due to missing onValue: "'+t+'"';return n.call(this,e)||this}),n),function(t){function e(e){var r='A field already exists with the specified name: "'+e+'"';return t.call(this,r)||this}return(0,i.ZT)(e,t),e}(Error)),f=function(t){function e(e){var r='Field name contains invalid component: "'+e+'"';return t.call(this,r)||this}return(0,i.ZT)(e,t),e}(Error),d=(function(t){(0,i.ZT)((function(e){var r='A non-terminal field already exists with the specified name: "'+e+'"';return t.call(this,r)||this}),t)}(Error),function(t){function e(e){var r="Reading rich text fields is not supported: Attempted to read rich text field: "+e;return t.call(this,r)||this}return(0,i.ZT)(e,t),e}(Error)),p=function(t){function e(e,r){var n="Failed to layout combed text as lineLength="+e+" is greater than cellCount="+r;return t.call(this,n)||this}return(0,i.ZT)(e,t),e}(Error),g=function(t){function e(e,r,n){var i="Attempted to set text with length="+e+" for TextField with maxLength="+r+" and name="+n;return t.call(this,i)||this}return(0,i.ZT)(e,t),e}(Error),v=function(t){function e(e,r,n){var i="Attempted to set maxLength="+r+", which is less than "+e+", the length of this field's current value (name="+n+")";return t.call(this,i)||this}return(0,i.ZT)(e,t),e}(Error)},7685:(t,e,r)=>{"use strict";r.d(e,{Z:()=>d});var n=r(7638),i=r(4087),o=r(6013),a=r(1828),s=r(8163),u=r(3358),c=r(985),h=r(5733),l=r(6107),f=r(1795);const d=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return(0,f.ku)(e,"acroButton",[[l._,"PDFAcroPushButton"]]),i.acroField=e,i}return(0,n.ZT)(e,t),e.prototype.setImage=function(t,e){void 0===e&&(e=a.C.Center);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var o=r[n],s=this.createImageAppearanceStream(o,t,e);this.updateWidgetAppearances(o,{normal:s})}this.markAsClean()},e.prototype.setFontSize=function(t){(0,f.z7)(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.addToPage=function(t,e,r){var n,o,a,s,l,d,p,g,v,m,y;(0,f.MU)(t,"text",["string"]),(0,f.MU)(e,"page",[[i.Z,"PDFPage"]]),(0,u.b)(r);var b=this.createWidget({x:(null!==(n=null==r?void 0:r.x)&&void 0!==n?n:0)-(null!==(o=null==r?void 0:r.borderWidth)&&void 0!==o?o:0)/2,y:(null!==(a=null==r?void 0:r.y)&&void 0!==a?a:0)-(null!==(s=null==r?void 0:r.borderWidth)&&void 0!==s?s:0)/2,width:null!==(l=null==r?void 0:r.width)&&void 0!==l?l:100,height:null!==(d=null==r?void 0:r.height)&&void 0!==d?d:50,textColor:null!==(p=null==r?void 0:r.textColor)&&void 0!==p?p:(0,c.B8)(0,0,0),backgroundColor:null!==(g=null==r?void 0:r.backgroundColor)&&void 0!==g?g:(0,c.B8)(.75,.75,.75),borderColor:null==r?void 0:r.borderColor,borderWidth:null!==(v=null==r?void 0:r.borderWidth)&&void 0!==v?v:0,rotate:null!==(m=null==r?void 0:r.rotate)&&void 0!==m?m:(0,h.RW)(0),caption:t,hidden:null==r?void 0:r.hidden}),w=this.doc.context.register(b.dict);this.acroField.addWidget(w);var k=null!==(y=null==r?void 0:r.font)&&void 0!==y?y:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(b,k),e.node.addAnnot(w)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof l.kO))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){(0,f.ku)(t,"font",[[o.Z,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){(0,f.ku)(t,"font",[[o.Z,"PDFFont"]]),(0,f.MU)(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var a=r[n];this.updateWidgetAppearance(a,t,e)}},e.prototype.updateWidgetAppearance=function(t,e,r){var n=null!=r?r:s.DS,i=(0,s.TE)(n(this,t,e));this.updateWidgetAppearanceWithFont(t,e,i)},e.of=function(t,r,n){return new e(t,r,n)},e}(u.Z)},4313:(t,e,r)=>{"use strict";r.d(e,{Z:()=>l});var n=r(7638),i=r(4087),o=r(8163),a=r(985),s=r(5733),u=r(3358),c=r(6107),h=r(1795);const l=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return(0,h.ku)(e,"acroCheckBox",[[c.Ei,"PDFAcroCheckBox"]]),i.acroField=e,i}return(0,n.ZT)(e,t),e.prototype.check=function(){var t,e=null!==(t=this.acroField.getOnValue())&&void 0!==t?t:c.wQ.of("Yes");this.markAsDirty(),this.acroField.setValue(e)},e.prototype.uncheck=function(){this.markAsDirty(),this.acroField.setValue(c.wQ.of("Off"))},e.prototype.isChecked=function(){var t=this.acroField.getOnValue();return!!t&&t===this.acroField.getValue()},e.prototype.addToPage=function(t,e){var r,n,o,l,f,d;(0,h.ku)(t,"page",[[i.Z,"PDFPage"]]),(0,u.b)(e),e||(e={}),"textColor"in e||(e.textColor=(0,a.B8)(0,0,0)),"backgroundColor"in e||(e.backgroundColor=(0,a.B8)(1,1,1)),"borderColor"in e||(e.borderColor=(0,a.B8)(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var p=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(o=e.width)&&void 0!==o?o:50,height:null!==(l=e.height)&&void 0!==l?l:50,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(f=e.borderWidth)&&void 0!==f?f:0,rotate:null!==(d=e.rotate)&&void 0!==d?d:(0,s.RW)(0),hidden:e.hidden}),g=this.doc.context.register(p.dict);this.acroField.addWidget(g),p.setAppearanceState(c.wQ.of("Off")),this.updateWidgetAppearance(p,c.wQ.of("Yes")),t.node.addAnnot(g)},e.prototype.needsAppearancesUpdate=function(){for(var t,e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++){var i=e[r],o=i.getAppearanceState(),a=null===(t=i.getAppearances())||void 0===t?void 0:t.normal;if(!(a instanceof c.mh))return!0;if(o&&!a.has(o))return!0}return!1},e.prototype.defaultUpdateAppearances=function(){this.updateAppearances()},e.prototype.updateAppearances=function(t){var e;(0,h.MU)(t,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var o=r[n],a=null!==(e=o.getOnValue())&&void 0!==e?e:c.wQ.of("Yes");a&&this.updateWidgetAppearance(o,a,t)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=null!=r?r:o.S8,i=(0,o.TE)(n(this,t));this.updateOnOffWidgetAppearance(t,e,i)},e.of=function(t,r,n){return new e(t,r,n)},e}(u.Z)},4671:(t,e,r)=>{"use strict";r.d(e,{Z:()=>f});var n=r(7638),i=r(4087),o=r(6013),a=r(3358),s=r(8163),u=r(985),c=r(5733),h=r(6107),l=r(1795);const f=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return(0,l.ku)(e,"acroComboBox",[[h.sS,"PDFAcroComboBox"]]),i.acroField=e,i}return(0,n.ZT)(e,t),e.prototype.getOptions=function(){for(var t=this.acroField.getOptions(),e=new Array(t.length),r=0,n=e.length;r<n;r++){var i=t[r],o=i.display,a=i.value;e[r]=(null!=o?o:a).decodeText()}return e},e.prototype.getSelected=function(){for(var t=this.acroField.getValues(),e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=t[r].decodeText();return e},e.prototype.setOptions=function(t){(0,l.ku)(t,"options",[Array]);for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]={value:h.Ij.fromText(t[r])};this.acroField.setOptions(e)},e.prototype.addOptions=function(t){(0,l.ku)(t,"options",["string",Array]);for(var e=Array.isArray(t)?t:[t],r=this.acroField.getOptions(),n=new Array(e.length),i=0,o=e.length;i<o;i++)n[i]={value:h.Ij.fromText(e[i])};this.acroField.setOptions(r.concat(n))},e.prototype.select=function(t,e){void 0===e&&(e=!1),(0,l.ku)(t,"options",["string",Array]),(0,l.ku)(e,"merge",["boolean"]);var r=Array.isArray(t)?t:[t],n=this.getOptions();r.find((function(t){return!n.includes(t)}))&&this.enableEditing(),this.markAsDirty(),(r.length>1||1===r.length&&e)&&this.enableMultiselect();for(var i=new Array(r.length),o=0,a=r.length;o<a;o++)i[o]=h.Ij.fromText(r[o]);if(e){var s=this.acroField.getValues();this.acroField.setValues(s.concat(i))}else this.acroField.setValues(i)},e.prototype.clear=function(){this.markAsDirty(),this.acroField.setValues([])},e.prototype.setFontSize=function(t){(0,l.z7)(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.isEditable=function(){return this.acroField.hasFlag(h.m0.Edit)},e.prototype.enableEditing=function(){this.acroField.setFlagTo(h.m0.Edit,!0)},e.prototype.disableEditing=function(){this.acroField.setFlagTo(h.m0.Edit,!1)},e.prototype.isSorted=function(){return this.acroField.hasFlag(h.m0.Sort)},e.prototype.enableSorting=function(){this.acroField.setFlagTo(h.m0.Sort,!0)},e.prototype.disableSorting=function(){this.acroField.setFlagTo(h.m0.Sort,!1)},e.prototype.isMultiselect=function(){return this.acroField.hasFlag(h.m0.MultiSelect)},e.prototype.enableMultiselect=function(){this.acroField.setFlagTo(h.m0.MultiSelect,!0)},e.prototype.disableMultiselect=function(){this.acroField.setFlagTo(h.m0.MultiSelect,!1)},e.prototype.isSpellChecked=function(){return!this.acroField.hasFlag(h.m0.DoNotSpellCheck)},e.prototype.enableSpellChecking=function(){this.acroField.setFlagTo(h.m0.DoNotSpellCheck,!1)},e.prototype.disableSpellChecking=function(){this.acroField.setFlagTo(h.m0.DoNotSpellCheck,!0)},e.prototype.isSelectOnClick=function(){return this.acroField.hasFlag(h.m0.CommitOnSelChange)},e.prototype.enableSelectOnClick=function(){this.acroField.setFlagTo(h.m0.CommitOnSelChange,!0)},e.prototype.disableSelectOnClick=function(){this.acroField.setFlagTo(h.m0.CommitOnSelChange,!1)},e.prototype.addToPage=function(t,e){var r,n,o,s,h,f,d;(0,l.ku)(t,"page",[[i.Z,"PDFPage"]]),(0,a.b)(e),e||(e={}),"textColor"in e||(e.textColor=(0,u.B8)(0,0,0)),"backgroundColor"in e||(e.backgroundColor=(0,u.B8)(1,1,1)),"borderColor"in e||(e.borderColor=(0,u.B8)(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var p=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(o=e.width)&&void 0!==o?o:200,height:null!==(s=e.height)&&void 0!==s?s:50,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(h=e.borderWidth)&&void 0!==h?h:0,rotate:null!==(f=e.rotate)&&void 0!==f?f:(0,c.RW)(0),hidden:e.hidden}),g=this.doc.context.register(p.dict);this.acroField.addWidget(g);var v=null!==(d=e.font)&&void 0!==d?d:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(p,v),t.node.addAnnot(g)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof h.kO))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){(0,l.ku)(t,"font",[[o.Z,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){(0,l.ku)(t,"font",[[o.Z,"PDFFont"]]),(0,l.MU)(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var a=r[n];this.updateWidgetAppearance(a,t,e)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=null!=r?r:s.oX,i=(0,s.TE)(n(this,t,e));this.updateWidgetAppearanceWithFont(t,e,i)},e.of=function(t,r,n){return new e(t,r,n)},e}(a.Z)},3358:(t,e,r)=>{"use strict";r.d(e,{b:()=>l,Z:()=>f});var n=r(7638),i=r(5966),o=r(985),a=r(5733),s=r(6107),u=r(1795),c=r(400),h=r(1806),l=function(t){(0,u.MU)(null==t?void 0:t.x,"options.x",["number"]),(0,u.MU)(null==t?void 0:t.y,"options.y",["number"]),(0,u.MU)(null==t?void 0:t.width,"options.width",["number"]),(0,u.MU)(null==t?void 0:t.height,"options.height",["number"]),(0,u.MU)(null==t?void 0:t.textColor,"options.textColor",[[Object,"Color"]]),(0,u.MU)(null==t?void 0:t.backgroundColor,"options.backgroundColor",[[Object,"Color"]]),(0,u.MU)(null==t?void 0:t.borderColor,"options.borderColor",[[Object,"Color"]]),(0,u.MU)(null==t?void 0:t.borderWidth,"options.borderWidth",["number"]),(0,u.MU)(null==t?void 0:t.rotate,"options.rotate",[[Object,"Rotation"]])};const f=function(){function t(t,e,r){(0,u.ku)(t,"acroField",[[s.Fs,"PDFAcroTerminal"]]),(0,u.ku)(e,"ref",[[s.$F,"PDFRef"]]),(0,u.ku)(r,"doc",[[i.Z,"PDFDocument"]]),this.acroField=t,this.ref=e,this.doc=r}return t.prototype.getName=function(){var t;return null!==(t=this.acroField.getFullyQualifiedName())&&void 0!==t?t:""},t.prototype.isReadOnly=function(){return this.acroField.hasFlag(s.PV.ReadOnly)},t.prototype.enableReadOnly=function(){this.acroField.setFlagTo(s.PV.ReadOnly,!0)},t.prototype.disableReadOnly=function(){this.acroField.setFlagTo(s.PV.ReadOnly,!1)},t.prototype.isRequired=function(){return this.acroField.hasFlag(s.PV.Required)},t.prototype.enableRequired=function(){this.acroField.setFlagTo(s.PV.Required,!0)},t.prototype.disableRequired=function(){this.acroField.setFlagTo(s.PV.Required,!1)},t.prototype.isExported=function(){return!this.acroField.hasFlag(s.PV.NoExport)},t.prototype.enableExporting=function(){this.acroField.setFlagTo(s.PV.NoExport,!1)},t.prototype.disableExporting=function(){this.acroField.setFlagTo(s.PV.NoExport,!0)},t.prototype.needsAppearancesUpdate=function(){throw new s.iQ(this.constructor.name,"needsAppearancesUpdate")},t.prototype.defaultUpdateAppearances=function(t){throw new s.iQ(this.constructor.name,"defaultUpdateAppearances")},t.prototype.markAsDirty=function(){this.doc.getForm().markFieldAsDirty(this.ref)},t.prototype.markAsClean=function(){this.doc.getForm().markFieldAsClean(this.ref)},t.prototype.isDirty=function(){return this.doc.getForm().fieldIsDirty(this.ref)},t.prototype.createWidget=function(t){var e,r=t.textColor,n=t.backgroundColor,i=t.borderColor,c=t.borderWidth,h=(0,a.Ux)(t.rotate),l=t.caption,f=t.x,d=t.y,p=t.width+c,g=t.height+c,v=Boolean(t.hidden);(0,u.m_)(h,"degreesAngle",90);var m=s.ci.create(this.doc.context,this.ref),y=(0,a.o7)({x:f,y:d,width:p,height:g},c,h);m.setRectangle(y);var b=m.getOrCreateAppearanceCharacteristics();n&&b.setBackgroundColor((0,o.wG)(n)),b.setRotation(h),l&&b.setCaptions({normal:l}),i&&b.setBorderColor((0,o.wG)(i));var w=m.getOrCreateBorderStyle();if(void 0!==c&&w.setWidth(c),m.setFlagTo(s.TV.Print,!0),m.setFlagTo(s.TV.Hidden,v),m.setFlagTo(s.TV.Invisible,!1),r){var k=(null!==(e=this.acroField.getDefaultAppearance())&&void 0!==e?e:"")+"\n"+(0,o.l6)(r).toString();this.acroField.setDefaultAppearance(k)}return m},t.prototype.updateWidgetAppearanceWithFont=function(t,e,r){var n=r.normal,i=r.rollover,o=r.down;this.updateWidgetAppearances(t,{normal:this.createAppearanceStream(t,n,e),rollover:i&&this.createAppearanceStream(t,i,e),down:o&&this.createAppearanceStream(t,o,e)})},t.prototype.updateOnOffWidgetAppearance=function(t,e,r){var n=r.normal,i=r.rollover,o=r.down;this.updateWidgetAppearances(t,{normal:this.createAppearanceDict(t,n,e),rollover:i&&this.createAppearanceDict(t,i,e),down:o&&this.createAppearanceDict(t,o,e)})},t.prototype.updateWidgetAppearances=function(t,e){var r=e.normal,n=e.rollover,i=e.down;t.setNormalAppearance(r),n?t.setRolloverAppearance(n):t.removeRolloverAppearance(),i?t.setDownAppearance(i):t.removeDownAppearance()},t.prototype.createAppearanceStream=function(t,e,r){var n,i=this.acroField.dict.context,o=t.getRectangle(),a=o.width,s=o.height,u=r&&{Font:(n={},n[r.name]=r.ref,n)},c=i.formXObject(e,{Resources:u,BBox:i.obj([0,0,a,s]),Matrix:i.obj([1,0,0,1,0,0])});return i.register(c)},t.prototype.createImageAppearanceStream=function(t,e,r){var i,o,s=this.acroField.dict.context,l=t.getRectangle(),f=t.getAppearanceCharacteristics(),d=t.getBorderStyle(),p=null!==(o=null==d?void 0:d.getWidth())&&void 0!==o?o:0,g=(0,a.U6)(null==f?void 0:f.getRotation()),v=(0,h.kc)((0,n.pi)((0,n.pi)({},l),{rotation:g})),m=(0,a.bY)(l,g),y=e.scaleToFit(m.width-2*p,m.height-2*p),b={x:p,y:p,width:y.width,height:y.height,rotate:(0,a.RW)(0),xSkew:(0,a.RW)(0),ySkew:(0,a.RW)(0)};r===c.C.Center?(b.x+=(m.width-2*p)/2-y.width/2,b.y+=(m.height-2*p)/2-y.height/2):r===c.C.Right&&(b.x=m.width-p-y.width,b.y=m.height-p-y.height);var w=(0,u.si)("Image",10),k=(0,n.pr)(v,(0,h.AE)(w,b)),x={XObject:(i={},i[w]=e.ref,i)},Z=s.formXObject(k,{Resources:x,BBox:s.obj([0,0,l.width,l.height]),Matrix:s.obj([1,0,0,1,0,0])});return s.register(Z)},t.prototype.createAppearanceDict=function(t,e,r){var n=this.acroField.dict.context,i=this.createAppearanceStream(t,e.on),o=this.createAppearanceStream(t,e.off),a=n.obj({});return a.set(r,i),a.set(s.wQ.of("Off"),o),a},t}()},8418:(t,e,r)=>{"use strict";r.d(e,{Z:()=>b});var n=r(7638),i=r(5966),o=r(7685),a=r(4313),s=r(4671),u=r(8785),c=r(9462),h=r(3217),l=r(2613),f=r(4755),d=r(6013),p=r(5893),g=r(1806),v=r(486),m=r(6107),y=r(1795);const b=function(){function t(t,e){var r=this;this.embedDefaultFont=function(){return r.doc.embedStandardFont(p.E.Helvetica)},(0,y.ku)(t,"acroForm",[[m.PS,"PDFAcroForm"]]),(0,y.ku)(e,"doc",[[i.Z,"PDFDocument"]]),this.acroForm=t,this.doc=e,this.dirtyFields=new Set,this.defaultFontCache=y.Ct.populatedBy(this.embedDefaultFont)}return t.prototype.hasXFA=function(){return this.acroForm.dict.has(m.wQ.of("XFA"))},t.prototype.deleteXFA=function(){this.acroForm.dict.delete(m.wQ.of("XFA"))},t.prototype.getFields=function(){for(var t=this.acroForm.getAllFields(),e=[],r=0,n=t.length;r<n;r++){var i=t[r],o=i[0],a=i[1],s=w(o,a,this.doc);s&&e.push(s)}return e},t.prototype.getFieldMaybe=function(t){(0,y.ku)(t,"name",["string"]);for(var e=this.getFields(),r=0,n=e.length;r<n;r++){var i=e[r];if(i.getName()===t)return i}},t.prototype.getField=function(t){(0,y.ku)(t,"name",["string"]);var e=this.getFieldMaybe(t);if(e)return e;throw new f.wx(t)},t.prototype.getButton=function(t){(0,y.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof o.Z)return e;throw new f.VV(t,o.Z,e)},t.prototype.getCheckBox=function(t){(0,y.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof a.Z)return e;throw new f.VV(t,a.Z,e)},t.prototype.getDropdown=function(t){(0,y.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof s.Z)return e;throw new f.VV(t,s.Z,e)},t.prototype.getOptionList=function(t){(0,y.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof u.Z)return e;throw new f.VV(t,u.Z,e)},t.prototype.getRadioGroup=function(t){(0,y.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof c.Z)return e;throw new f.VV(t,c.Z,e)},t.prototype.getSignature=function(t){(0,y.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof h.Z)return e;throw new f.VV(t,h.Z,e)},t.prototype.getTextField=function(t){(0,y.ku)(t,"name",["string"]);var e=this.getField(t);if(e instanceof l.Z)return e;throw new f.VV(t,l.Z,e)},t.prototype.createButton=function(t){(0,y.ku)(t,"name",["string"]);var e=k(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=m._.create(this.doc.context);return n.setPartialName(e.terminal),x(r,[n,n.ref],e.terminal),o.Z.of(n,n.ref,this.doc)},t.prototype.createCheckBox=function(t){(0,y.ku)(t,"name",["string"]);var e=k(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=m.Ei.create(this.doc.context);return n.setPartialName(e.terminal),x(r,[n,n.ref],e.terminal),a.Z.of(n,n.ref,this.doc)},t.prototype.createDropdown=function(t){(0,y.ku)(t,"name",["string"]);var e=k(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=m.sS.create(this.doc.context);return n.setPartialName(e.terminal),x(r,[n,n.ref],e.terminal),s.Z.of(n,n.ref,this.doc)},t.prototype.createOptionList=function(t){(0,y.ku)(t,"name",["string"]);var e=k(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=m.Au.create(this.doc.context);return n.setPartialName(e.terminal),x(r,[n,n.ref],e.terminal),u.Z.of(n,n.ref,this.doc)},t.prototype.createRadioGroup=function(t){(0,y.ku)(t,"name",["string"]);var e=k(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=m.Ym.create(this.doc.context);return n.setPartialName(e.terminal),x(r,[n,n.ref],e.terminal),c.Z.of(n,n.ref,this.doc)},t.prototype.createTextField=function(t){(0,y.ku)(t,"name",["string"]);var e=k(t),r=this.findOrCreateNonTerminals(e.nonTerminal),n=m._X.create(this.doc.context);return n.setPartialName(e.terminal),x(r,[n,n.ref],e.terminal),l.Z.of(n,n.ref,this.doc)},t.prototype.flatten=function(t){void 0===t&&(t={updateFieldAppearances:!0}),t.updateFieldAppearances&&this.updateFieldAppearances();for(var e=this.getFields(),r=0,i=e.length;r<i;r++){for(var o=e[r],a=o.acroField.getWidgets(),s=0,u=a.length;s<u;s++){var c=a[s],h=this.findWidgetPage(c),l=this.findWidgetAppearanceRef(o,c),f=(0,y.si)("FlatWidget",10);h.node.setXObject(m.wQ.of(f),l);var d=c.getRectangle(),p=(0,n.pr)([(0,v.bo)(),(0,v.Iu)(d.x,d.y)],(0,g.kc)((0,n.pi)((0,n.pi)({},d),{rotation:0})),[(0,v.Ax)(f),(0,v.Pq)()]).filter(Boolean);h.pushOperators.apply(h,p)}this.removeField(o)}},t.prototype.removeField=function(t){for(var e=t.acroField.getWidgets(),r=new Set,n=0,i=e.length;n<i;n++){var o=e[n],a=this.findWidgetAppearanceRef(t,o),s=this.findWidgetPage(o);r.add(s),s.node.removeAnnot(a)}r.forEach((function(e){return e.node.removeAnnot(t.ref)})),this.acroForm.removeField(t.acroField),this.doc.context.delete(t.ref)},t.prototype.updateFieldAppearances=function(t){(0,y.MU)(t,"font",[[d.Z,"PDFFont"]]),t=null!=t?t:this.getDefaultFont();for(var e=this.getFields(),r=0,n=e.length;r<n;r++){var i=e[r];i.needsAppearancesUpdate()&&i.defaultUpdateAppearances(t)}},t.prototype.markFieldAsDirty=function(t){(0,y.MU)(t,"fieldRef",[[m.$F,"PDFRef"]]),this.dirtyFields.add(t)},t.prototype.markFieldAsClean=function(t){(0,y.MU)(t,"fieldRef",[[m.$F,"PDFRef"]]),this.dirtyFields.delete(t)},t.prototype.fieldIsDirty=function(t){return(0,y.MU)(t,"fieldRef",[[m.$F,"PDFRef"]]),this.dirtyFields.has(t)},t.prototype.getDefaultFont=function(){return this.defaultFontCache.access()},t.prototype.findWidgetPage=function(t){var e=t.P(),r=this.doc.getPages().find((function(t){return t.ref===e}));if(void 0===r){var n=this.doc.context.getObjectRef(t.dict);if(void 0===n)throw new Error("Could not find PDFRef for PDFObject");if(void 0===(r=this.doc.findPageForAnnotationRef(n)))throw new Error("Could not find page for PDFRef "+n)}return r},t.prototype.findWidgetAppearanceRef=function(t,e){var r,n=e.getNormalAppearance();if(n instanceof m.mh&&(t instanceof a.Z||t instanceof c.Z)){var i=t.acroField.getValue(),o=null!==(r=n.get(i))&&void 0!==r?r:n.get(m.wQ.of("Off"));o instanceof m.$F&&(n=o)}if(!(n instanceof m.$F)){var s=t.getName();throw new Error("Failed to extract appearance ref for: "+s)}return n},t.prototype.findOrCreateNonTerminals=function(t){for(var e=[this.acroForm],r=0,n=t.length;r<n;r++){var i=t[r];if(!i)throw new f.Ic(i);var o=e[0],a=e[1],s=this.findNonTerminal(i,o);if(s)e=s;else{var u=m.qg.create(this.doc.context);u.setPartialName(i),u.setParent(a);var c=this.doc.context.register(u.dict);o.addField(c),e=[u,c]}}return e},t.prototype.findNonTerminal=function(t,e){for(var r=e instanceof m.PS?this.acroForm.getFields():(0,m.P_)(e.Kids()),n=0,i=r.length;n<i;n++){var o=r[n],a=o[0],s=o[1];if(a.getPartialName()===t){if(a instanceof m.qg)return[a,s];throw new f.MY(t)}}},t.of=function(e,r){return new t(e,r)},t}();var w=function(t,e,r){return t instanceof m._?o.Z.of(t,e,r):t instanceof m.Ei?a.Z.of(t,e,r):t instanceof m.sS?s.Z.of(t,e,r):t instanceof m.Au?u.Z.of(t,e,r):t instanceof m._X?l.Z.of(t,e,r):t instanceof m.Ym?c.Z.of(t,e,r):t instanceof m.uQ?h.Z.of(t,e,r):void 0},k=function(t){if(0===t.length)throw new Error("PDF field names must not be empty strings");for(var e=t.split("."),r=0,n=e.length;r<n;r++)if(""===e[r])throw new Error('Periods in PDF field names must be separated by at least one character: "'+t+'"');return 1===e.length?{nonTerminal:[],terminal:e[0]}:{nonTerminal:e.slice(0,e.length-1),terminal:e[e.length-1]}},x=function(t,e,r){for(var n=t[0],i=t[1],o=e[0],a=e[1],s=n.normalizedEntries(),u=((0,m.P_)("Kids"in s?s.Kids:s.Fields)),c=0,h=u.length;c<h;c++)if(u[c][0].getPartialName()===r)throw new f.MY(r);n.addField(a),o.setParent(i)}},8785:(t,e,r)=>{"use strict";r.d(e,{Z:()=>f});var n=r(7638),i=r(4087),o=r(6013),a=r(3358),s=r(8163),u=r(985),c=r(5733),h=r(6107),l=r(1795);const f=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return(0,l.ku)(e,"acroListBox",[[h.Au,"PDFAcroListBox"]]),i.acroField=e,i}return(0,n.ZT)(e,t),e.prototype.getOptions=function(){for(var t=this.acroField.getOptions(),e=new Array(t.length),r=0,n=e.length;r<n;r++){var i=t[r],o=i.display,a=i.value;e[r]=(null!=o?o:a).decodeText()}return e},e.prototype.getSelected=function(){for(var t=this.acroField.getValues(),e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=t[r].decodeText();return e},e.prototype.setOptions=function(t){(0,l.ku)(t,"options",[Array]),this.markAsDirty();for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]={value:h.Ij.fromText(t[r])};this.acroField.setOptions(e)},e.prototype.addOptions=function(t){(0,l.ku)(t,"options",["string",Array]),this.markAsDirty();for(var e=Array.isArray(t)?t:[t],r=this.acroField.getOptions(),n=new Array(e.length),i=0,o=e.length;i<o;i++)n[i]={value:h.Ij.fromText(e[i])};this.acroField.setOptions(r.concat(n))},e.prototype.select=function(t,e){void 0===e&&(e=!1),(0,l.ku)(t,"options",["string",Array]),(0,l.ku)(e,"merge",["boolean"]);var r=Array.isArray(t)?t:[t],n=this.getOptions();(0,l.k$)(r,"option",n),this.markAsDirty(),(r.length>1||1===r.length&&e)&&this.enableMultiselect();for(var i=new Array(r.length),o=0,a=r.length;o<a;o++)i[o]=h.Ij.fromText(r[o]);if(e){var s=this.acroField.getValues();this.acroField.setValues(s.concat(i))}else this.acroField.setValues(i)},e.prototype.clear=function(){this.markAsDirty(),this.acroField.setValues([])},e.prototype.setFontSize=function(t){(0,l.z7)(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.isSorted=function(){return this.acroField.hasFlag(h.m0.Sort)},e.prototype.enableSorting=function(){this.acroField.setFlagTo(h.m0.Sort,!0)},e.prototype.disableSorting=function(){this.acroField.setFlagTo(h.m0.Sort,!1)},e.prototype.isMultiselect=function(){return this.acroField.hasFlag(h.m0.MultiSelect)},e.prototype.enableMultiselect=function(){this.acroField.setFlagTo(h.m0.MultiSelect,!0)},e.prototype.disableMultiselect=function(){this.acroField.setFlagTo(h.m0.MultiSelect,!1)},e.prototype.isSelectOnClick=function(){return this.acroField.hasFlag(h.m0.CommitOnSelChange)},e.prototype.enableSelectOnClick=function(){this.acroField.setFlagTo(h.m0.CommitOnSelChange,!0)},e.prototype.disableSelectOnClick=function(){this.acroField.setFlagTo(h.m0.CommitOnSelChange,!1)},e.prototype.addToPage=function(t,e){var r,n,o,s,h,f,d;(0,l.ku)(t,"page",[[i.Z,"PDFPage"]]),(0,a.b)(e),e||(e={}),"textColor"in e||(e.textColor=(0,u.B8)(0,0,0)),"backgroundColor"in e||(e.backgroundColor=(0,u.B8)(1,1,1)),"borderColor"in e||(e.borderColor=(0,u.B8)(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var p=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(o=e.width)&&void 0!==o?o:200,height:null!==(s=e.height)&&void 0!==s?s:100,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(h=e.borderWidth)&&void 0!==h?h:0,rotate:null!==(f=e.rotate)&&void 0!==f?f:(0,c.RW)(0),hidden:e.hidden}),g=this.doc.context.register(p.dict);this.acroField.addWidget(g);var v=null!==(d=e.font)&&void 0!==d?d:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(p,v),t.node.addAnnot(g)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof h.kO))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){(0,l.ku)(t,"font",[[o.Z,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){(0,l.ku)(t,"font",[[o.Z,"PDFFont"]]),(0,l.MU)(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var a=r[n];this.updateWidgetAppearance(a,t,e)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=null!=r?r:s.E3,i=(0,s.TE)(n(this,t,e));this.updateWidgetAppearanceWithFont(t,e,i)},e.of=function(t,r,n){return new e(t,r,n)},e}(a.Z)},9462:(t,e,r)=>{"use strict";r.d(e,{Z:()=>l});var n=r(7638),i=r(4087),o=r(3358),a=r(8163),s=r(985),u=r(5733),c=r(6107),h=r(1795);const l=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return(0,h.ku)(e,"acroRadioButton",[[c.Ym,"PDFAcroRadioButton"]]),i.acroField=e,i}return(0,n.ZT)(e,t),e.prototype.getOptions=function(){var t=this.acroField.getExportValues();if(t){for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=t[r].decodeText();return e}var i=this.acroField.getOnValues(),o=new Array(i.length);for(r=0,n=o.length;r<n;r++)o[r]=i[r].decodeText();return o},e.prototype.getSelected=function(){var t=this.acroField.getValue();if(t!==c.wQ.of("Off")){var e=this.acroField.getExportValues();if(e)for(var r=this.acroField.getOnValues(),n=0,i=r.length;n<i;n++)if(r[n]===t)return e[n].decodeText();return t.decodeText()}},e.prototype.select=function(t){(0,h.ku)(t,"option",["string"]);var e=this.getOptions();(0,h.DA)(t,"option",e),this.markAsDirty();var r=this.acroField.getOnValues(),n=this.acroField.getExportValues();if(n)for(var i=0,o=n.length;i<o;i++)n[i].decodeText()===t&&this.acroField.setValue(r[i]);else for(i=0,o=r.length;i<o;i++){var a=r[i];a.decodeText()===t&&this.acroField.setValue(a)}},e.prototype.clear=function(){this.markAsDirty(),this.acroField.setValue(c.wQ.of("Off"))},e.prototype.isOffToggleable=function(){return!this.acroField.hasFlag(c.Ub.NoToggleToOff)},e.prototype.enableOffToggling=function(){this.acroField.setFlagTo(c.Ub.NoToggleToOff,!1)},e.prototype.disableOffToggling=function(){this.acroField.setFlagTo(c.Ub.NoToggleToOff,!0)},e.prototype.isMutuallyExclusive=function(){return!this.acroField.hasFlag(c.Ub.RadiosInUnison)},e.prototype.enableMutualExclusion=function(){this.acroField.setFlagTo(c.Ub.RadiosInUnison,!1)},e.prototype.disableMutualExclusion=function(){this.acroField.setFlagTo(c.Ub.RadiosInUnison,!0)},e.prototype.addOptionToPage=function(t,e,r){var n,a,l,f,d,p,g,v,m;(0,h.ku)(t,"option",["string"]),(0,h.ku)(e,"page",[[i.Z,"PDFPage"]]),(0,o.b)(r);var y=this.createWidget({x:null!==(n=null==r?void 0:r.x)&&void 0!==n?n:0,y:null!==(a=null==r?void 0:r.y)&&void 0!==a?a:0,width:null!==(l=null==r?void 0:r.width)&&void 0!==l?l:50,height:null!==(f=null==r?void 0:r.height)&&void 0!==f?f:50,textColor:null!==(d=null==r?void 0:r.textColor)&&void 0!==d?d:(0,s.B8)(0,0,0),backgroundColor:null!==(p=null==r?void 0:r.backgroundColor)&&void 0!==p?p:(0,s.B8)(1,1,1),borderColor:null!==(g=null==r?void 0:r.borderColor)&&void 0!==g?g:(0,s.B8)(0,0,0),borderWidth:null!==(v=null==r?void 0:r.borderWidth)&&void 0!==v?v:1,rotate:null!==(m=null==r?void 0:r.rotate)&&void 0!==m?m:(0,u.RW)(0),hidden:null==r?void 0:r.hidden}),b=this.doc.context.register(y.dict),w=this.acroField.addWidgetWithOpt(b,c.Ij.fromText(t),!this.isMutuallyExclusive());y.setAppearanceState(c.wQ.of("Off")),this.updateWidgetAppearance(y,w),e.node.addAnnot(b)},e.prototype.needsAppearancesUpdate=function(){for(var t,e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++){var i=e[r],o=i.getAppearanceState(),a=null===(t=i.getAppearances())||void 0===t?void 0:t.normal;if(!(a instanceof c.mh))return!0;if(o&&!a.has(o))return!0}return!1},e.prototype.defaultUpdateAppearances=function(){this.updateAppearances()},e.prototype.updateAppearances=function(t){(0,h.MU)(t,"provider",[Function]);for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++){var i=e[r],o=i.getOnValue();o&&this.updateWidgetAppearance(i,o,t)}},e.prototype.updateWidgetAppearance=function(t,e,r){var n=null!=r?r:a.gi,i=(0,a.TE)(n(this,t));this.updateOnOffWidgetAppearance(t,e,i)},e.of=function(t,r,n){return new e(t,r,n)},e}(o.Z)},3217:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(7638),i=r(3358),o=r(6107),a=r(1795);const s=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return(0,a.ku)(e,"acroSignature",[[o.uQ,"PDFAcroSignature"]]),i.acroField=e,i}return(0,n.ZT)(e,t),e.prototype.needsAppearancesUpdate=function(){return!1},e.of=function(t,r,n){return new e(t,r,n)},e}(i.Z)},2613:(t,e,r)=>{"use strict";r.d(e,{Z:()=>g});var n=r(7638),i=r(4087),o=r(6013),a=r(3358),s=r(8163),u=r(985),c=r(5733),h=r(4755),l=r(1828),f=r(6719),d=r(6107),p=r(1795);const g=function(t){function e(e,r,n){var i=t.call(this,e,r,n)||this;return(0,p.ku)(e,"acroText",[[d._X,"PDFAcroText"]]),i.acroField=e,i}return(0,n.ZT)(e,t),e.prototype.getText=function(){var t=this.acroField.getValue();if(!t&&this.isRichFormatted())throw new h.E9(this.getName());return null==t?void 0:t.decodeText()},e.prototype.setText=function(t){(0,p.MU)(t,"text",["string"]);var e=this.getMaxLength();if(void 0!==e&&t&&t.length>e)throw new h.uo(t.length,e,this.getName());this.markAsDirty(),this.disableRichFormatting(),t?this.acroField.setValue(d.Ij.fromText(t)):this.acroField.removeValue()},e.prototype.getAlignment=function(){var t=this.acroField.getQuadding();return 0===t?f.H.Left:1===t?f.H.Center:2===t?f.H.Right:f.H.Left},e.prototype.setAlignment=function(t){(0,p.DA)(t,"alignment",f.H),this.markAsDirty(),this.acroField.setQuadding(t)},e.prototype.getMaxLength=function(){return this.acroField.getMaxLength()},e.prototype.setMaxLength=function(t){if((0,p.zo)(t,"maxLength",0,Number.MAX_SAFE_INTEGER),this.markAsDirty(),void 0===t)this.acroField.removeMaxLength();else{var e=this.getText();if(e&&e.length>t)throw new h._D(e.length,t,this.getName());this.acroField.setMaxLength(t)}},e.prototype.removeMaxLength=function(){this.markAsDirty(),this.acroField.removeMaxLength()},e.prototype.setImage=function(t){for(var e=this.getAlignment(),r=e===f.H.Center?l.C.Center:e===f.H.Right?l.C.Right:l.C.Left,n=this.acroField.getWidgets(),i=0,o=n.length;i<o;i++){var a=n[i],s=this.createImageAppearanceStream(a,t,r);this.updateWidgetAppearances(a,{normal:s})}this.markAsClean()},e.prototype.setFontSize=function(t){(0,p.z7)(t,"fontSize"),this.acroField.setFontSize(t),this.markAsDirty()},e.prototype.isMultiline=function(){return this.acroField.hasFlag(d.oD.Multiline)},e.prototype.enableMultiline=function(){this.markAsDirty(),this.acroField.setFlagTo(d.oD.Multiline,!0)},e.prototype.disableMultiline=function(){this.markAsDirty(),this.acroField.setFlagTo(d.oD.Multiline,!1)},e.prototype.isPassword=function(){return this.acroField.hasFlag(d.oD.Password)},e.prototype.enablePassword=function(){this.acroField.setFlagTo(d.oD.Password,!0)},e.prototype.disablePassword=function(){this.acroField.setFlagTo(d.oD.Password,!1)},e.prototype.isFileSelector=function(){return this.acroField.hasFlag(d.oD.FileSelect)},e.prototype.enableFileSelection=function(){this.acroField.setFlagTo(d.oD.FileSelect,!0)},e.prototype.disableFileSelection=function(){this.acroField.setFlagTo(d.oD.FileSelect,!1)},e.prototype.isSpellChecked=function(){return!this.acroField.hasFlag(d.oD.DoNotSpellCheck)},e.prototype.enableSpellChecking=function(){this.acroField.setFlagTo(d.oD.DoNotSpellCheck,!1)},e.prototype.disableSpellChecking=function(){this.acroField.setFlagTo(d.oD.DoNotSpellCheck,!0)},e.prototype.isScrollable=function(){return!this.acroField.hasFlag(d.oD.DoNotScroll)},e.prototype.enableScrolling=function(){this.acroField.setFlagTo(d.oD.DoNotScroll,!1)},e.prototype.disableScrolling=function(){this.acroField.setFlagTo(d.oD.DoNotScroll,!0)},e.prototype.isCombed=function(){return this.acroField.hasFlag(d.oD.Comb)&&!this.isMultiline()&&!this.isPassword()&&!this.isFileSelector()&&void 0!==this.getMaxLength()},e.prototype.enableCombing=function(){void 0===this.getMaxLength()&&console.warn("PDFTextFields must have a max length in order to be combed"),this.markAsDirty(),this.disableMultiline(),this.disablePassword(),this.disableFileSelection(),this.acroField.setFlagTo(d.oD.Comb,!0)},e.prototype.disableCombing=function(){this.markAsDirty(),this.acroField.setFlagTo(d.oD.Comb,!1)},e.prototype.isRichFormatted=function(){return this.acroField.hasFlag(d.oD.RichText)},e.prototype.enableRichFormatting=function(){this.acroField.setFlagTo(d.oD.RichText,!0)},e.prototype.disableRichFormatting=function(){this.acroField.setFlagTo(d.oD.RichText,!1)},e.prototype.addToPage=function(t,e){var r,n,o,s,h,l,f;(0,p.ku)(t,"page",[[i.Z,"PDFPage"]]),(0,a.b)(e),e||(e={}),"textColor"in e||(e.textColor=(0,u.B8)(0,0,0)),"backgroundColor"in e||(e.backgroundColor=(0,u.B8)(1,1,1)),"borderColor"in e||(e.borderColor=(0,u.B8)(0,0,0)),"borderWidth"in e||(e.borderWidth=1);var d=this.createWidget({x:null!==(r=e.x)&&void 0!==r?r:0,y:null!==(n=e.y)&&void 0!==n?n:0,width:null!==(o=e.width)&&void 0!==o?o:200,height:null!==(s=e.height)&&void 0!==s?s:50,textColor:e.textColor,backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:null!==(h=e.borderWidth)&&void 0!==h?h:0,rotate:null!==(l=e.rotate)&&void 0!==l?l:(0,c.RW)(0),hidden:e.hidden}),g=this.doc.context.register(d.dict);this.acroField.addWidget(g);var v=null!==(f=e.font)&&void 0!==f?f:this.doc.getForm().getDefaultFont();this.updateWidgetAppearance(d,v),t.node.addAnnot(g)},e.prototype.needsAppearancesUpdate=function(){var t;if(this.isDirty())return!0;for(var e=this.acroField.getWidgets(),r=0,n=e.length;r<n;r++)if(!((null===(t=e[r].getAppearances())||void 0===t?void 0:t.normal)instanceof d.kO))return!0;return!1},e.prototype.defaultUpdateAppearances=function(t){(0,p.ku)(t,"font",[[o.Z,"PDFFont"]]),this.updateAppearances(t)},e.prototype.updateAppearances=function(t,e){(0,p.ku)(t,"font",[[o.Z,"PDFFont"]]),(0,p.MU)(e,"provider",[Function]);for(var r=this.acroField.getWidgets(),n=0,i=r.length;n<i;n++){var a=r[n];this.updateWidgetAppearance(a,t,e)}this.markAsClean()},e.prototype.updateWidgetAppearance=function(t,e,r){var n=null!=r?r:s.HN,i=(0,s.TE)(n(this,t,e));this.updateWidgetAppearanceWithFont(t,e,i)},e.of=function(t,r,n){return new e(t,r,n)},e}(a.Z)},8163:(t,e,r)=>{"use strict";r.d(e,{TE:()=>l,S8:()=>m,gi:()=>y,DS:()=>b,HN:()=>w,oX:()=>k,E3:()=>x});var n=r(7638),i=r(1806),o=r(985),a=r(5733),s=r(8329),u=r(6719),c=r(486),h=r(1795),l=function(t){return"normal"in t?t:{normal:t}},f=/\/([^\0\t\n\f\r\ ]+)[\0\t\n\f\r\ ]+(\d*\.\d+|\d+)[\0\t\n\f\r\ ]+Tf/,d=function(t){var e,r,n=null!==(e=t.getDefaultAppearance())&&void 0!==e?e:"",i=null!==(r=(0,h.JZ)(n,f).match)&&void 0!==r?r:[],o=Number(i[2]);return isFinite(o)?o:void 0},p=/(\d*\.\d+|\d+)[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]+(g|rg|k)/,g=function(t){var e,r=null!==(e=t.getDefaultAppearance())&&void 0!==e?e:"",n=(0,h.JZ)(r,p).match,i=null!=n?n:[],a=i[1],s=i[2],u=i[3],c=i[4],l=i[5];return"g"===l&&a?(0,o.se)(Number(a)):"rg"===l&&a&&s&&u?(0,o.B8)(Number(a),Number(s),Number(u)):"k"===l&&a&&s&&u&&c?(0,o.Qn)(Number(a),Number(s),Number(u),Number(c)):void 0},v=function(t,e,r,n){var i;void 0===n&&(n=0);var a=[(0,o.l6)(e).toString(),(0,c.vE)(null!==(i=null==r?void 0:r.name)&&void 0!==i?i:"dummy__noop",n).toString()].join("\n");t.setDefaultAppearance(a)},m=function(t,e){var r,s,u,c=g(e),h=g(t.acroField),l=e.getRectangle(),f=e.getAppearanceCharacteristics(),d=e.getBorderStyle(),p=null!==(r=null==d?void 0:d.getWidth())&&void 0!==r?r:0,m=(0,a.U6)(null==f?void 0:f.getRotation()),y=(0,a.bY)(l,m),b=y.width,w=y.height,k=(0,i.kc)((0,n.pi)((0,n.pi)({},l),{rotation:m})),x=(0,o.B8)(0,0,0),Z=null!==(s=(0,o.p4)(null==f?void 0:f.getBorderColor()))&&void 0!==s?s:x,S=(0,o.p4)(null==f?void 0:f.getBackgroundColor()),C=(0,o.p4)(null==f?void 0:f.getBackgroundColor(),.8),F=null!==(u=null!=c?c:h)&&void 0!==u?u:x;v(c?e:t.acroField,F);var T={x:0+p/2,y:0+p/2,width:b-p,height:w-p,thickness:1.5,borderWidth:p,borderColor:Z,markColor:F};return{normal:{on:(0,n.pr)(k,(0,i.lg)((0,n.pi)((0,n.pi)({},T),{color:S,filled:!0}))),off:(0,n.pr)(k,(0,i.lg)((0,n.pi)((0,n.pi)({},T),{color:S,filled:!1})))},down:{on:(0,n.pr)(k,(0,i.lg)((0,n.pi)((0,n.pi)({},T),{color:C,filled:!0}))),off:(0,n.pr)(k,(0,i.lg)((0,n.pi)((0,n.pi)({},T),{color:C,filled:!1})))}}},y=function(t,e){var r,s,u,c=g(e),h=g(t.acroField),l=e.getRectangle(),f=e.getAppearanceCharacteristics(),d=e.getBorderStyle(),p=null!==(r=null==d?void 0:d.getWidth())&&void 0!==r?r:0,m=(0,a.U6)(null==f?void 0:f.getRotation()),y=(0,a.bY)(l,m),b=y.width,w=y.height,k=(0,i.kc)((0,n.pi)((0,n.pi)({},l),{rotation:m})),x=(0,o.B8)(0,0,0),Z=null!==(s=(0,o.p4)(null==f?void 0:f.getBorderColor()))&&void 0!==s?s:x,S=(0,o.p4)(null==f?void 0:f.getBackgroundColor()),C=(0,o.p4)(null==f?void 0:f.getBackgroundColor(),.8),F=null!==(u=null!=c?c:h)&&void 0!==u?u:x;v(c?e:t.acroField,F);var T={x:b/2,y:w/2,width:b-p,height:w-p,borderWidth:p,borderColor:Z,dotColor:F};return{normal:{on:(0,n.pr)(k,(0,i.lt)((0,n.pi)((0,n.pi)({},T),{color:S,filled:!0}))),off:(0,n.pr)(k,(0,i.lt)((0,n.pi)((0,n.pi)({},T),{color:S,filled:!1})))},down:{on:(0,n.pr)(k,(0,i.lt)((0,n.pi)((0,n.pi)({},T),{color:C,filled:!0}))),off:(0,n.pr)(k,(0,i.lt)((0,n.pi)((0,n.pi)({},T),{color:C,filled:!1})))}}},b=function(t,e,r){var c,h,l,f,p,m=g(e),y=g(t.acroField),b=d(e),w=d(t.acroField),k=e.getRectangle(),x=e.getAppearanceCharacteristics(),Z=e.getBorderStyle(),S=null==x?void 0:x.getCaptions(),C=null!==(c=null==S?void 0:S.normal)&&void 0!==c?c:"",F=null!==(l=null!==(h=null==S?void 0:S.down)&&void 0!==h?h:C)&&void 0!==l?l:"",T=null!==(f=null==Z?void 0:Z.getWidth())&&void 0!==f?f:0,A=(0,a.U6)(null==x?void 0:x.getRotation()),O=(0,a.bY)(k,A),R=O.width,z=O.height,P=(0,i.kc)((0,n.pi)((0,n.pi)({},k),{rotation:A})),D=(0,o.B8)(0,0,0),N=(0,o.p4)(null==x?void 0:x.getBorderColor()),B=(0,o.p4)(null==x?void 0:x.getBackgroundColor()),I=(0,o.p4)(null==x?void 0:x.getBackgroundColor(),.8),E={x:T,y:T,width:R-2*T,height:z-2*T},U=(0,s.v0)(C,{alignment:u.H.Center,fontSize:null!=b?b:w,font:r,bounds:E}),j=(0,s.v0)(F,{alignment:u.H.Center,fontSize:null!=b?b:w,font:r,bounds:E}),M=Math.min(U.fontSize,j.fontSize),V=null!==(p=null!=m?m:y)&&void 0!==p?p:D;v(m||void 0!==b?e:t.acroField,V,r,M);var W={x:0+T/2,y:0+T/2,width:R-T,height:z-T,borderWidth:T,borderColor:N,textColor:V,font:r.name,fontSize:M};return{normal:(0,n.pr)(P,(0,i.FC)((0,n.pi)((0,n.pi)({},W),{color:B,textLines:[U.line]}))),down:(0,n.pr)(P,(0,i.FC)((0,n.pi)((0,n.pi)({},W),{color:I,textLines:[j.line]})))}},w=function(t,e,r){var u,c,h,l,f,p,m=g(e),y=g(t.acroField),b=d(e),w=d(t.acroField),k=e.getRectangle(),x=e.getAppearanceCharacteristics(),Z=e.getBorderStyle(),S=null!==(u=t.getText())&&void 0!==u?u:"",C=null!==(c=null==Z?void 0:Z.getWidth())&&void 0!==c?c:0,F=(0,a.U6)(null==x?void 0:x.getRotation()),T=(0,a.bY)(k,F),A=T.width,O=T.height,R=(0,i.kc)((0,n.pi)((0,n.pi)({},k),{rotation:F})),z=(0,o.B8)(0,0,0),P=(0,o.p4)(null==x?void 0:x.getBorderColor()),D=(0,o.p4)(null==x?void 0:x.getBackgroundColor()),N=t.isCombed()?0:1,B={x:C+N,y:C+N,width:A-2*(C+N),height:O-2*(C+N)};if(t.isMultiline())f=(I=(0,s.jg)(S,{alignment:t.getAlignment(),fontSize:null!=b?b:w,font:r,bounds:B})).lines,p=I.fontSize;else if(t.isCombed())f=(I=(0,s.qs)(S,{fontSize:null!=b?b:w,font:r,bounds:B,cellCount:null!==(h=t.getMaxLength())&&void 0!==h?h:0})).cells,p=I.fontSize;else{var I;f=[(I=(0,s.v0)(S,{alignment:t.getAlignment(),fontSize:null!=b?b:w,font:r,bounds:B})).line],p=I.fontSize}var E=null!==(l=null!=m?m:y)&&void 0!==l?l:z;v(m||void 0!==b?e:t.acroField,E,r,p);var U={x:0+C/2,y:0+C/2,width:A-C,height:O-C,borderWidth:null!=C?C:0,borderColor:P,textColor:E,font:r.name,fontSize:p,color:D,textLines:f,padding:N};return(0,n.pr)(R,(0,i.zh)(U))},k=function(t,e,r){var c,h,l,f=g(e),p=g(t.acroField),m=d(e),y=d(t.acroField),b=e.getRectangle(),w=e.getAppearanceCharacteristics(),k=e.getBorderStyle(),x=null!==(c=t.getSelected()[0])&&void 0!==c?c:"",Z=null!==(h=null==k?void 0:k.getWidth())&&void 0!==h?h:0,S=(0,a.U6)(null==w?void 0:w.getRotation()),C=(0,a.bY)(b,S),F=C.width,T=C.height,A=(0,i.kc)((0,n.pi)((0,n.pi)({},b),{rotation:S})),O=(0,o.B8)(0,0,0),R=(0,o.p4)(null==w?void 0:w.getBorderColor()),z=(0,o.p4)(null==w?void 0:w.getBackgroundColor()),P={x:Z+1,y:Z+1,width:F-2*(Z+1),height:T-2*(Z+1)},D=(0,s.v0)(x,{alignment:u.H.Left,fontSize:null!=m?m:y,font:r,bounds:P}),N=D.line,B=D.fontSize,I=null!==(l=null!=f?f:p)&&void 0!==l?l:O;v(f||void 0!==m?e:t.acroField,I,r,B);var E={x:0+Z/2,y:0+Z/2,width:F-Z,height:T-Z,borderWidth:null!=Z?Z:0,borderColor:R,textColor:I,font:r.name,fontSize:B,color:z,textLines:[N],padding:1};return(0,n.pr)(A,(0,i.zh)(E))},x=function(t,e,r){var c,h,l=g(e),f=g(t.acroField),p=d(e),m=d(t.acroField),y=e.getRectangle(),b=e.getAppearanceCharacteristics(),w=e.getBorderStyle(),k=null!==(c=null==w?void 0:w.getWidth())&&void 0!==c?c:0,x=(0,a.U6)(null==b?void 0:b.getRotation()),Z=(0,a.bY)(y,x),S=Z.width,C=Z.height,F=(0,i.kc)((0,n.pi)((0,n.pi)({},y),{rotation:x})),T=(0,o.B8)(0,0,0),A=(0,o.p4)(null==b?void 0:b.getBorderColor()),O=(0,o.p4)(null==b?void 0:b.getBackgroundColor()),R=t.getOptions(),z=t.getSelected();t.isSorted()&&R.sort();for(var P="",D=0,N=R.length;D<N;D++)P+=R[D],D<N-1&&(P+="\n");var B={x:k+1,y:k+1,width:S-2*(k+1),height:C-2*(k+1)},I=(0,s.jg)(P,{alignment:u.H.Left,fontSize:null!=p?p:m,font:r,bounds:B}),E=I.lines,U=I.fontSize,j=I.lineHeight,M=[];for(D=0,N=E.length;D<N;D++){var V=E[D];z.includes(V.text)&&M.push(D)}var W=(0,o.B8)(.6,193/255,218/255),G=null!==(h=null!=l?l:f)&&void 0!==h?h:T;return v(l||void 0!==p?e:t.acroField,G,r,U),(0,n.pr)(F,(0,i.JT)({x:0+k/2,y:0+k/2,width:S-k,height:C-k,borderWidth:null!=k?k:0,borderColor:A,textColor:G,font:r.name,fontSize:U,color:O,textLines:E,lineHeight:j,selectedColor:W,selectedLines:M,padding:1}))}},8060:(t,e,r)=>{"use strict";r(8163),r(7685),r(4313),r(4671),r(3358),r(8418),r(8785),r(9462),r(3217),r(2613)},1828:(t,e,r)=>{"use strict";var n;r.d(e,{C:()=>n}),function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(n||(n={}))},400:(t,e,r)=>{"use strict";r.d(e,{C:()=>n.C});var n=r(1828)},2902:(t,e,r)=>{"use strict";r.d(e,{Rj:()=>n.Z}),r(8060),r(8065),r(985),r(4755),r(3552),r(1806),r(486),r(5733),r(9135),r(7531),r(9874),r(5893);var n=r(5966);r(6013),r(5941),r(4087),r(7366),r(6789)},3552:(t,e,r)=>{"use strict";r.d(e,{N$:()=>i,Q0:()=>o,mH:()=>a});var n=r(6107),i=function(t){return t instanceof n.wQ?t:n.wQ.of(t)},o=function(t){return t instanceof n.qI?t:n.qI.of(t)},a=function(t){return t instanceof n.qI?t.asNumber():t}},1806:(t,e,r)=>{"use strict";r.d(e,{kw:()=>c,AE:()=>h,sS:()=>l,pS:()=>f,JG:()=>d,xL:()=>g,os:()=>v,kc:()=>m,lg:()=>y,lt:()=>b,FC:()=>w,zh:()=>x,JT:()=>Z});var n=r(7638),i=r(985),o=r(486),a=r(5733),s=r(3044),u=r(3552),c=function(t,e){for(var r=[(0,o.bo)(),e.graphicsState&&(0,o.Ou)(e.graphicsState),(0,o.Fv)(),(0,i.l6)(e.color),(0,o.vE)(e.font,e.size),(0,o.H7)(e.lineHeight),(0,o.Iz)((0,a.Yr)(e.rotate),(0,a.Yr)(e.xSkew),(0,a.Yr)(e.ySkew),e.x,e.y)].filter(Boolean),n=0,s=t.length;n<s;n++)r.push((0,o.V_)(t[n]),(0,o.t)());return r.push((0,o.Qj)(),(0,o.Pq)()),r},h=function(t,e){return[(0,o.bo)(),e.graphicsState&&(0,o.Ou)(e.graphicsState),(0,o.Iu)(e.x,e.y),(0,o.Ih)((0,a.Yr)(e.rotate)),(0,o.bA)(e.width,e.height),(0,o.VQ)((0,a.Yr)(e.xSkew),(0,a.Yr)(e.ySkew)),(0,o.Ax)(t),(0,o.Pq)()].filter(Boolean)},l=function(t,e){return[(0,o.bo)(),e.graphicsState&&(0,o.Ou)(e.graphicsState),(0,o.Iu)(e.x,e.y),(0,o.Ih)((0,a.Yr)(e.rotate)),(0,o.bA)(e.xScale,e.yScale),(0,o.VQ)((0,a.Yr)(e.xSkew),(0,a.Yr)(e.ySkew)),(0,o.Ax)(t),(0,o.Pq)()].filter(Boolean)},f=function(t){var e,r;return[(0,o.bo)(),t.graphicsState&&(0,o.Ou)(t.graphicsState),t.color&&(0,i.yb)(t.color),(0,o.H_)(t.thickness),(0,o.Rt)(null!==(e=t.dashArray)&&void 0!==e?e:[],null!==(r=t.dashPhase)&&void 0!==r?r:0),(0,o.Ao)(t.start.x,t.start.y),t.lineCap&&(0,o.xC)(t.lineCap),(0,o.Ao)(t.start.x,t.start.y),(0,o.kZ)(t.end.x,t.end.y),(0,o.Go)(),(0,o.Pq)()].filter(Boolean)},d=function(t){var e,r;return[(0,o.bo)(),t.graphicsState&&(0,o.Ou)(t.graphicsState),t.color&&(0,i.l6)(t.color),t.borderColor&&(0,i.yb)(t.borderColor),(0,o.H_)(t.borderWidth),t.borderLineCap&&(0,o.xC)(t.borderLineCap),(0,o.Rt)(null!==(e=t.borderDashArray)&&void 0!==e?e:[],null!==(r=t.borderDashPhase)&&void 0!==r?r:0),(0,o.Iu)(t.x,t.y),(0,o.Ih)((0,a.Yr)(t.rotate)),(0,o.VQ)((0,a.Yr)(t.xSkew),(0,a.Yr)(t.ySkew)),(0,o.Ao)(0,0),(0,o.kZ)(0,t.height),(0,o.kZ)(t.width,t.height),(0,o.kZ)(t.width,0),(0,o.ZM)(),t.color&&t.borderWidth?(0,o.y2)():t.color?(0,o.hl)():t.borderColor?(0,o.Go)():(0,o.ZM)(),(0,o.Pq)()].filter(Boolean)},p=(Math.sqrt(2)-1)/3*4,g=function(t){var e,r,s,c,h,l,f,d,g,v,m,y,b,w;return(0,n.pr)([(0,o.bo)(),t.graphicsState&&(0,o.Ou)(t.graphicsState),t.color&&(0,i.l6)(t.color),t.borderColor&&(0,i.yb)(t.borderColor),(0,o.H_)(t.borderWidth),t.borderLineCap&&(0,o.xC)(t.borderLineCap),(0,o.Rt)(null!==(e=t.borderDashArray)&&void 0!==e?e:[],null!==(r=t.borderDashPhase)&&void 0!==r?r:0)],void 0===t.rotate?(c={x:t.x,y:t.y,xScale:t.xScale,yScale:t.yScale},h=(0,u.mH)(c.x),l=(0,u.mH)(c.y),f=(0,u.mH)(c.xScale),d=(0,u.mH)(c.yScale),g=f*p,v=d*p,m=(h-=f)+2*f,y=(l-=d)+2*d,b=h+f,w=l+d,[(0,o.bo)(),(0,o.Ao)(h,w),(0,o.rz)(h,w-v,b-g,l,b,l),(0,o.rz)(b+g,l,m,w-v,m,w),(0,o.rz)(m,w+v,b+g,y,b,y),(0,o.rz)(b-g,y,h,w+v,h,w),(0,o.Pq)()]):function(t){var e=(0,u.mH)(t.x),r=(0,u.mH)(t.y),n=(0,u.mH)(t.xScale),i=(0,u.mH)(t.yScale),s=-n,c=-i,h=n*p,l=i*p,f=s+2*n,d=c+2*i,g=s+n,v=c+i;return[(0,o.Iu)(e,r),(0,o.Ih)((0,a.Yr)(t.rotate)),(0,o.Ao)(s,v),(0,o.rz)(s,v-l,g-h,c,g,c),(0,o.rz)(g+h,c,f,v-l,f,v),(0,o.rz)(f,v+l,g+h,d,g,d),(0,o.rz)(g-h,d,s,v+l,s,v)]}({x:t.x,y:t.y,xScale:t.xScale,yScale:t.yScale,rotate:null!==(s=t.rotate)&&void 0!==s?s:(0,a.RW)(0)}),[t.color&&t.borderWidth?(0,o.y2)():t.color?(0,o.hl)():t.borderColor?(0,o.Go)():(0,o.ZM)(),(0,o.Pq)()]).filter(Boolean)},v=function(t,e){var r,u,c;return(0,n.pr)([(0,o.bo)(),e.graphicsState&&(0,o.Ou)(e.graphicsState),(0,o.Iu)(e.x,e.y),(0,o.Ih)((0,a.Yr)(null!==(r=e.rotate)&&void 0!==r?r:(0,a.RW)(0))),e.scale?(0,o.bA)(e.scale,-e.scale):(0,o.bA)(1,-1),e.color&&(0,i.l6)(e.color),e.borderColor&&(0,i.yb)(e.borderColor),e.borderWidth&&(0,o.H_)(e.borderWidth),e.borderLineCap&&(0,o.xC)(e.borderLineCap),(0,o.Rt)(null!==(u=e.borderDashArray)&&void 0!==u?u:[],null!==(c=e.borderDashPhase)&&void 0!==c?c:0)],(0,s.A)(t),[e.color&&e.borderWidth?(0,o.y2)():e.color?(0,o.hl)():e.borderColor?(0,o.Go)():(0,o.ZM)(),(0,o.Pq)()]).filter(Boolean)},m=function(t){return 0===t.rotation?[(0,o.Iu)(0,0),(0,o.Ge)(0)]:90===t.rotation?[(0,o.Iu)(t.width,0),(0,o.Ge)(90)]:180===t.rotation?[(0,o.Iu)(t.width,t.height),(0,o.Ge)(180)]:270===t.rotation?[(0,o.Iu)(0,t.height),(0,o.Ge)(270)]:[]},y=function(t){var e=d({x:t.x,y:t.y,width:t.width,height:t.height,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:(0,a.RW)(0),xSkew:(0,a.RW)(0),ySkew:(0,a.RW)(0)});if(!t.filled)return e;var r=(0,u.mH)(t.width),s=(0,u.mH)(t.height),c=function(t){var e=(0,u.mH)(t.size);return[(0,o.bo)(),t.color&&(0,i.yb)(t.color),(0,o.H_)(t.thickness),(0,o.Iu)(t.x,t.y),(0,o.Ao)(-.675*e,-.07601036269430045*e),(0,o.kZ)(-.25*e,-.49*e),(0,o.kZ)(.69*e,.475*e),(0,o.Go)(),(0,o.Pq)()].filter(Boolean)}({x:r/2,y:s/2,size:Math.min(r,s)/2,thickness:t.thickness,color:t.markColor});return(0,n.pr)([(0,o.bo)()],e,c,[(0,o.Pq)()])},b=function(t){var e=(0,u.mH)(t.width),r=(0,u.mH)(t.height),i=Math.min(e,r)/2,a=g({x:t.x,y:t.y,xScale:i,yScale:i,color:t.color,borderColor:t.borderColor,borderWidth:t.borderWidth});if(!t.filled)return a;var s=g({x:t.x,y:t.y,xScale:.45*i,yScale:.45*i,color:t.dotColor,borderColor:void 0,borderWidth:0});return(0,n.pr)([(0,o.bo)()],a,s,[(0,o.Pq)()])},w=function(t){var e=(0,u.mH)(t.x),r=(0,u.mH)(t.y),i=(0,u.mH)(t.width),s=(0,u.mH)(t.height),c=d({x:e,y:r,width:i,height:s,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:(0,a.RW)(0),xSkew:(0,a.RW)(0),ySkew:(0,a.RW)(0)}),h=k(t.textLines,{color:t.textColor,font:t.font,size:t.fontSize,rotate:(0,a.RW)(0),xSkew:(0,a.RW)(0),ySkew:(0,a.RW)(0)});return(0,n.pr)([(0,o.bo)()],c,h,[(0,o.Pq)()])},k=function(t,e){for(var r=[(0,o.Fv)(),(0,i.l6)(e.color),(0,o.vE)(e.font,e.size)],n=0,s=t.length;n<s;n++){var u=t[n],c=u.encoded,h=u.x,l=u.y;r.push((0,o.Iz)((0,a.Yr)(e.rotate),(0,a.Yr)(e.xSkew),(0,a.Yr)(e.ySkew),h,l),(0,o.V_)(c))}return r.push((0,o.Qj)()),r},x=function(t){var e=(0,u.mH)(t.x),r=(0,u.mH)(t.y),i=(0,u.mH)(t.width),s=(0,u.mH)(t.height),c=(0,u.mH)(t.borderWidth),h=(0,u.mH)(t.padding),l=e+c/2+h,f=r+c/2+h,p=i-2*(c/2+h),g=s-2*(c/2+h),v=[(0,o.Ao)(l,f),(0,o.kZ)(l,f+g),(0,o.kZ)(l+p,f+g),(0,o.kZ)(l+p,f),(0,o.ZM)(),(0,o.oq)(),(0,o.ZY)()],m=d({x:e,y:r,width:i,height:s,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:(0,a.RW)(0),xSkew:(0,a.RW)(0),ySkew:(0,a.RW)(0)}),y=k(t.textLines,{color:t.textColor,font:t.font,size:t.fontSize,rotate:(0,a.RW)(0),xSkew:(0,a.RW)(0),ySkew:(0,a.RW)(0)}),b=(0,n.pr)([(0,o.Sn)("Tx"),(0,o.bo)()],y,[(0,o.Pq)(),(0,o.Ip)()]);return(0,n.pr)([(0,o.bo)()],m,v,b,[(0,o.Pq)()])},Z=function(t){for(var e=(0,u.mH)(t.x),r=(0,u.mH)(t.y),i=(0,u.mH)(t.width),s=(0,u.mH)(t.height),c=(0,u.mH)(t.lineHeight),h=(0,u.mH)(t.borderWidth),l=(0,u.mH)(t.padding),f=e+h/2+l,p=r+h/2+l,g=i-2*(h/2+l),v=s-2*(h/2+l),m=[(0,o.Ao)(f,p),(0,o.kZ)(f,p+v),(0,o.kZ)(f+g,p+v),(0,o.kZ)(f+g,p),(0,o.ZM)(),(0,o.oq)(),(0,o.ZY)()],y=d({x:e,y:r,width:i,height:s,borderWidth:t.borderWidth,color:t.color,borderColor:t.borderColor,rotate:(0,a.RW)(0),xSkew:(0,a.RW)(0),ySkew:(0,a.RW)(0)}),b=[],w=0,x=t.selectedLines.length;w<x;w++){var Z=t.textLines[t.selectedLines[w]];b.push.apply(b,d({x:Z.x-l,y:Z.y-(c-Z.height)/2,width:i-h,height:Z.height+(c-Z.height)/2,borderWidth:0,color:t.selectedColor,borderColor:void 0,rotate:(0,a.RW)(0),xSkew:(0,a.RW)(0),ySkew:(0,a.RW)(0)}))}var S=k(t.textLines,{color:t.textColor,font:t.font,size:t.fontSize,rotate:(0,a.RW)(0),xSkew:(0,a.RW)(0),ySkew:(0,a.RW)(0)}),C=(0,n.pr)([(0,o.Sn)("Tx"),(0,o.bo)()],S,[(0,o.Pq)(),(0,o.Ip)()]);return(0,n.pr)([(0,o.bo)()],y,b,m,C,[(0,o.Pq)()])}},486:(t,e,r)=>{"use strict";r.d(e,{oq:()=>s,Iu:()=>f,bA:()=>d,Ih:()=>p,Ge:()=>g,VQ:()=>v,Rt:()=>m,kP:()=>n,xC:()=>b,Ou:()=>k,bo:()=>x,Pq:()=>Z,H_:()=>S,rz:()=>C,ad:()=>F,ZM:()=>T,Ao:()=>A,kZ:()=>O,Go:()=>R,hl:()=>z,y2:()=>P,ZY:()=>D,t:()=>N,V_:()=>B,Fv:()=>I,Qj:()=>E,vE:()=>U,H7:()=>j,Iz:()=>M,Ax:()=>V,GR:()=>W,dA:()=>G,mE:()=>q,XS:()=>L,O8:()=>H,sp:()=>K,Sn:()=>X,Ip:()=>Y});var n,i=r(3552),o=r(5733),a=r(6107),s=function(){return a.sI.of(a.Y3.ClipNonZero)},u=Math.cos,c=Math.sin,h=Math.tan,l=function(t,e,r,n,o,s){return a.sI.of(a.Y3.ConcatTransformationMatrix,[(0,i.Q0)(t),(0,i.Q0)(e),(0,i.Q0)(r),(0,i.Q0)(n),(0,i.Q0)(o),(0,i.Q0)(s)])},f=function(t,e){return l(1,0,0,1,t,e)},d=function(t,e){return l(t,0,0,e,0,0)},p=function(t){return l(u((0,i.mH)(t)),c((0,i.mH)(t)),-c((0,i.mH)(t)),u((0,i.mH)(t)),0,0)},g=function(t){return p((0,o.Ht)((0,i.mH)(t)))},v=function(t,e){return l(1,h((0,i.mH)(t)),h((0,i.mH)(e)),1,0,0)},m=function(t,e){return a.sI.of(a.Y3.SetLineDashPattern,["["+t.map(i.Q0).join(" ")+"]",(0,i.Q0)(e)])};!function(t){t[t.Butt=0]="Butt",t[t.Round=1]="Round",t[t.Projecting=2]="Projecting"}(n||(n={}));var y,b=function(t){return a.sI.of(a.Y3.SetLineCapStyle,[(0,i.Q0)(t)])};!function(t){t[t.Miter=0]="Miter",t[t.Round=1]="Round",t[t.Bevel=2]="Bevel"}(y||(y={}));var w,k=function(t){return a.sI.of(a.Y3.SetGraphicsStateParams,[(0,i.N$)(t)])},x=function(){return a.sI.of(a.Y3.PushGraphicsState)},Z=function(){return a.sI.of(a.Y3.PopGraphicsState)},S=function(t){return a.sI.of(a.Y3.SetLineWidth,[(0,i.Q0)(t)])},C=function(t,e,r,n,o,s){return a.sI.of(a.Y3.AppendBezierCurve,[(0,i.Q0)(t),(0,i.Q0)(e),(0,i.Q0)(r),(0,i.Q0)(n),(0,i.Q0)(o),(0,i.Q0)(s)])},F=function(t,e,r,n){return a.sI.of(a.Y3.CurveToReplicateInitialPoint,[(0,i.Q0)(t),(0,i.Q0)(e),(0,i.Q0)(r),(0,i.Q0)(n)])},T=function(){return a.sI.of(a.Y3.ClosePath)},A=function(t,e){return a.sI.of(a.Y3.MoveTo,[(0,i.Q0)(t),(0,i.Q0)(e)])},O=function(t,e){return a.sI.of(a.Y3.LineTo,[(0,i.Q0)(t),(0,i.Q0)(e)])},R=function(){return a.sI.of(a.Y3.StrokePath)},z=function(){return a.sI.of(a.Y3.FillNonZero)},P=function(){return a.sI.of(a.Y3.FillNonZeroAndStroke)},D=function(){return a.sI.of(a.Y3.EndPath)},N=function(){return a.sI.of(a.Y3.NextLine)},B=function(t){return a.sI.of(a.Y3.ShowText,[t])},I=function(){return a.sI.of(a.Y3.BeginText)},E=function(){return a.sI.of(a.Y3.EndText)},U=function(t,e){return a.sI.of(a.Y3.SetFontAndSize,[(0,i.N$)(t),(0,i.Q0)(e)])},j=function(t){return a.sI.of(a.Y3.SetTextLineHeight,[(0,i.Q0)(t)])};!function(t){t[t.Fill=0]="Fill",t[t.Outline=1]="Outline",t[t.FillAndOutline=2]="FillAndOutline",t[t.Invisible=3]="Invisible",t[t.FillAndClip=4]="FillAndClip",t[t.OutlineAndClip=5]="OutlineAndClip",t[t.FillAndOutlineAndClip=6]="FillAndOutlineAndClip",t[t.Clip=7]="Clip"}(w||(w={}));var M=function(t,e,r,n,o){return s=u((0,i.mH)(t)),l=c((0,i.mH)(t))+h((0,i.mH)(e)),f=-c((0,i.mH)(t))+h((0,i.mH)(r)),d=u((0,i.mH)(t)),p=n,g=o,a.sI.of(a.Y3.SetTextMatrix,[(0,i.Q0)(s),(0,i.Q0)(l),(0,i.Q0)(f),(0,i.Q0)(d),(0,i.Q0)(p),(0,i.Q0)(g)]);var s,l,f,d,p,g},V=function(t){return a.sI.of(a.Y3.DrawObject,[(0,i.N$)(t)])},W=function(t){return a.sI.of(a.Y3.NonStrokingColorGray,[(0,i.Q0)(t)])},G=function(t){return a.sI.of(a.Y3.StrokingColorGray,[(0,i.Q0)(t)])},q=function(t,e,r){return a.sI.of(a.Y3.NonStrokingColorRgb,[(0,i.Q0)(t),(0,i.Q0)(e),(0,i.Q0)(r)])},L=function(t,e,r){return a.sI.of(a.Y3.StrokingColorRgb,[(0,i.Q0)(t),(0,i.Q0)(e),(0,i.Q0)(r)])},H=function(t,e,r,n){return a.sI.of(a.Y3.NonStrokingColorCmyk,[(0,i.Q0)(t),(0,i.Q0)(e),(0,i.Q0)(r),(0,i.Q0)(n)])},K=function(t,e,r,n){return a.sI.of(a.Y3.StrokingColorCmyk,[(0,i.Q0)(t),(0,i.Q0)(e),(0,i.Q0)(r),(0,i.Q0)(n)])},X=function(t){return a.sI.of(a.Y3.BeginMarkedContent,[(0,i.N$)(t)])},Y=function(){return a.sI.of(a.Y3.EndMarkedContent)}},5733:(t,e,r)=>{"use strict";r.d(e,{RW:()=>o,Ht:()=>u,Yr:()=>c,Ux:()=>h,U6:()=>l,bY:()=>f,o7:()=>d});var n,i=r(1795);!function(t){t.Degrees="degrees",t.Radians="radians"}(n||(n={}));var o=function(t){return(0,i.ku)(t,"degreeAngle",["number"]),{type:n.Degrees,angle:t}},a=n.Radians,s=n.Degrees,u=function(t){return t*Math.PI/180},c=function(t){return t.type===a?t.angle:t.type===s?u(t.angle):(0,i.vU)("Invalid rotation: "+JSON.stringify(t))},h=function(t){return t.type===a?180*t.angle/Math.PI:t.type===s?t.angle:(0,i.vU)("Invalid rotation: "+JSON.stringify(t))},l=function(t){void 0===t&&(t=0);var e=t/90%4;return 0===e?0:1===e?90:2===e?180:3===e?270:0},f=function(t,e){void 0===e&&(e=0);var r=l(e);return 90===r||270===r?{width:t.height,height:t.width}:{width:t.width,height:t.height}},d=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0);var n=t.x,i=t.y,o=t.width,a=t.height,s=l(r),u=e/2;return 0===s?{x:n-u,y:i-u,width:o,height:a}:90===s?{x:n-a+u,y:i-u,width:a,height:o}:180===s?{x:n-o+u,y:i-a+u,width:o,height:a}:270===s?{x:n-u,y:i-o+u,width:a,height:o}:{x:n-u,y:i-u,width:o,height:a}}},9135:(t,e,r)=>{"use strict";r.d(e,{b:()=>n});var n={"4A0":[4767.87,6740.79],"2A0":[3370.39,4767.87],A0:[2383.94,3370.39],A1:[1683.78,2383.94],A2:[1190.55,1683.78],A3:[841.89,1190.55],A4:[595.28,841.89],A5:[419.53,595.28],A6:[297.64,419.53],A7:[209.76,297.64],A8:[147.4,209.76],A9:[104.88,147.4],A10:[73.7,104.88],B0:[2834.65,4008.19],B1:[2004.09,2834.65],B2:[1417.32,2004.09],B3:[1000.63,1417.32],B4:[708.66,1000.63],B5:[498.9,708.66],B6:[354.33,498.9],B7:[249.45,354.33],B8:[175.75,249.45],B9:[124.72,175.75],B10:[87.87,124.72],C0:[2599.37,3676.54],C1:[1836.85,2599.37],C2:[1298.27,1836.85],C3:[918.43,1298.27],C4:[649.13,918.43],C5:[459.21,649.13],C6:[323.15,459.21],C7:[229.61,323.15],C8:[161.57,229.61],C9:[113.39,161.57],C10:[79.37,113.39],RA0:[2437.8,3458.27],RA1:[1729.13,2437.8],RA2:[1218.9,1729.13],RA3:[864.57,1218.9],RA4:[609.45,864.57],SRA0:[2551.18,3628.35],SRA1:[1814.17,2551.18],SRA2:[1275.59,1814.17],SRA3:[907.09,1275.59],SRA4:[637.8,907.09],Executive:[521.86,756],Folio:[612,936],Legal:[612,1008],Letter:[612,792],Tabloid:[792,1224]}},3044:(t,e,r)=>{"use strict";r.d(e,{A:()=>g});var n=r(486),i=0,o=0,a=0,s=0,u=0,c=0,h=new Map([["A",7],["a",7],["C",6],["c",6],["H",1],["h",1],["L",2],["l",2],["M",2],["m",2],["Q",4],["q",4],["S",4],["s",4],["T",2],["t",2],["V",1],["v",1],["Z",0],["z",0]]),l={M:function(t){return i=t[0],o=t[1],a=s=null,u=i,c=o,(0,n.Ao)(i,o)},m:function(t){return i+=t[0],o+=t[1],a=s=null,u=i,c=o,(0,n.Ao)(i,o)},C:function(t){return i=t[4],o=t[5],a=t[2],s=t[3],(0,n.rz)(t[0],t[1],t[2],t[3],t[4],t[5])},c:function(t){var e=(0,n.rz)(t[0]+i,t[1]+o,t[2]+i,t[3]+o,t[4]+i,t[5]+o);return a=i+t[2],s=o+t[3],i+=t[4],o+=t[5],e},S:function(t){null!==a&&null!==s||(a=i,s=o);var e=(0,n.rz)(i-(a-i),o-(s-o),t[0],t[1],t[2],t[3]);return a=t[0],s=t[1],i=t[2],o=t[3],e},s:function(t){null!==a&&null!==s||(a=i,s=o);var e=(0,n.rz)(i-(a-i),o-(s-o),i+t[0],o+t[1],i+t[2],o+t[3]);return a=i+t[0],s=o+t[1],i+=t[2],o+=t[3],e},Q:function(t){return a=t[0],s=t[1],i=t[2],o=t[3],(0,n.ad)(t[0],t[1],i,o)},q:function(t){var e=(0,n.ad)(t[0]+i,t[1]+o,t[2]+i,t[3]+o);return a=i+t[0],s=o+t[1],i+=t[2],o+=t[3],e},T:function(t){null===a||null===s?(a=i,s=o):(a=i-(a-i),s=o-(s-o));var e=(0,n.ad)(a,s,t[0],t[1]);return a=i-(a-i),s=o-(s-o),i=t[0],o=t[1],e},t:function(t){null===a||null===s?(a=i,s=o):(a=i-(a-i),s=o-(s-o));var e=(0,n.ad)(a,s,i+t[0],o+t[1]);return i+=t[0],o+=t[1],e},A:function(t){var e=f(i,o,t);return i=t[5],o=t[6],e},a:function(t){t[5]+=i,t[6]+=o;var e=f(i,o,t);return i=t[5],o=t[6],e},L:function(t){return i=t[0],o=t[1],a=s=null,(0,n.kZ)(i,o)},l:function(t){return i+=t[0],o+=t[1],a=s=null,(0,n.kZ)(i,o)},H:function(t){return i=t[0],a=s=null,(0,n.kZ)(i,o)},h:function(t){return i+=t[0],a=s=null,(0,n.kZ)(i,o)},V:function(t){return o=t[0],a=s=null,(0,n.kZ)(i,o)},v:function(t){return o+=t[0],a=s=null,(0,n.kZ)(i,o)},Z:function(){var t=(0,n.ZM)();return i=u,o=c,t},z:function(){var t=(0,n.ZM)();return i=u,o=c,t}},f=function(t,e,r){for(var i=r[0],o=r[1],a=r[2],s=r[3],u=r[4],c=r[5],h=r[6],l=[],f=0,g=d(c,h,i,o,s,u,a,t,e);f<g.length;f++){var v=g[f],m=p.apply(void 0,v);l.push(n.rz.apply(void 0,m))}return l},d=function(t,e,r,n,i,o,u,c,h){var l=u*(Math.PI/180),f=Math.sin(l),d=Math.cos(l);r=Math.abs(r),n=Math.abs(n);var p=(a=d*(c-t)*.5+f*(h-e)*.5)*a/(r*r)+(s=d*(h-e)*.5-f*(c-t)*.5)*s/(n*n);p>1&&(r*=p=Math.sqrt(p),n*=p);var g=d/r,v=f/r,m=-f/n,y=d/n,b=g*c+v*h,w=m*c+y*h,k=g*t+v*e,x=m*t+y*e,Z=1/((k-b)*(k-b)+(x-w)*(x-w))-.25;Z<0&&(Z=0);var S=Math.sqrt(Z);o===i&&(S=-S);var C=.5*(b+k)-S*(x-w),F=.5*(w+x)+S*(k-b),T=Math.atan2(w-F,b-C),A=Math.atan2(x-F,k-C)-T;A<0&&1===o?A+=2*Math.PI:A>0&&0===o&&(A-=2*Math.PI);for(var O=Math.ceil(Math.abs(A/(.5*Math.PI+.001))),R=[],z=0;z<O;z++){var P=T+z*A/O,D=T+(z+1)*A/O;R[z]=[C,F,P,D,r,n,f,d]}return R},p=function(t,e,r,n,i,o,a,s){var u=s*i,c=-a*o,h=a*i,l=s*o,f=.5*(n-r),d=8/3*Math.sin(.5*f)*Math.sin(.5*f)/Math.sin(f),p=t+Math.cos(r)-d*Math.sin(r),g=e+Math.sin(r)+d*Math.cos(r),v=t+Math.cos(n),m=e+Math.sin(n),y=v+d*Math.sin(n),b=m-d*Math.cos(n);return[u*p+c*g,h*p+l*g,u*y+c*b,h*y+l*b,u*v+c*m,h*v+l*m]},g=function(t){return function(t){i=o=a=s=u=c=0;for(var e=[],r=0;r<t.length;r++){var n=t[r];if(n.cmd&&"function"==typeof l[n.cmd]){var h=l[n.cmd](n.args);Array.isArray(h)?e=e.concat(h):e.push(h)}}return e}(function(t){for(var e,r=[],n=[],i="",o=!1,a=0,s=0,u=t;s<u.length;s++){var c=u[s];if(h.has(c))a=h.get(c),e&&(i.length>0&&(n[n.length]=+i),r[r.length]={cmd:e,args:n},n=[],i="",o=!1),e=c;else if([" ",","].includes(c)||"-"===c&&i.length>0&&"e"!==i[i.length-1]||"."===c&&o){if(0===i.length)continue;n.length===a?(r[r.length]={cmd:e,args:n},n=[+i],"M"===e&&(e="L"),"m"===e&&(e="l")):n[n.length]=+i,o="."===c,i=["-","."].includes(c)?c:""}else i+=c,"."===c&&(o=!0)}return i.length>0&&(n.length===a?(r[r.length]={cmd:e,args:n},n=[+i],"M"===e&&(e="L"),"m"===e&&(e="l")):n[n.length]=+i),r[r.length]={cmd:e,args:n},r}(t))}},6719:(t,e,r)=>{"use strict";var n;r.d(e,{H:()=>n}),function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(n||(n={}))},8065:(t,e,r)=>{"use strict";r(6719),r(8329)},8329:(t,e,r)=>{"use strict";r.d(e,{jg:()=>u,qs:()=>c,v0:()=>h});var n=r(4755),i=r(6719),o=r(1795),a=function(t){for(var e=t.length;e>0;e--)if(/\s/.test(t[e]))return e},s=function(t,e,r,n){for(var i,o=t.length;o>0;){var s=t.substring(0,o),u=r.encodeText(s),c=r.widthOfTextAtSize(s,n);if(c<e)return{line:s,encoded:u,width:c,remainder:t.substring(o)||void 0};o=null!==(i=a(s))&&void 0!==i?i:0}return{line:t,encoded:r.encodeText(t),width:r.widthOfTextAtSize(t,n),remainder:void 0}},u=function(t,e){var r=e.alignment,n=e.fontSize,a=e.font,u=e.bounds,c=(0,o.f7)((0,o.FV)(t));void 0!==n&&0!==n||(n=12);for(var h=a.heightAtSize(n),l=h+.2*h,f=[],d=u.x,p=u.y,g=u.x+u.width,v=u.y+u.height,m=u.y+u.height,y=0,b=c.length;y<b;y++)for(var w=c[y];void 0!==w;){var k=s(w,u.width,a,n),x=k.line,Z=k.encoded,S=k.width,C=k.remainder,F=r===i.H.Left?u.x:r===i.H.Center?u.x+u.width/2-S/2:r===i.H.Right?u.x+u.width-S:u.x;F<d&&(d=F),(m-=l)<p&&(p=m),F+S>g&&(g=F+S),m+h>v&&(v=m+h),f.push({text:x,encoded:Z,width:S,height:h,x:F,y:m}),w=null==C?void 0:C.trim()}return{fontSize:n,lineHeight:l,lines:f,bounds:{x:d,y:p,width:g-d,height:v-p}}},c=function(t,e){var r=e.fontSize,i=e.font,a=e.bounds,s=e.cellCount,u=(0,o.VX)((0,o.FV)(t));if(u.length>s)throw new n.ll(u.length,s);void 0!==r&&0!==r||(r=function(t,e,r,n){for(var i=r.width/n,a=r.height,s=4,u=(0,o.Qs)(t);s<500;){for(var c=0,h=u.length;c<h;c++){var l=u[c];if(e.widthOfTextAtSize(l,s)>.75*i)return s-1}if(e.heightAtSize(s,{descender:!1})>a)return s-1;s+=1}return s}(u,i,a,s));for(var c=a.width/s,h=i.heightAtSize(r,{descender:!1}),l=a.y+(a.height/2-h/2),f=[],d=a.x,p=a.y,g=a.x+a.width,v=a.y+a.height,m=0,y=0;m<s;){var b=(0,o.Vk)(u,y),w=b[0],k=b[1],x=i.encodeText(w),Z=i.widthOfTextAtSize(w,r),S=a.x+(c*m+c/2)-Z/2;S<d&&(d=S),l<p&&(p=l),S+Z>g&&(g=S+Z),l+h>v&&(v=l+h),f.push({text:u,encoded:x,width:Z,height:h,x:S,y:l}),m+=1,y+=k}return{fontSize:r,cells:f,bounds:{x:d,y:p,width:g-d,height:v-p}}},h=function(t,e){var r=e.alignment,n=e.fontSize,a=e.font,s=e.bounds,u=(0,o.VX)((0,o.FV)(t));void 0!==n&&0!==n||(n=function(t,e,r){for(var n=4;n<500;){for(var i=0,o=t.length;i<o;i++){var a=t[i];if(e.widthOfTextAtSize(a,n)>r.width)return n-1}var s=e.heightAtSize(n);if(t.length*(s+.2*s)>Math.abs(r.height))return n-1;n+=1}return n}([u],a,s));var c=a.encodeText(u),h=a.widthOfTextAtSize(u,n),l=a.heightAtSize(n,{descender:!1}),f=r===i.H.Left?s.x:r===i.H.Center?s.x+s.width/2-h/2:r===i.H.Right?s.x+s.width-h:s.x,d=s.y+(s.height/2-l/2);return{fontSize:n,line:{text:u,encoded:c,width:h,height:l,x:f,y:d},bounds:{x:f,y:d,width:h,height:l}}}},6834:(t,e,r)=>{"use strict";r.d(e,{Z:()=>x});var n=r(7638),i=r(9591),o=r.n(i),a=r(1617),s=r(1732),u=r(4055),c=r(4650),h=r(7802),l=r(5268),f=r(8430),d=r(3225),p=r(2018),g=r(351),v=r(4911),m=r(2596),y=r(3382),b=r(9153),w=r(1795),k=function(t,e){var r=t[0],n=e[0];return r.objectNumber-n.objectNumber};const x=function(){function t(){this.largestObjectNumber=0,this.header=a.Z.forVersion(1,7),this.trailerInfo={},this.indirectObjects=new Map}return t.prototype.assign=function(t,e){this.indirectObjects.set(t,e),t.objectNumber>this.largestObjectNumber&&(this.largestObjectNumber=t.objectNumber)},t.prototype.nextRef=function(){return this.largestObjectNumber+=1,v.Z.of(this.largestObjectNumber)},t.prototype.register=function(t){var e=this.nextRef();return this.assign(e,t),e},t.prototype.delete=function(t){return this.indirectObjects.delete(t)},t.prototype.lookupMaybe=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var n=e.includes(f.Z),i=t instanceof v.Z?this.indirectObjects.get(t):t;if(i&&(i!==f.Z||n)){for(var o=0,a=e.length;o<a;o++){var u=e[o];if(u===f.Z){if(i===f.Z)return i}else if(i instanceof u)return i}throw new s.VX(e,i)}},t.prototype.lookup=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];var n=t instanceof v.Z?this.indirectObjects.get(t):t;if(0===e.length)return n;for(var i=0,o=e.length;i<o;i++){var a=e[i];if(a===f.Z){if(n===f.Z)return n}else if(n instanceof a)return n}throw new s.VX(e,n)},t.prototype.getObjectRef=function(t){for(var e=Array.from(this.indirectObjects.entries()),r=0,n=e.length;r<n;r++){var i=e[r],o=i[0];if(i[1]===t)return o}},t.prototype.enumerateIndirectObjects=function(){return Array.from(this.indirectObjects.entries()).sort(k)},t.prototype.obj=function(t){if(t instanceof p.Z)return t;if(null==t)return f.Z;if("string"==typeof t)return l.Z.of(t);if("number"==typeof t)return d.Z.of(t);if("boolean"==typeof t)return t?c.Z.True:c.Z.False;if(Array.isArray(t)){for(var e=u.Z.withContext(this),r=0,n=t.length;r<n;r++)e.push(this.obj(t[r]));return e}var i=h.Z.withContext(this),o=Object.keys(t);for(r=0,n=o.length;r<n;r++){var a=o[r],s=t[a];void 0!==s&&i.set(l.Z.of(a),this.obj(s))}return i},t.prototype.stream=function(t,e){return void 0===e&&(e={}),g.Z.of(this.obj(e),(0,w.b3)(t))},t.prototype.flateStream=function(t,e){return void 0===e&&(e={}),this.stream(o().deflate((0,w.b3)(t)),(0,n.pi)((0,n.pi)({},e),{Filter:"FlateDecode"}))},t.prototype.contentStream=function(t,e){return void 0===e&&(e={}),b.Z.of(this.obj(e),t)},t.prototype.formXObject=function(t,e){return void 0===e&&(e={}),this.contentStream(t,(0,n.pi)((0,n.pi)({BBox:this.obj([0,0,0,0]),Matrix:this.obj([1,0,0,1,0,0])},e),{Type:"XObject",Subtype:"Form"}))},t.prototype.getPushGraphicsStateContentStream=function(){if(this.pushGraphicsStateContentStreamRef)return this.pushGraphicsStateContentStreamRef;var t=this.obj({}),e=m.Z.of(y.Z.PushGraphicsState),r=b.Z.of(t,[e]);return this.pushGraphicsStateContentStreamRef=this.register(r),this.pushGraphicsStateContentStreamRef},t.prototype.getPopGraphicsStateContentStream=function(){if(this.popGraphicsStateContentStreamRef)return this.popGraphicsStateContentStreamRef;var t=this.obj({}),e=m.Z.of(y.Z.PopGraphicsState),r=b.Z.of(t,[e]);return this.popGraphicsStateContentStreamRef=this.register(r),this.popGraphicsStateContentStreamRef},t.create=function(){return new t},t}()},1108:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n=r(4055),i=r(7802),o=r(5268),a=r(4911),s=r(6962),u=r(4874);const c=function(){function t(t,e){var r=this;this.traversedObjects=new Map,this.copy=function(t){return t instanceof u.Z?r.copyPDFPage(t):t instanceof i.Z?r.copyPDFDict(t):t instanceof n.Z?r.copyPDFArray(t):t instanceof s.Z?r.copyPDFStream(t):t instanceof a.Z?r.copyPDFIndirectObject(t):t.clone()},this.copyPDFPage=function(t){for(var e=t.clone(),n=u.Z.InheritableEntries,i=0,a=n.length;i<a;i++){var s=o.Z.of(n[i]),c=e.getInheritableAttribute(s);!e.get(s)&&c&&e.set(s,c)}return e.delete(o.Z.of("Parent")),r.copyPDFDict(e)},this.copyPDFDict=function(t){if(r.traversedObjects.has(t))return r.traversedObjects.get(t);var e=t.clone(r.dest);r.traversedObjects.set(t,e);for(var n=t.entries(),i=0,o=n.length;i<o;i++){var a=n[i],s=a[0],u=a[1];e.set(s,r.copy(u))}return e},this.copyPDFArray=function(t){if(r.traversedObjects.has(t))return r.traversedObjects.get(t);var e=t.clone(r.dest);r.traversedObjects.set(t,e);for(var n=0,i=t.size();n<i;n++){var o=t.get(n);e.set(n,r.copy(o))}return e},this.copyPDFStream=function(t){if(r.traversedObjects.has(t))return r.traversedObjects.get(t);var e=t.clone(r.dest);r.traversedObjects.set(t,e);for(var n=t.dict.entries(),i=0,o=n.length;i<o;i++){var a=n[i],s=a[0],u=a[1];e.dict.set(s,r.copy(u))}return e},this.copyPDFIndirectObject=function(t){if(!r.traversedObjects.has(t)){var e=r.dest.nextRef();r.traversedObjects.set(t,e);var n=r.src.lookup(t);if(n){var i=r.copy(n);r.dest.assign(e,i)}}return r.traversedObjects.get(t)},this.src=t,this.dest=e}return t.for=function(e,r){return new t(e,r)},t}()},9e3:(t,e,r)=>{"use strict";r.d(e,{Z:()=>h});var n=r(7638),i=r(4222),o=r(8158),a=r(4055),s=r(5268),u=r(4435),c=r(1732);const h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.prototype.Opt=function(){return this.dict.lookupMaybe(s.Z.of("Opt"),i.Z,o.Z,a.Z)},e.prototype.setOpt=function(t){this.dict.set(s.Z.of("Opt"),this.dict.context.obj(t))},e.prototype.getExportValues=function(){var t=this.Opt();if(t){if(t instanceof i.Z||t instanceof o.Z)return[t];for(var e=[],r=0,n=t.size();r<n;r++){var a=t.lookup(r);(a instanceof i.Z||a instanceof o.Z)&&e.push(a)}return e}},e.prototype.removeExportValue=function(t){var e=this.Opt();if(e)if(e instanceof i.Z||e instanceof o.Z){if(0!==t)throw new c.sE(t,0,0);this.setOpt([])}else{if(t<0||t>e.size())throw new c.sE(t,0,e.size());e.remove(t)}},e.prototype.normalizeExportValues=function(){for(var t,e,r,n,i=null!==(t=this.getExportValues())&&void 0!==t?t:[],a=[],s=this.getWidgets(),u=0,c=s.length;u<c;u++){var h=s[u],l=null!==(e=i[u])&&void 0!==e?e:o.Z.fromText(null!==(n=null===(r=h.getOnValue())||void 0===r?void 0:r.decodeText())&&void 0!==n?n:"");a.push(l)}this.setOpt(a)},e.prototype.addOpt=function(t,e){var r;this.normalizeExportValues();var n,i=t.decodeText();if(e)for(var o=null!==(r=this.getExportValues())&&void 0!==r?r:[],a=0,s=o.length;a<s;a++)o[a].decodeText()===i&&(n=a);var u=this.Opt();return u.push(t),null!=n?n:u.size()-1},e.prototype.addWidgetWithOpt=function(t,e,r){var n=this.addOpt(e,r),i=s.Z.of(String(n));return this.addWidget(t),i},e}(u.Z)},7749:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(7638),i=r(5268),o=r(9e3),a=r(1732);const s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.prototype.setValue=function(t){var e;if(t!==(null!==(e=this.getOnValue())&&void 0!==e?e:i.Z.of("Yes"))&&t!==i.Z.of("Off"))throw new a.vM;this.dict.set(i.Z.of("V"),t);for(var r=this.getWidgets(),n=0,o=r.length;n<o;n++){var s=r[n],u=s.getOnValue()===t?t:i.Z.of("Off");s.setAppearanceState(u)}},e.prototype.getValue=function(){var t=this.V();return t instanceof i.Z?t:i.Z.of("Off")},e.prototype.getOnValue=function(){var t=this.getWidgets()[0];return null==t?void 0:t.getOnValue()},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Btn",Kids:[]});return new e(r,t.register(r))},e}(o.Z)},1432:(t,e,r)=>{"use strict";r.d(e,{Z:()=>l});var n=r(7638),i=r(4435),o=r(8158),a=r(4222),s=r(4055),u=r(5268),c=r(2571),h=r(1732);const l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.prototype.setValues=function(t){if(this.hasFlag(c.m0.Combo)&&!this.hasFlag(c.m0.Edit)&&!this.valuesAreValid(t))throw new h.vM;if(0===t.length&&this.dict.delete(u.Z.of("V")),1===t.length&&this.dict.set(u.Z.of("V"),t[0]),t.length>1){if(!this.hasFlag(c.m0.MultiSelect))throw new h.TC;this.dict.set(u.Z.of("V"),this.dict.context.obj(t))}this.updateSelectedIndices(t)},e.prototype.valuesAreValid=function(t){for(var e=this.getOptions(),r=function(r,n){var i=t[r].decodeText();if(!e.find((function(t){return i===(t.display||t.value).decodeText()})))return{value:!1}},n=0,i=t.length;n<i;n++){var o=r(n);if("object"==typeof o)return o.value}return!0},e.prototype.updateSelectedIndices=function(t){if(t.length>1){for(var e=new Array(t.length),r=this.getOptions(),n=function(n,i){var o=t[n].decodeText();e[n]=r.findIndex((function(t){return o===(t.display||t.value).decodeText()}))},i=0,o=t.length;i<o;i++)n(i);this.dict.set(u.Z.of("I"),this.dict.context.obj(e.sort()))}else this.dict.delete(u.Z.of("I"))},e.prototype.getValues=function(){var t=this.V();if(t instanceof a.Z||t instanceof o.Z)return[t];if(t instanceof s.Z){for(var e=[],r=0,n=t.size();r<n;r++){var i=t.lookup(r);(i instanceof a.Z||i instanceof o.Z)&&e.push(i)}return e}return[]},e.prototype.Opt=function(){return this.dict.lookupMaybe(u.Z.of("Opt"),a.Z,o.Z,s.Z)},e.prototype.setOptions=function(t){for(var e=new Array(t.length),r=0,n=t.length;r<n;r++){var i=t[r],o=i.value,a=i.display;e[r]=this.dict.context.obj([o,a||o])}this.dict.set(u.Z.of("Opt"),this.dict.context.obj(e))},e.prototype.getOptions=function(){var t=this.Opt();if(t instanceof a.Z||t instanceof o.Z)return[{value:t,display:t}];if(t instanceof s.Z){for(var e=[],r=0,n=t.size();r<n;r++){var i=t.lookup(r);if((i instanceof a.Z||i instanceof o.Z)&&e.push({value:i,display:i}),i instanceof s.Z&&i.size()>0){var u=i.lookup(0,a.Z,o.Z),c=i.lookupMaybe(1,a.Z,o.Z);e.push({value:u,display:c||u})}}return e}return[]},e}(i.Z)},8874:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(7638),i=r(1432),o=r(2571);const a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Ch",Ff:o.m0.Combo,Kids:[]});return new e(r,t.register(r))},e}(i.Z)},9925:(t,e,r)=>{"use strict";r.d(e,{Z:()=>d});var n=r(7802),i=r(4222),o=r(8158),a=r(5268),s=r(3225),u=r(4055),c=r(4911),h=r(1795),l=r(1732),f=/\/([^\0\t\n\f\r\ ]+)[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]+Tf/;const d=function(){function t(t,e){this.dict=t,this.ref=e}return t.prototype.T=function(){return this.dict.lookupMaybe(a.Z.of("T"),i.Z,o.Z)},t.prototype.Ff=function(){var t=this.getInheritableAttribute(a.Z.of("Ff"));return this.dict.context.lookupMaybe(t,s.Z)},t.prototype.V=function(){var t=this.getInheritableAttribute(a.Z.of("V"));return this.dict.context.lookup(t)},t.prototype.Kids=function(){return this.dict.lookupMaybe(a.Z.of("Kids"),u.Z)},t.prototype.DA=function(){var t=this.dict.lookup(a.Z.of("DA"));if(t instanceof i.Z||t instanceof o.Z)return t},t.prototype.setKids=function(t){this.dict.set(a.Z.of("Kids"),this.dict.context.obj(t))},t.prototype.getParent=function(){var e=this.dict.get(a.Z.of("Parent"));if(e instanceof c.Z)return new t(this.dict.lookup(a.Z.of("Parent"),n.Z),e)},t.prototype.setParent=function(t){t?this.dict.set(a.Z.of("Parent"),t):this.dict.delete(a.Z.of("Parent"))},t.prototype.getFullyQualifiedName=function(){var t=this.getParent();return t?t.getFullyQualifiedName()+"."+this.getPartialName():this.getPartialName()},t.prototype.getPartialName=function(){var t;return null===(t=this.T())||void 0===t?void 0:t.decodeText()},t.prototype.setPartialName=function(t){t?this.dict.set(a.Z.of("T"),o.Z.fromText(t)):this.dict.delete(a.Z.of("T"))},t.prototype.setDefaultAppearance=function(t){this.dict.set(a.Z.of("DA"),i.Z.of(t))},t.prototype.getDefaultAppearance=function(){var t=this.DA();return t instanceof o.Z?t.decodeText():null==t?void 0:t.asString()},t.prototype.setFontSize=function(t){var e,r=null!==(e=this.getFullyQualifiedName())&&void 0!==e?e:"",n=this.getDefaultAppearance();if(!n)throw new l._z(r);var i=(0,h.JZ)(n,f);if(!i.match)throw new l.Iu(r);var o=n.slice(0,i.pos-i.match[0].length),a=i.pos<=n.length?n.slice(i.pos):"",s=o+" /"+i.match[1]+" "+t+" Tf "+a;this.setDefaultAppearance(s)},t.prototype.getFlags=function(){var t,e;return null!==(e=null===(t=this.Ff())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:0},t.prototype.setFlags=function(t){this.dict.set(a.Z.of("Ff"),s.Z.of(t))},t.prototype.hasFlag=function(t){return 0!=(this.getFlags()&t)},t.prototype.setFlag=function(t){var e=this.getFlags();this.setFlags(e|t)},t.prototype.clearFlag=function(t){var e=this.getFlags();this.setFlags(e&~t)},t.prototype.setFlagTo=function(t,e){e?this.setFlag(t):this.clearFlag(t)},t.prototype.getInheritableAttribute=function(t){var e;return this.ascend((function(r){e||(e=r.dict.get(t))})),e},t.prototype.ascend=function(t){t(this);var e=this.getParent();e&&e.ascend(t)},t}()},8684:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(7802),i=r(4055),o=r(5268),a=r(4424),s=r(1376);const u=function(){function t(t){this.dict=t}return t.prototype.Fields=function(){var t=this.dict.lookup(o.Z.of("Fields"));if(t instanceof i.Z)return t},t.prototype.getFields=function(){for(var t=this.normalizedEntries().Fields,e=new Array(t.size()),r=0,i=t.size();r<i;r++){var o=t.get(r),a=t.lookup(r,n.Z);e[r]=[(0,s.W)(a,o),o]}return e},t.prototype.getAllFields=function(){var t=[],e=function(r){if(r)for(var n=0,i=r.length;n<i;n++){var o=r[n];t.push(o);var u=o[0];u instanceof a.Z&&e((0,s.P)(u.Kids()))}};return e(this.getFields()),t},t.prototype.addField=function(t){var e=this.normalizedEntries().Fields;null==e||e.push(t)},t.prototype.removeField=function(t){var e=t.getParent(),r=void 0===e?this.normalizedEntries().Fields:e.Kids(),n=null==r?void 0:r.indexOf(t.ref);if(void 0===r||void 0===n)throw new Error("Tried to remove inexistent field "+t.getFullyQualifiedName());r.remove(n),void 0!==e&&0===r.size()&&this.removeField(e)},t.prototype.normalizedEntries=function(){var t=this.Fields();return t||(t=this.dict.context.obj([]),this.dict.set(o.Z.of("Fields"),t)),{Fields:t}},t.fromDict=function(e){return new t(e)},t.create=function(e){return new t(e.obj({Fields:[]}))},t}()},175:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(7638);const i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Ch",Kids:[]});return new e(r,t.register(r))},e}(r(1432).Z)},4424:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(7638),i=r(5268);const o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.prototype.addField=function(t){var e=this.normalizedEntries().Kids;null==e||e.push(t)},e.prototype.normalizedEntries=function(){var t=this.Kids();return t||(t=this.dict.context.obj([]),this.dict.set(i.Z.of("Kids"),t)),{Kids:t}},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({});return new e(r,t.register(r))},e}(r(9925).Z)},7566:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(7638),i=r(9e3),o=r(2571);const a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Btn",Ff:o.Ub.PushButton,Kids:[]});return new e(r,t.register(r))},e}(i.Z)},2770:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(7638),i=r(5268),o=r(9e3),a=r(2571),s=r(1732);const u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.prototype.setValue=function(t){if(!this.getOnValues().includes(t)&&t!==i.Z.of("Off"))throw new s.vM;this.dict.set(i.Z.of("V"),t);for(var e=this.getWidgets(),r=0,n=e.length;r<n;r++){var o=e[r],a=o.getOnValue()===t?t:i.Z.of("Off");o.setAppearanceState(a)}},e.prototype.getValue=function(){var t=this.V();return t instanceof i.Z?t:i.Z.of("Off")},e.prototype.getOnValues=function(){for(var t=this.getWidgets(),e=[],r=0,n=t.length;r<n;r++){var i=t[r].getOnValue();i&&e.push(i)}return e},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Btn",Ff:a.Ub.Radio,Kids:[]});return new e(r,t.register(r))},e}(o.Z)},5199:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(7638);const i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.fromDict=function(t,r){return new e(t,r)},e}(r(4435).Z)},4435:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n=r(7638),i=r(7802),o=r(5268),a=r(9925),s=r(5831),u=r(1732);const c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.prototype.FT=function(){var t=this.getInheritableAttribute(o.Z.of("FT"));return this.dict.context.lookup(t,o.Z)},e.prototype.getWidgets=function(){var t=this.Kids();if(!t)return[s.Z.fromDict(this.dict)];for(var e=new Array(t.size()),r=0,n=t.size();r<n;r++){var o=t.lookup(r,i.Z);e[r]=s.Z.fromDict(o)}return e},e.prototype.addWidget=function(t){this.normalizedEntries().Kids.push(t)},e.prototype.removeWidget=function(t){var e=this.Kids();if(e){if(t<0||t>e.size())throw new u.sE(t,0,e.size());e.remove(t)}else{if(0!==t)throw new u.sE(t,0,0);this.setKids([])}},e.prototype.normalizedEntries=function(){var t=this.Kids();return t||(t=this.dict.context.obj([this.ref]),this.dict.set(o.Z.of("Kids"),t)),{Kids:t}},e.fromDict=function(t,r){return new e(t,r)},e}(a.Z)},4657:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(7638),i=r(3225),o=r(4222),a=r(8158),s=r(5268);const u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.prototype.MaxLen=function(){var t=this.dict.lookup(s.Z.of("MaxLen"));if(t instanceof i.Z)return t},e.prototype.Q=function(){var t=this.dict.lookup(s.Z.of("Q"));if(t instanceof i.Z)return t},e.prototype.setMaxLength=function(t){this.dict.set(s.Z.of("MaxLen"),i.Z.of(t))},e.prototype.removeMaxLength=function(){this.dict.delete(s.Z.of("MaxLen"))},e.prototype.getMaxLength=function(){var t;return null===(t=this.MaxLen())||void 0===t?void 0:t.asNumber()},e.prototype.setQuadding=function(t){this.dict.set(s.Z.of("Q"),i.Z.of(t))},e.prototype.getQuadding=function(){var t;return null===(t=this.Q())||void 0===t?void 0:t.asNumber()},e.prototype.setValue=function(t){this.dict.set(s.Z.of("V"),t)},e.prototype.removeValue=function(){this.dict.delete(s.Z.of("V"))},e.prototype.getValue=function(){var t=this.V();if(t instanceof o.Z||t instanceof a.Z)return t},e.fromDict=function(t,r){return new e(t,r)},e.create=function(t){var r=t.obj({FT:"Tx",Kids:[]});return new e(r,t.register(r))},e}(r(4435).Z)},2571:(t,e,r)=>{"use strict";r.d(e,{PV:()=>n,Ub:()=>i,oD:()=>o,m0:()=>a});var n,i,o,a,s=function(t){return 1<<t};!function(t){t[t.ReadOnly=s(0)]="ReadOnly",t[t.Required=s(1)]="Required",t[t.NoExport=s(2)]="NoExport"}(n||(n={})),function(t){t[t.NoToggleToOff=s(14)]="NoToggleToOff",t[t.Radio=s(15)]="Radio",t[t.PushButton=s(16)]="PushButton",t[t.RadiosInUnison=s(25)]="RadiosInUnison"}(i||(i={})),function(t){t[t.Multiline=s(12)]="Multiline",t[t.Password=s(13)]="Password",t[t.FileSelect=s(20)]="FileSelect",t[t.DoNotSpellCheck=s(22)]="DoNotSpellCheck",t[t.DoNotScroll=s(23)]="DoNotScroll",t[t.Comb=s(24)]="Comb",t[t.RichText=s(25)]="RichText"}(o||(o={})),function(t){t[t.Combo=s(17)]="Combo",t[t.Edit=s(18)]="Edit",t[t.Sort=s(19)]="Sort",t[t.MultiSelect=s(21)]="MultiSelect",t[t.DoNotSpellCheck=s(22)]="DoNotSpellCheck",t[t.CommitOnSelChange=s(26)]="CommitOnSelChange"}(a||(a={}))},7244:(t,e,r)=>{"use strict";r.d(e,{Ei:()=>n.Z,sS:()=>i.Z,PS:()=>o.Z,Au:()=>a.Z,qg:()=>s.Z,_:()=>u.Z,Ym:()=>c.Z,uQ:()=>h.Z,Fs:()=>l.Z,_X:()=>f.Z,Ub:()=>d.Ub,m0:()=>d.m0,PV:()=>d.PV,oD:()=>d.oD,P_:()=>p.P}),r(9e3);var n=r(7749),i=(r(1432),r(8874)),o=(r(9925),r(8684)),a=r(175),s=r(4424),u=r(7566),c=r(2770),h=r(5199),l=r(4435),f=r(4657),d=r(2571),p=r(1376)},1376:(t,e,r)=>{"use strict";r.d(e,{P:()=>y,W:()=>b});var n=r(3225),i=r(7802),o=r(5268),a=r(4055),s=r(4911),u=r(4435),c=r(4424),h=r(5199),l=r(4657),f=r(7566),d=r(2770),p=r(7749),g=r(8874),v=r(175),m=r(2571),y=function(t){if(!t)return[];for(var e=[],r=0,n=t.size();r<n;r++){var o=t.get(r),a=t.lookup(r);o instanceof s.Z&&a instanceof i.Z&&e.push([b(a,o),o])}return e},b=function(t,e){return w(t)?c.Z.fromDict(t,e):k(t,e)},w=function(t){var e=t.lookup(o.Z.of("Kids"));if(e instanceof a.Z)for(var r=0,n=e.size();r<n;r++){var s=e.lookup(r);if(s instanceof i.Z&&s.has(o.Z.of("T")))return!0}return!1},k=function(t,e){var r=C(t,o.Z.of("FT")),n=t.context.lookup(r,o.Z);return n===o.Z.of("Btn")?x(t,e):n===o.Z.of("Ch")?Z(t,e):n===o.Z.of("Tx")?l.Z.fromDict(t,e):n===o.Z.of("Sig")?h.Z.fromDict(t,e):u.Z.fromDict(t,e)},x=function(t,e){var r,i=C(t,o.Z.of("Ff")),a=t.context.lookupMaybe(i,n.Z),s=null!==(r=null==a?void 0:a.asNumber())&&void 0!==r?r:0;return S(s,m.Ub.PushButton)?f.Z.fromDict(t,e):S(s,m.Ub.Radio)?d.Z.fromDict(t,e):p.Z.fromDict(t,e)},Z=function(t,e){var r,i=C(t,o.Z.of("Ff")),a=t.context.lookupMaybe(i,n.Z),s=null!==(r=null==a?void 0:a.asNumber())&&void 0!==r?r:0;return S(s,m.m0.Combo)?g.Z.fromDict(t,e):v.Z.fromDict(t,e)},S=function(t,e){return 0!=(t&e)},C=function(t,e){var r;return F(t,(function(t){r||(r=t.get(e))})),r},F=function(t,e){e(t);var r=t.lookupMaybe(o.Z.of("Parent"),i.Z);r&&F(r,e)}},7280:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(5268),i=r(3225),o=r(4055),a=r(8158),s=r(4222);const u=function(){function t(t){this.dict=t}return t.prototype.R=function(){var t=this.dict.lookup(n.Z.of("R"));if(t instanceof i.Z)return t},t.prototype.BC=function(){var t=this.dict.lookup(n.Z.of("BC"));if(t instanceof o.Z)return t},t.prototype.BG=function(){var t=this.dict.lookup(n.Z.of("BG"));if(t instanceof o.Z)return t},t.prototype.CA=function(){var t=this.dict.lookup(n.Z.of("CA"));if(t instanceof a.Z||t instanceof s.Z)return t},t.prototype.RC=function(){var t=this.dict.lookup(n.Z.of("RC"));if(t instanceof a.Z||t instanceof s.Z)return t},t.prototype.AC=function(){var t=this.dict.lookup(n.Z.of("AC"));if(t instanceof a.Z||t instanceof s.Z)return t},t.prototype.getRotation=function(){var t;return null===(t=this.R())||void 0===t?void 0:t.asNumber()},t.prototype.getBorderColor=function(){var t=this.BC();if(t){for(var e=[],r=0,n=null==t?void 0:t.size();r<n;r++){var o=t.get(r);o instanceof i.Z&&e.push(o.asNumber())}return e}},t.prototype.getBackgroundColor=function(){var t=this.BG();if(t){for(var e=[],r=0,n=null==t?void 0:t.size();r<n;r++){var o=t.get(r);o instanceof i.Z&&e.push(o.asNumber())}return e}},t.prototype.getCaptions=function(){var t=this.CA(),e=this.RC(),r=this.AC();return{normal:null==t?void 0:t.decodeText(),rollover:null==e?void 0:e.decodeText(),down:null==r?void 0:r.decodeText()}},t.prototype.setRotation=function(t){var e=this.dict.context.obj(t);this.dict.set(n.Z.of("R"),e)},t.prototype.setBorderColor=function(t){var e=this.dict.context.obj(t);this.dict.set(n.Z.of("BC"),e)},t.prototype.setBackgroundColor=function(t){var e=this.dict.context.obj(t);this.dict.set(n.Z.of("BG"),e)},t.prototype.setCaptions=function(t){var e=a.Z.fromText(t.normal);if(this.dict.set(n.Z.of("CA"),e),t.rollover){var r=a.Z.fromText(t.rollover);this.dict.set(n.Z.of("RC"),r)}else this.dict.delete(n.Z.of("RC"));if(t.down){var i=a.Z.fromText(t.down);this.dict.set(n.Z.of("AC"),i)}else this.dict.delete(n.Z.of("AC"))},t.fromDict=function(e){return new t(e)},t}()},6904:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(5268),i=r(3225);const o=function(){function t(t){this.dict=t}return t.prototype.W=function(){var t=this.dict.lookup(n.Z.of("W"));if(t instanceof i.Z)return t},t.prototype.getWidth=function(){var t,e;return null!==(e=null===(t=this.W())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:1},t.prototype.setWidth=function(t){var e=this.dict.context.obj(t);this.dict.set(n.Z.of("W"),e)},t.fromDict=function(e){return new t(e)},t}()},8571:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n=r(7802),i=r(5268),o=r(6962),a=r(4055),s=r(4911),u=r(3225);const c=function(){function t(t){this.dict=t}return t.prototype.Rect=function(){return this.dict.lookup(i.Z.of("Rect"),a.Z)},t.prototype.AP=function(){return this.dict.lookupMaybe(i.Z.of("AP"),n.Z)},t.prototype.F=function(){var t=this.dict.lookup(i.Z.of("F"));return this.dict.context.lookupMaybe(t,u.Z)},t.prototype.getRectangle=function(){var t,e=this.Rect();return null!==(t=null==e?void 0:e.asRectangle())&&void 0!==t?t:{x:0,y:0,width:0,height:0}},t.prototype.setRectangle=function(t){var e=t.x,r=t.y,n=t.width,o=t.height,a=this.dict.context.obj([e,r,e+n,r+o]);this.dict.set(i.Z.of("Rect"),a)},t.prototype.getAppearanceState=function(){var t=this.dict.lookup(i.Z.of("AS"));if(t instanceof i.Z)return t},t.prototype.setAppearanceState=function(t){this.dict.set(i.Z.of("AS"),t)},t.prototype.setAppearances=function(t){this.dict.set(i.Z.of("AP"),t)},t.prototype.ensureAP=function(){var t=this.AP();return t||(t=this.dict.context.obj({}),this.dict.set(i.Z.of("AP"),t)),t},t.prototype.getNormalAppearance=function(){var t=this.ensureAP().get(i.Z.of("N"));if(t instanceof s.Z||t instanceof n.Z)return t;throw new Error("Unexpected N type: "+(null==t?void 0:t.constructor.name))},t.prototype.setNormalAppearance=function(t){this.ensureAP().set(i.Z.of("N"),t)},t.prototype.setRolloverAppearance=function(t){this.ensureAP().set(i.Z.of("R"),t)},t.prototype.setDownAppearance=function(t){this.ensureAP().set(i.Z.of("D"),t)},t.prototype.removeRolloverAppearance=function(){var t=this.AP();null==t||t.delete(i.Z.of("R"))},t.prototype.removeDownAppearance=function(){var t=this.AP();null==t||t.delete(i.Z.of("D"))},t.prototype.getAppearances=function(){var t=this.AP();if(t)return{normal:t.lookup(i.Z.of("N"),n.Z,o.Z),rollover:t.lookupMaybe(i.Z.of("R"),n.Z,o.Z),down:t.lookupMaybe(i.Z.of("D"),n.Z,o.Z)}},t.prototype.getFlags=function(){var t,e;return null!==(e=null===(t=this.F())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:0},t.prototype.setFlags=function(t){this.dict.set(i.Z.of("F"),u.Z.of(t))},t.prototype.hasFlag=function(t){return 0!=(this.getFlags()&t)},t.prototype.setFlag=function(t){var e=this.getFlags();this.setFlags(e|t)},t.prototype.clearFlag=function(t){var e=this.getFlags();this.setFlags(e&~t)},t.prototype.setFlagTo=function(t,e){e?this.setFlag(t):this.clearFlag(t)},t.fromDict=function(e){return new t(e)},t}()},5831:(t,e,r)=>{"use strict";r.d(e,{Z:()=>f});var n=r(7638),i=r(7802),o=r(5268),a=r(4911),s=r(4222),u=r(8158),c=r(6904),h=r(8571),l=r(7280);const f=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.prototype.MK=function(){var t=this.dict.lookup(o.Z.of("MK"));if(t instanceof i.Z)return t},e.prototype.BS=function(){var t=this.dict.lookup(o.Z.of("BS"));if(t instanceof i.Z)return t},e.prototype.DA=function(){var t=this.dict.lookup(o.Z.of("DA"));if(t instanceof s.Z||t instanceof u.Z)return t},e.prototype.P=function(){var t=this.dict.get(o.Z.of("P"));if(t instanceof a.Z)return t},e.prototype.setDefaultAppearance=function(t){this.dict.set(o.Z.of("DA"),s.Z.of(t))},e.prototype.getDefaultAppearance=function(){var t=this.DA();return t instanceof u.Z?t.decodeText():null==t?void 0:t.asString()},e.prototype.getAppearanceCharacteristics=function(){var t=this.MK();if(t)return l.Z.fromDict(t)},e.prototype.getOrCreateAppearanceCharacteristics=function(){var t=this.MK();if(t)return l.Z.fromDict(t);var e=l.Z.fromDict(this.dict.context.obj({}));return this.dict.set(o.Z.of("MK"),e.dict),e},e.prototype.getBorderStyle=function(){var t=this.BS();if(t)return c.Z.fromDict(t)},e.prototype.getOrCreateBorderStyle=function(){var t=this.BS();if(t)return c.Z.fromDict(t);var e=c.Z.fromDict(this.dict.context.obj({}));return this.dict.set(o.Z.of("BS"),e.dict),e},e.prototype.getOnValue=function(){var t,e=null===(t=this.getAppearances())||void 0===t?void 0:t.normal;if(e instanceof i.Z)for(var r=e.keys(),n=0,a=r.length;n<a;n++){var s=r[n];if(s!==o.Z.of("Off"))return s}},e.fromDict=function(t){return new e(t)},e.create=function(t,r){return new e(t.obj({Type:"Annot",Subtype:"Widget",Rect:[0,0,0,0],Parent:r}))},e}(h.Z)},1265:(t,e,r)=>{"use strict";r.d(e,{T:()=>n});var n,i=function(t){return 1<<t};!function(t){t[t.Invisible=i(0)]="Invisible",t[t.Hidden=i(1)]="Hidden",t[t.Print=i(2)]="Print",t[t.NoZoom=i(3)]="NoZoom",t[t.NoRotate=i(4)]="NoRotate",t[t.NoView=i(5)]="NoView",t[t.ReadOnly=i(6)]="ReadOnly",t[t.Locked=i(7)]="Locked",t[t.ToggleNoView=i(8)]="ToggleNoView",t[t.LockedContents=i(9)]="LockedContents"}(n||(n={}))},606:(t,e,r)=>{"use strict";r.d(e,{ci:()=>n.Z,TV:()=>i.T}),r(8571);var n=r(5831),i=(r(7280),r(1265))},95:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(4911),i=r(5842),o=r(1795);const a=function(){function t(t){this.subsections=t?[[t]]:[],this.chunkIdx=0,this.chunkLength=t?1:0}return t.prototype.addEntry=function(t,e){this.append({ref:t,offset:e,deleted:!1})},t.prototype.addDeletedEntry=function(t,e){this.append({ref:t,offset:e,deleted:!0})},t.prototype.toString=function(){for(var t="xref\n",e=0,r=this.subsections.length;e<r;e++){var n=this.subsections[e];t+=n[0].ref.objectNumber+" "+n.length+"\n";for(var i=0,a=n.length;i<a;i++){var s=n[i];t+=(0,o.Sk)(String(s.offset),10,"0"),t+=" ",t+=(0,o.Sk)(String(s.ref.generationNumber),5,"0"),t+=" ",t+=s.deleted?"f":"n",t+=" \n"}}return t},t.prototype.sizeInBytes=function(){for(var t=5,e=0,r=this.subsections.length;e<r;e++){var n=this.subsections[e],i=n.length,o=n[0];t+=2,t+=String(o.ref.objectNumber).length,t+=String(i).length,t+=20*i}return t},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=i.Z.x,t[e++]=i.Z.r,t[e++]=i.Z.e,t[e++]=i.Z.f,t[e++]=i.Z.Newline,(e+=this.copySubsectionsIntoBuffer(this.subsections,t,e))-r},t.prototype.copySubsectionsIntoBuffer=function(t,e,r){for(var n=r,a=t.length,s=0;s<a;s++){var u=this.subsections[s],c=String(u[0].ref.objectNumber);r+=(0,o.C1)(c,e,r),e[r++]=i.Z.Space;var h=String(u.length);r+=(0,o.C1)(h,e,r),e[r++]=i.Z.Newline,r+=this.copyEntriesIntoBuffer(u,e,r)}return r-n},t.prototype.copyEntriesIntoBuffer=function(t,e,r){for(var n=t.length,a=0;a<n;a++){var s=t[a],u=(0,o.Sk)(String(s.offset),10,"0");r+=(0,o.C1)(u,e,r),e[r++]=i.Z.Space;var c=(0,o.Sk)(String(s.ref.generationNumber),5,"0");r+=(0,o.C1)(c,e,r),e[r++]=i.Z.Space,e[r++]=s.deleted?i.Z.f:i.Z.n,e[r++]=i.Z.Space,e[r++]=i.Z.Newline}return 20*n},t.prototype.append=function(t){if(0===this.chunkLength)return this.subsections.push([t]),this.chunkIdx=0,void(this.chunkLength=1);var e=this.subsections[this.chunkIdx],r=e[this.chunkLength-1];t.ref.objectNumber-r.ref.objectNumber>1?(this.subsections.push([t]),this.chunkIdx+=1,this.chunkLength=1):(e.push(t),this.chunkLength+=1)},t.create=function(){return new t({ref:n.Z.of(0,65535),offset:0,deleted:!0})},t.createEmpty=function(){return new t},t}()},1617:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(5842),i=r(1795);const o=function(){function t(t,e){this.major=String(t),this.minor=String(e)}return t.prototype.toString=function(){var t=(0,i.D_)(129);return"%PDF-"+this.major+"."+this.minor+"\n%"+t+t+t+t},t.prototype.sizeInBytes=function(){return 12+this.major.length+this.minor.length},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=n.Z.Percent,t[e++]=n.Z.P,t[e++]=n.Z.D,t[e++]=n.Z.F,t[e++]=n.Z.Dash,e+=(0,i.C1)(this.major,t,e),t[e++]=n.Z.Period,e+=(0,i.C1)(this.minor,t,e),t[e++]=n.Z.Newline,t[e++]=n.Z.Percent,t[e++]=129,t[e++]=129,t[e++]=129,t[e++]=129,e-r},t.forVersion=function(e,r){return new t(e,r)},t}()},9176:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(5842),i=r(1795);const o=function(){function t(t){this.lastXRefOffset=String(t)}return t.prototype.toString=function(){return"startxref\n"+this.lastXRefOffset+"\n%%EOF"},t.prototype.sizeInBytes=function(){return 16+this.lastXRefOffset.length},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=n.Z.s,t[e++]=n.Z.t,t[e++]=n.Z.a,t[e++]=n.Z.r,t[e++]=n.Z.t,t[e++]=n.Z.x,t[e++]=n.Z.r,t[e++]=n.Z.e,t[e++]=n.Z.f,t[e++]=n.Z.Newline,e+=(0,i.C1)(this.lastXRefOffset,t,e),t[e++]=n.Z.Newline,t[e++]=n.Z.Percent,t[e++]=n.Z.Percent,t[e++]=n.Z.E,t[e++]=n.Z.O,t[e++]=n.Z.F,e-r},t.forLastCrossRefSectionOffset=function(e){return new t(e)},t}()},8799:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(5842);const i=function(){function t(t){this.dict=t}return t.prototype.toString=function(){return"trailer\n"+this.dict.toString()},t.prototype.sizeInBytes=function(){return 8+this.dict.sizeInBytes()},t.prototype.copyBytesInto=function(t,e){var r=e;return t[e++]=n.Z.t,t[e++]=n.Z.r,t[e++]=n.Z.a,t[e++]=n.Z.i,t[e++]=n.Z.l,t[e++]=n.Z.e,t[e++]=n.Z.r,t[e++]=n.Z.Newline,(e+=this.dict.copyBytesInto(t,e))-r},t.of=function(e){return new t(e)},t}()},1078:(t,e,r)=>{"use strict";r.d(e,{L:()=>o});var n=r(1795),i=r(5235),o=function(t,e){for(var r=new Array(t.length),n=0,i=t.length;n<i;n++){var o=t[n],h=s(u(e(o))),l=s.apply(void 0,o.codePoints.map(c));r[n]=[h,l]}return a(r)},a=function(t){return"/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange\n"+t.length+" beginbfchar\n"+t.map((function(t){return t[0]+" "+t[1]})).join("\n")+"\nendbfchar\nendcmap\nCMapName currentdict /CMap defineresource pop\nend\nend"},s=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return"<"+t.join("")+">"},u=function(t){return(0,n.CK)(t,4)},c=function(t){if((0,i.yo)(t))return u(t);if((0,i.pY)(t)){var e=(0,i.D1)(t),r=(0,i.$O)(t);return""+u(e)+u(r)}var o=(0,n.zv)(t);throw new Error("0x"+o+" is not a valid UTF-8 or UTF-16 codepoint.")}},6262:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n=r(7638),i=r(1078),o=r(8422),a=r(8158),s=r(4222),u=r(1795);const c=function(){function t(t,e,r,n){var i=this;this.allGlyphsInFontSortedById=function(){for(var t=new Array(i.font.characterSet.length),e=0,r=t.length;e<r;e++){var n=i.font.characterSet[e];t[e]=i.font.glyphForCodePoint(n)}return(0,u.PF)(t.sort(u.Yj),(function(t){return t.id}))},this.font=t,this.scale=1e3/this.font.unitsPerEm,this.fontData=e,this.fontName=this.font.postscriptName||"Font",this.customName=r,this.fontFeatures=n,this.baseFontName="",this.glyphCache=u.Ct.populatedBy(this.allGlyphsInFontSortedById)}return t.for=function(e,r,i,o){return(0,n.mG)(this,void 0,void 0,(function(){return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return[4,e.create(r)];case 1:return[2,new t(n.sent(),r,i,o)]}}))}))},t.prototype.encodeText=function(t){for(var e=this.font.layout(t,this.fontFeatures).glyphs,r=new Array(e.length),n=0,i=e.length;n<i;n++)r[n]=(0,u.CK)(e[n].id,4);return a.Z.of(r.join(""))},t.prototype.widthOfTextAtSize=function(t,e){for(var r=this.font.layout(t,this.fontFeatures).glyphs,n=0,i=0,o=r.length;i<o;i++)n+=r[i].advanceWidth*this.scale;return n*(e/1e3)},t.prototype.heightOfFontAtSize=function(t,e){void 0===e&&(e={});var r=e.descender,n=void 0===r||r,i=this.font,o=i.ascent,a=i.descent,s=i.bbox,u=(o||s.maxY)*this.scale-(a||s.minY)*this.scale;return n||(u-=Math.abs(a)||0),u/1e3*t},t.prototype.sizeOfFontAtHeight=function(t){var e=this.font,r=e.ascent,n=e.descent,i=e.bbox;return 1e3*t/((r||i.maxY)*this.scale-(n||i.minY)*this.scale)},t.prototype.embedIntoContext=function(t,e){return this.baseFontName=this.customName||(0,u.si)(this.fontName),this.embedFontDict(t,e)},t.prototype.embedFontDict=function(t,e){return(0,n.mG)(this,void 0,void 0,(function(){var r,i,o;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return[4,this.embedCIDFontDict(t)];case 1:return r=n.sent(),i=this.embedUnicodeCmap(t),o=t.obj({Type:"Font",Subtype:"Type0",BaseFont:this.baseFontName,Encoding:"Identity-H",DescendantFonts:[r],ToUnicode:i}),e?(t.assign(e,o),[2,e]):[2,t.register(o)]}}))}))},t.prototype.isCFF=function(){return this.font.cff},t.prototype.embedCIDFontDict=function(t){return(0,n.mG)(this,void 0,void 0,(function(){var e,r;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return[4,this.embedFontDescriptor(t)];case 1:return e=n.sent(),r=t.obj({Type:"Font",Subtype:this.isCFF()?"CIDFontType0":"CIDFontType2",CIDToGIDMap:"Identity",BaseFont:this.baseFontName,CIDSystemInfo:{Registry:s.Z.of("Adobe"),Ordering:s.Z.of("Identity"),Supplement:0},FontDescriptor:e,W:this.computeWidths()}),[2,t.register(r)]}}))}))},t.prototype.embedFontDescriptor=function(t){return(0,n.mG)(this,void 0,void 0,(function(){var e,r,i,a,s,u,c,h,l,f,d,p,g,v,m;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return[4,this.embedFontStream(t)];case 1:return e=n.sent(),r=this.scale,i=this.font,a=i.italicAngle,s=i.ascent,u=i.descent,c=i.capHeight,h=i.xHeight,l=this.font.bbox,f=l.minX,d=l.minY,p=l.maxX,g=l.maxY,v=t.obj(((m={Type:"FontDescriptor",FontName:this.baseFontName,Flags:(0,o.q)(this.font),FontBBox:[f*r,d*r,p*r,g*r],ItalicAngle:a,Ascent:s*r,Descent:u*r,CapHeight:(c||s)*r,XHeight:(h||0)*r,StemV:0})[this.isCFF()?"FontFile3":"FontFile2"]=e,m)),[2,t.register(v)]}}))}))},t.prototype.serializeFont=function(){return(0,n.mG)(this,void 0,void 0,(function(){return(0,n.Jh)(this,(function(t){return[2,this.fontData]}))}))},t.prototype.embedFontStream=function(t){return(0,n.mG)(this,void 0,void 0,(function(){var e,r,i;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return i=(r=t).flateStream,[4,this.serializeFont()];case 1:return e=i.apply(r,[n.sent(),{Subtype:this.isCFF()?"CIDFontType0C":void 0}]),[2,t.register(e)]}}))}))},t.prototype.embedUnicodeCmap=function(t){var e=(0,i.L)(this.glyphCache.access(),this.glyphId.bind(this)),r=t.flateStream(e);return t.register(r)},t.prototype.glyphId=function(t){return t?t.id:-1},t.prototype.computeWidths=function(){for(var t=this.glyphCache.access(),e=[],r=[],n=0,i=t.length;n<i;n++){var o=t[n],a=t[n-1],s=this.glyphId(o),u=this.glyphId(a);0===n?e.push(s):s-u!=1&&(e.push(r),e.push(s),r=[]),r.push(o.advanceWidth*this.scale)}return e.push(r),e},t}()},2834:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(7638),i=r(6262),o=r(8158),a=r(1795);const s=function(t){function e(e,r,n,i){var o=t.call(this,e,r,n,i)||this;return o.subset=o.font.createSubset(),o.glyphs=[],o.glyphCache=a.Ct.populatedBy((function(){return o.glyphs})),o.glyphIdMap=new Map,o}return(0,n.ZT)(e,t),e.for=function(t,r,i,o){return(0,n.mG)(this,void 0,void 0,(function(){return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return[4,t.create(r)];case 1:return[2,new e(n.sent(),r,i,o)]}}))}))},e.prototype.encodeText=function(t){for(var e=this.font.layout(t,this.fontFeatures).glyphs,r=new Array(e.length),n=0,i=e.length;n<i;n++){var s=e[n],u=this.subset.includeGlyph(s);this.glyphs[u-1]=s,this.glyphIdMap.set(s.id,u),r[n]=(0,a.CK)(u,4)}return this.glyphCache.invalidate(),o.Z.of(r.join(""))},e.prototype.isCFF=function(){return this.subset.cff},e.prototype.glyphId=function(t){return t?this.glyphIdMap.get(t.id):-1},e.prototype.serializeFont=function(){var t=this;return new Promise((function(e,r){var n=[];t.subset.encodeStream().on("data",(function(t){return n.push(t)})).on("end",(function(){return e((0,a.Jm)(n))})).on("error",(function(t){return r(t)}))}))},e}(i.Z)},4634:(t,e,r)=>{"use strict";r.d(e,{J:()=>n,Z:()=>s});var n,i=r(7638),o=r(4222),a=r(8158);!function(t){t.Source="Source",t.Data="Data",t.Alternative="Alternative",t.Supplement="Supplement",t.EncryptedPayload="EncryptedPayload",t.FormData="EncryptedPayload",t.Schema="Schema",t.Unspecified="Unspecified"}(n||(n={}));const s=function(){function t(t,e,r){void 0===r&&(r={}),this.fileData=t,this.fileName=e,this.options=r}return t.for=function(e,r,n){return void 0===n&&(n={}),new t(e,r,n)},t.prototype.embedIntoContext=function(t,e){return(0,i.mG)(this,void 0,void 0,(function(){var r,n,s,u,c,h,l,f,d;return(0,i.Jh)(this,(function(i){return r=this.options,n=r.mimeType,s=r.description,u=r.creationDate,c=r.modificationDate,h=r.afRelationship,l=t.flateStream(this.fileData,{Type:"EmbeddedFile",Subtype:null!=n?n:void 0,Params:{Size:this.fileData.length,CreationDate:u?o.Z.fromDate(u):void 0,ModDate:c?o.Z.fromDate(c):void 0}}),f=t.register(l),d=t.obj({Type:"Filespec",F:o.Z.of(this.fileName),UF:a.Z.fromText(this.fileName),EF:{F:f},Desc:s?a.Z.fromText(s):void 0,AFRelationship:null!=h?h:void 0}),e?(t.assign(e,d),[2,e]):[2,t.register(d)]}))}))},t}()},8422:(t,e,r)=>{"use strict";r.d(e,{q:()=>n});var n=function(t){var e,r,n,i=t["OS/2"]?t["OS/2"].sFamilyClass:0;return e={fixedPitch:t.post.isFixedPitch,serif:1<=i&&i<=7,symbolic:!0,script:10===i,italic:t.head.macStyle.italic},r=0,n=function(t){r|=1<<t-1},e.fixedPitch&&n(1),e.serif&&n(2),e.symbolic&&n(3),e.script&&n(4),e.nonsymbolic&&n(6),e.italic&&n(7),e.allCap&&n(17),e.smallCap&&n(18),e.forceBold&&n(19),r}},2717:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(7638),i=r(8158);const o=function(){function t(t,e){this.script=t,this.scriptName=e}return t.for=function(e,r){return new t(e,r)},t.prototype.embedIntoContext=function(t,e){return(0,n.mG)(this,void 0,void 0,(function(){var r;return(0,n.Jh)(this,(function(n){return r=t.obj({Type:"Action",S:"JavaScript",JS:i.Z.fromText(this.script)}),e?(t.assign(e,r),[2,e]):[2,t.register(r)]}))}))},t}()},3194:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n,i=r(7638),o=[65472,65473,65474,65475,65477,65478,65479,65480,65481,65482,65483,65484,65485,65486,65487];!function(t){t.DeviceGray="DeviceGray",t.DeviceRGB="DeviceRGB",t.DeviceCMYK="DeviceCMYK"}(n||(n={}));var a={1:n.DeviceGray,3:n.DeviceRGB,4:n.DeviceCMYK};const s=function(){function t(t,e,r,n,i){this.imageData=t,this.bitsPerComponent=e,this.width=r,this.height=n,this.colorSpace=i}return t.for=function(e){return(0,i.mG)(this,void 0,void 0,(function(){var r,n,s,u,c,h,l,f;return(0,i.Jh)(this,(function(i){if(65496!==(r=new DataView(e.buffer)).getUint16(0))throw new Error("SOI not found in JPEG");for(n=2;n<r.byteLength&&(s=r.getUint16(n),n+=2,!o.includes(s));)n+=r.getUint16(n);if(!o.includes(s))throw new Error("Invalid JPEG");if(n+=2,u=r.getUint8(n++),c=r.getUint16(n),n+=2,h=r.getUint16(n),n+=2,l=r.getUint8(n++),!(f=a[l]))throw new Error("Unknown JPEG channel.");return[2,new t(e,u,h,c,f)]}))}))},t.prototype.embedIntoContext=function(t,e){return(0,i.mG)(this,void 0,void 0,(function(){var r;return(0,i.Jh)(this,(function(i){return r=t.stream(this.imageData,{Type:"XObject",Subtype:"Image",BitsPerComponent:this.bitsPerComponent,Width:this.width,Height:this.height,ColorSpace:this.colorSpace,Filter:"DCTDecode",Decode:this.colorSpace===n.DeviceCMYK?[1,0,1,0,1,0,1,0]:void 0}),e?(t.assign(e,r),[2,e]):[2,t.register(r)]}))}))},t}()},7962:(t,e,r)=>{"use strict";r.d(e,{Z:()=>f});var n=r(7638),i=r(1732),o=r(3225),a=r(351),s=r(6962),u=r(5386),c=r(9153),h=r(5842),l=r(1795);const f=function(){function t(t,e,r){this.page=t;var n=null!=e?e:function(t){var e=t.MediaBox();return{left:0,bottom:0,right:e.lookup(2,o.Z).asNumber()-e.lookup(0,o.Z).asNumber(),top:e.lookup(3,o.Z).asNumber()-e.lookup(1,o.Z).asNumber()}}(t);this.width=n.right-n.left,this.height=n.top-n.bottom,this.boundingBox=n,this.transformationMatrix=null!=r?r:function(t){return[1,0,0,1,-t.left,-t.bottom]}(n)}return t.for=function(e,r,i){return(0,n.mG)(this,void 0,void 0,(function(){return(0,n.Jh)(this,(function(n){return[2,new t(e,r,i)]}))}))},t.prototype.embedIntoContext=function(t,e){return(0,n.mG)(this,void 0,void 0,(function(){var r,o,a,s,u,c,h,l,f,d;return(0,n.Jh)(this,(function(n){if(r=this.page.normalizedEntries(),o=r.Contents,a=r.Resources,!o)throw new i.SR;return s=this.decodeContents(o),u=this.boundingBox,c=u.left,h=u.bottom,l=u.right,f=u.top,d=t.stream(s,{Type:"XObject",Subtype:"Form",FormType:1,BBox:[c,h,l,f],Matrix:this.transformationMatrix,Resources:a}),e?(t.assign(e,d),[2,e]):[2,t.register(d)]}))}))},t.prototype.decodeContents=function(t){for(var e=Uint8Array.of(h.Z.Newline),r=[],n=0,o=t.size();n<o;n++){var f=t.lookup(n,s.Z),d=void 0;if(f instanceof a.Z)d=(0,u.y)(f).decode();else{if(!(f instanceof c.Z))throw new i.NP(f);d=f.getUnencodedContents()}r.push(d,e)}return l.M5.apply(void 0,r)},t}()},6002:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(7638),i=r(8357);const o=function(){function t(t){this.image=t,this.bitsPerComponent=t.bitsPerComponent,this.width=t.width,this.height=t.height,this.colorSpace="DeviceRGB"}return t.for=function(e){return(0,n.mG)(this,void 0,void 0,(function(){return(0,n.Jh)(this,(function(r){return[2,new t(i.y.load(e))]}))}))},t.prototype.embedIntoContext=function(t,e){return(0,n.mG)(this,void 0,void 0,(function(){var r,i;return(0,n.Jh)(this,(function(n){return r=this.embedAlphaChannel(t),i=t.flateStream(this.image.rgbChannel,{Type:"XObject",Subtype:"Image",BitsPerComponent:this.image.bitsPerComponent,Width:this.image.width,Height:this.image.height,ColorSpace:this.colorSpace,SMask:r}),e?(t.assign(e,i),[2,e]):[2,t.register(i)]}))}))},t.prototype.embedAlphaChannel=function(t){if(this.image.alphaChannel){var e=t.flateStream(this.image.alphaChannel,{Type:"XObject",Subtype:"Image",Height:this.image.height,Width:this.image.width,BitsPerComponent:this.image.bitsPerComponent,ColorSpace:"DeviceGray",Decode:[0,1]});return t.register(e)}},t}()},3783:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(6576),i=r(8158),o=r(1795);const a=function(){function t(t,e){this.encoding=t===n.S4.ZapfDingbats?n.e$.ZapfDingbats:t===n.S4.Symbol?n.e$.Symbol:n.e$.WinAnsi,this.font=n.Zx.load(t),this.fontName=this.font.FontName,this.customName=e}return t.prototype.encodeText=function(t){for(var e=this.encodeTextAsGlyphs(t),r=new Array(e.length),n=0,a=e.length;n<a;n++)r[n]=(0,o.zv)(e[n].code);return i.Z.of(r.join(""))},t.prototype.widthOfTextAtSize=function(t,e){for(var r=this.encodeTextAsGlyphs(t),n=0,i=0,o=r.length;i<o;i++){var a=r[i].name,s=(r[i+1]||{}).name,u=this.font.getXAxisKerningForPair(a,s)||0;n+=this.widthOfGlyph(a)+u}return n*(e/1e3)},t.prototype.heightOfFontAtSize=function(t,e){void 0===e&&(e={});var r=e.descender,n=void 0===r||r,i=this.font,o=i.Ascender,a=i.Descender,s=i.FontBBox,u=(o||s[3])-(a||s[1]);return n||(u+=a||0),u/1e3*t},t.prototype.sizeOfFontAtHeight=function(t){var e=this.font,r=e.Ascender,n=e.Descender,i=e.FontBBox;return 1e3*t/((r||i[3])-(n||i[1]))},t.prototype.embedIntoContext=function(t,e){var r=t.obj({Type:"Font",Subtype:"Type1",BaseFont:this.customName||this.fontName,Encoding:this.encoding===n.e$.WinAnsi?"WinAnsiEncoding":void 0});return e?(t.assign(e,r),e):t.register(r)},t.prototype.widthOfGlyph=function(t){return this.font.getWidthOfGlyph(t)||250},t.prototype.encodeTextAsGlyphs=function(t){for(var e=Array.from(t),r=new Array(e.length),n=0,i=e.length;n<i;n++){var a=(0,o.yq)(e[n]);r[n]=this.encoding.encodeUnicodeCodePoint(a)}return r},t.for=function(e,r){return new t(e,r)},t}()},1732:(t,e,r)=>{"use strict";r.d(e,{iQ:()=>a,Gp:()=>s,VX:()=>u,l:()=>c,aj:()=>h,SR:()=>l,NP:()=>f,qX:()=>d,sV:()=>p,dm:()=>g,Y8:()=>v,bg:()=>m,sE:()=>y,vM:()=>b,TC:()=>w,_z:()=>k,Iu:()=>x,RS:()=>Z,ze:()=>C,EX:()=>F,Ke:()=>T,Sh:()=>A,or:()=>O,Dr:()=>R,ku:()=>z,uu:()=>P});var n,i=r(7638),o=r(1795),a=function(t){function e(e,r){var n="Method "+e+"."+r+"() not implemented";return t.call(this,n)||this}return(0,i.ZT)(e,t),e}(Error),s=function(t){function e(e){var r="Cannot construct "+e+" - it has a private constructor";return t.call(this,r)||this}return(0,i.ZT)(e,t),e}(Error),u=function(t){function e(e,r){var n=function(t){var e,r;return null!==(e=null==t?void 0:t.name)&&void 0!==e?e:null===(r=null==t?void 0:t.constructor)||void 0===r?void 0:r.name},i="Expected instance of "+(Array.isArray(e)?e.map(n):[n(e)]).join(" or ")+", but got instance of "+(r?n(r):r);return t.call(this,i)||this}return(0,i.ZT)(e,t),e}(Error),c=function(t){function e(e){var r=e+" stream encoding not supported";return t.call(this,r)||this}return(0,i.ZT)(e,t),e}(Error),h=function(t){function e(e,r){var n="Cannot call "+e+"."+r+"() more than once";return t.call(this,n)||this}return(0,i.ZT)(e,t),e}(Error),l=(n=Error,(0,i.ZT)((function(t){var e="Missing catalog (ref="+t+")";return n.call(this,e)||this}),n),function(t){function e(){return t.call(this,"Can't embed page with missing Contents")||this}return(0,i.ZT)(e,t),e}(Error)),f=function(t){function e(e){var r,n,i,o="Unrecognized stream type: "+(null!==(i=null!==(n=null===(r=null==e?void 0:e.contructor)||void 0===r?void 0:r.name)&&void 0!==n?n:null==e?void 0:e.name)&&void 0!==i?i:e);return t.call(this,o)||this}return(0,i.ZT)(e,t),e}(Error),d=function(t){function e(){return t.call(this,"Found mismatched contexts while embedding pages. All pages in the array passed to `PDFDocument.embedPages()` must be from the same document.")||this}return(0,i.ZT)(e,t),e}(Error),p=function(t){function e(e){var r="Attempted to convert PDFArray with "+e+" elements to rectangle, but must have exactly 4 elements.";return t.call(this,r)||this}return(0,i.ZT)(e,t),e}(Error),g=function(t){function e(e){var r='Attempted to convert "'+e+'" to a date, but it does not match the PDF date string format.';return t.call(this,r)||this}return(0,i.ZT)(e,t),e}(Error),v=function(t){function e(e,r){var n="Invalid targetIndex specified: targetIndex="+e+" must be less than Count="+r;return t.call(this,n)||this}return(0,i.ZT)(e,t),e}(Error),m=function(t){function e(e,r){var n="Failed to "+r+" at targetIndex="+e+" due to corrupt page tree: It is likely that one or more 'Count' entries are invalid";return t.call(this,n)||this}return(0,i.ZT)(e,t),e}(Error),y=function(t){function e(e,r,n){var i="index should be at least "+r+" and at most "+n+", but was actually "+e;return t.call(this,i)||this}return(0,i.ZT)(e,t),e}(Error),b=function(t){function e(){return t.call(this,"Attempted to set invalid field value")||this}return(0,i.ZT)(e,t),e}(Error),w=function(t){function e(){return t.call(this,"Attempted to select multiple values for single-select field")||this}return(0,i.ZT)(e,t),e}(Error),k=function(t){function e(e){var r="No /DA (default appearance) entry found for field: "+e;return t.call(this,r)||this}return(0,i.ZT)(e,t),e}(Error),x=function(t){function e(e){var r="No Tf operator found for DA of field: "+e;return t.call(this,r)||this}return(0,i.ZT)(e,t),e}(Error),Z=function(t){function e(e,r){var n="Failed to parse number (line:"+e.line+" col:"+e.column+" offset="+e.offset+'): "'+r+'"';return t.call(this,n)||this}return(0,i.ZT)(e,t),e}(Error),S=function(t){function e(e,r){var n="Failed to parse PDF document (line:"+e.line+" col:"+e.column+" offset="+e.offset+"): "+r;return t.call(this,n)||this}return(0,i.ZT)(e,t),e}(Error),C=function(t){function e(e,r,n){var i="Expected next byte to be "+r+" but it was actually "+n;return t.call(this,e,i)||this}return(0,i.ZT)(e,t),e}(S),F=function(t){function e(e,r){var n="Failed to parse PDF object starting with the following byte: "+r;return t.call(this,e,n)||this}return(0,i.ZT)(e,t),e}(S),T=function(t){function e(e){return t.call(this,e,"Failed to parse invalid PDF object")||this}return(0,i.ZT)(e,t),e}(S),A=function(t){function e(e){return t.call(this,e,"Failed to parse PDF stream")||this}return(0,i.ZT)(e,t),e}(S),O=function(t){function e(e){return t.call(this,e,"Failed to parse PDF literal string due to unbalanced parenthesis")||this}return(0,i.ZT)(e,t),e}(S),R=function(t){function e(e){return t.call(this,e,"Parser stalled")||this}return(0,i.ZT)(e,t),e}(S),z=function(t){function e(e){return t.call(this,e,"No PDF header found")||this}return(0,i.ZT)(e,t),e}(S),P=function(t){function e(e,r){var n="Did not find expected keyword '"+(0,o.Qo)(r)+"'";return t.call(this,e,n)||this}return(0,i.ZT)(e,t),e}(S)},6107:(t,e,r)=>{"use strict";r.d(e,{iQ:()=>n.iQ,qX:()=>n.qX,VX:()=>n.VX,o6:()=>i.Z,Wy:()=>o.Z,Bn:()=>a.Z,pV:()=>s.Z,IL:()=>u.Z,Wz:()=>c.Z,zO:()=>h.Z,sm:()=>l.Z,Le:()=>f.Z,dS:()=>d.Z,qI:()=>p.Z,u2:()=>g.Z,Ij:()=>v.Z,wQ:()=>m.Z,Gr:()=>y.Z,mh:()=>b.Z,$F:()=>w.Z,kO:()=>k.Z,lR:()=>x.Z,kK:()=>Z.Z,N8:()=>S.Z,Eg:()=>C.Z,sI:()=>F.Z,Y3:()=>T.Z,h9:()=>A.Z,TV:()=>O.TV,ci:()=>O.ci,Ub:()=>R.Ub,m0:()=>R.m0,PV:()=>R.PV,oD:()=>R.oD,Ei:()=>R.Ei,sS:()=>R.sS,PS:()=>R.PS,Au:()=>R.Au,qg:()=>R.qg,_:()=>R._,Ym:()=>R.Ym,uQ:()=>R.uQ,Fs:()=>R.Fs,_X:()=>R._X,P_:()=>R.P_});var n=r(1732),i=(r(5842),r(6834)),o=r(1108),a=r(2862),s=r(4237),u=(r(1617),r(9176),r(8799),r(95),r(3783)),c=r(6262),h=r(2834),l=(r(4634),r(3194)),f=r(6002),d=r(7962),p=(r(8071),r(2018),r(4650),r(3225)),g=r(4222),v=r(8158),m=r(5268),y=(r(8430),r(4055)),b=r(7802),w=r(4911),k=(r(314),r(6962)),x=(r(351),r(6613)),Z=r(9153),S=(r(4776),r(4245),r(4801)),C=r(4874),F=(r(3238),r(2596)),T=r(3382),A=(r(6234),r(8947),r(3917)),O=(r(2791),r(5386),r(606)),R=r(7244)},8071:(t,e,r)=>{"use strict";r.d(e,{ZP:()=>d});var n,i,o,a,s=r(4055),u=r(4650),c=r(5268),h=r(3225),l=r(1795),f=function(t,e){if(void 0!==t)return e[t]};!function(t){t.UseNone="UseNone",t.UseOutlines="UseOutlines",t.UseThumbs="UseThumbs",t.UseOC="UseOC"}(n||(n={})),function(t){t.L2R="L2R",t.R2L="R2L"}(i||(i={})),function(t){t.None="None",t.AppDefault="AppDefault"}(o||(o={})),function(t){t.Simplex="Simplex",t.DuplexFlipShortEdge="DuplexFlipShortEdge",t.DuplexFlipLongEdge="DuplexFlipLongEdge"}(a||(a={}));const d=function(){function t(t){this.dict=t}return t.prototype.lookupBool=function(t){var e=this.dict.lookup(c.Z.of(t));if(e instanceof u.Z)return e},t.prototype.lookupName=function(t){var e=this.dict.lookup(c.Z.of(t));if(e instanceof c.Z)return e},t.prototype.HideToolbar=function(){return this.lookupBool("HideToolbar")},t.prototype.HideMenubar=function(){return this.lookupBool("HideMenubar")},t.prototype.HideWindowUI=function(){return this.lookupBool("HideWindowUI")},t.prototype.FitWindow=function(){return this.lookupBool("FitWindow")},t.prototype.CenterWindow=function(){return this.lookupBool("CenterWindow")},t.prototype.DisplayDocTitle=function(){return this.lookupBool("DisplayDocTitle")},t.prototype.NonFullScreenPageMode=function(){return this.lookupName("NonFullScreenPageMode")},t.prototype.Direction=function(){return this.lookupName("Direction")},t.prototype.PrintScaling=function(){return this.lookupName("PrintScaling")},t.prototype.Duplex=function(){return this.lookupName("Duplex")},t.prototype.PickTrayByPDFSize=function(){return this.lookupBool("PickTrayByPDFSize")},t.prototype.PrintPageRange=function(){var t=this.dict.lookup(c.Z.of("PrintPageRange"));if(t instanceof s.Z)return t},t.prototype.NumCopies=function(){var t=this.dict.lookup(c.Z.of("NumCopies"));if(t instanceof h.Z)return t},t.prototype.getHideToolbar=function(){var t,e;return null!==(e=null===(t=this.HideToolbar())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getHideMenubar=function(){var t,e;return null!==(e=null===(t=this.HideMenubar())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getHideWindowUI=function(){var t,e;return null!==(e=null===(t=this.HideWindowUI())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getFitWindow=function(){var t,e;return null!==(e=null===(t=this.FitWindow())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getCenterWindow=function(){var t,e;return null!==(e=null===(t=this.CenterWindow())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getDisplayDocTitle=function(){var t,e;return null!==(e=null===(t=this.DisplayDocTitle())||void 0===t?void 0:t.asBoolean())&&void 0!==e&&e},t.prototype.getNonFullScreenPageMode=function(){var t,e,r=null===(t=this.NonFullScreenPageMode())||void 0===t?void 0:t.decodeText();return null!==(e=f(r,n))&&void 0!==e?e:n.UseNone},t.prototype.getReadingDirection=function(){var t,e,r=null===(t=this.Direction())||void 0===t?void 0:t.decodeText();return null!==(e=f(r,i))&&void 0!==e?e:i.L2R},t.prototype.getPrintScaling=function(){var t,e,r=null===(t=this.PrintScaling())||void 0===t?void 0:t.decodeText();return null!==(e=f(r,o))&&void 0!==e?e:o.AppDefault},t.prototype.getDuplex=function(){var t,e=null===(t=this.Duplex())||void 0===t?void 0:t.decodeText();return f(e,a)},t.prototype.getPickTrayByPDFSize=function(){var t;return null===(t=this.PickTrayByPDFSize())||void 0===t?void 0:t.asBoolean()},t.prototype.getPrintPageRange=function(){var t=this.PrintPageRange();if(!t)return[];for(var e=[],r=0;r<t.size();r+=2){var n=t.lookup(r,h.Z).asNumber(),i=t.lookup(r+1,h.Z).asNumber();e.push({start:n,end:i})}return e},t.prototype.getNumCopies=function(){var t,e;return null!==(e=null===(t=this.NumCopies())||void 0===t?void 0:t.asNumber())&&void 0!==e?e:1},t.prototype.setHideToolbar=function(t){var e=this.dict.context.obj(t);this.dict.set(c.Z.of("HideToolbar"),e)},t.prototype.setHideMenubar=function(t){var e=this.dict.context.obj(t);this.dict.set(c.Z.of("HideMenubar"),e)},t.prototype.setHideWindowUI=function(t){var e=this.dict.context.obj(t);this.dict.set(c.Z.of("HideWindowUI"),e)},t.prototype.setFitWindow=function(t){var e=this.dict.context.obj(t);this.dict.set(c.Z.of("FitWindow"),e)},t.prototype.setCenterWindow=function(t){var e=this.dict.context.obj(t);this.dict.set(c.Z.of("CenterWindow"),e)},t.prototype.setDisplayDocTitle=function(t){var e=this.dict.context.obj(t);this.dict.set(c.Z.of("DisplayDocTitle"),e)},t.prototype.setNonFullScreenPageMode=function(t){(0,l.DA)(t,"nonFullScreenPageMode",n);var e=c.Z.of(t);this.dict.set(c.Z.of("NonFullScreenPageMode"),e)},t.prototype.setReadingDirection=function(t){(0,l.DA)(t,"readingDirection",i);var e=c.Z.of(t);this.dict.set(c.Z.of("Direction"),e)},t.prototype.setPrintScaling=function(t){(0,l.DA)(t,"printScaling",o);var e=c.Z.of(t);this.dict.set(c.Z.of("PrintScaling"),e)},t.prototype.setDuplex=function(t){(0,l.DA)(t,"duplex",a);var e=c.Z.of(t);this.dict.set(c.Z.of("Duplex"),e)},t.prototype.setPickTrayByPDFSize=function(t){var e=this.dict.context.obj(t);this.dict.set(c.Z.of("PickTrayByPDFSize"),e)},t.prototype.setPrintPageRange=function(t){Array.isArray(t)||(t=[t]);for(var e=[],r=0,n=t.length;r<n;r++)e.push(t[r].start),e.push(t[r].end);(0,l.pO)(e,"printPageRange",["number"]);var i=this.dict.context.obj(e);this.dict.set(c.Z.of("PrintPageRange"),i)},t.prototype.setNumCopies=function(t){(0,l.gI)(t,"numCopies",1,Number.MAX_VALUE),(0,l.Qk)(t,"numCopies");var e=this.dict.context.obj(t);this.dict.set(c.Z.of("NumCopies"),e)},t.fromDict=function(e){return new t(e)},t.create=function(e){return new t(e.obj({}))},t}()},4055:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(7638),i=r(3225),o=r(2018),a=r(5842),s=r(1732);const u=function(t){function e(e){var r=t.call(this)||this;return r.array=[],r.context=e,r}return(0,n.ZT)(e,t),e.prototype.size=function(){return this.array.length},e.prototype.push=function(t){this.array.push(t)},e.prototype.insert=function(t,e){this.array.splice(t,0,e)},e.prototype.indexOf=function(t){var e=this.array.indexOf(t);return-1===e?void 0:e},e.prototype.remove=function(t){this.array.splice(t,1)},e.prototype.set=function(t,e){this.array[t]=e},e.prototype.get=function(t){return this.array[t]},e.prototype.lookupMaybe=function(t){for(var e,r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];return(e=this.context).lookupMaybe.apply(e,(0,n.pr)([this.get(t)],r))},e.prototype.lookup=function(t){for(var e,r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];return(e=this.context).lookup.apply(e,(0,n.pr)([this.get(t)],r))},e.prototype.asRectangle=function(){if(4!==this.size())throw new s.sV(this.size());var t=this.lookup(0,i.Z).asNumber(),e=this.lookup(1,i.Z).asNumber();return{x:t,y:e,width:this.lookup(2,i.Z).asNumber()-t,height:this.lookup(3,i.Z).asNumber()-e}},e.prototype.asArray=function(){return this.array.slice()},e.prototype.clone=function(t){for(var r=e.withContext(t||this.context),n=0,i=this.size();n<i;n++)r.push(this.array[n]);return r},e.prototype.toString=function(){for(var t="[ ",e=0,r=this.size();e<r;e++)t+=this.get(e).toString(),t+=" ";return t+"]"},e.prototype.sizeInBytes=function(){for(var t=3,e=0,r=this.size();e<r;e++)t+=this.get(e).sizeInBytes()+1;return t},e.prototype.copyBytesInto=function(t,e){var r=e;t[e++]=a.Z.LeftSquareBracket,t[e++]=a.Z.Space;for(var n=0,i=this.size();n<i;n++)e+=this.get(n).copyBytesInto(t,e),t[e++]=a.Z.Space;return t[e++]=a.Z.RightSquareBracket,e-r},e.withContext=function(t){return new e(t)},e}(o.Z)},4650:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(7638),i=r(1732),o=r(2018),a=r(5842),s={};const u=function(t){function e(e,r){var n=this;if(e!==s)throw new i.Gp("PDFBool");return(n=t.call(this)||this).value=r,n}return(0,n.ZT)(e,t),e.prototype.asBoolean=function(){return this.value},e.prototype.clone=function(){return this},e.prototype.toString=function(){return String(this.value)},e.prototype.sizeInBytes=function(){return this.value?4:5},e.prototype.copyBytesInto=function(t,e){return this.value?(t[e++]=a.Z.t,t[e++]=a.Z.r,t[e++]=a.Z.u,t[e++]=a.Z.e,4):(t[e++]=a.Z.f,t[e++]=a.Z.a,t[e++]=a.Z.l,t[e++]=a.Z.s,t[e++]=a.Z.e,5)},e.True=new e(s,!0),e.False=new e(s,!1),e}(o.Z)},7802:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(7638),i=r(8430),o=r(2018),a=r(5842);const s=function(t){function e(e,r){var n=t.call(this)||this;return n.dict=e,n.context=r,n}return(0,n.ZT)(e,t),e.prototype.keys=function(){return Array.from(this.dict.keys())},e.prototype.values=function(){return Array.from(this.dict.values())},e.prototype.entries=function(){return Array.from(this.dict.entries())},e.prototype.set=function(t,e){this.dict.set(t,e)},e.prototype.get=function(t,e){void 0===e&&(e=!1);var r=this.dict.get(t);if(r!==i.Z||e)return r},e.prototype.has=function(t){var e=this.dict.get(t);return void 0!==e&&e!==i.Z},e.prototype.lookupMaybe=function(t){for(var e,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];var a=r.includes(i.Z),s=(e=this.context).lookupMaybe.apply(e,(0,n.pr)([this.get(t,a)],r));if(s!==i.Z||a)return s},e.prototype.lookup=function(t){for(var e,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];var a=r.includes(i.Z),s=(e=this.context).lookup.apply(e,(0,n.pr)([this.get(t,a)],r));if(s!==i.Z||a)return s},e.prototype.delete=function(t){return this.dict.delete(t)},e.prototype.asMap=function(){return new Map(this.dict)},e.prototype.clone=function(t){for(var r=e.withContext(t||this.context),n=this.entries(),i=0,o=n.length;i<o;i++){var a=n[i],s=a[0],u=a[1];r.set(s,u)}return r},e.prototype.toString=function(){for(var t="<<\n",e=this.entries(),r=0,n=e.length;r<n;r++){var i=e[r],o=i[0],a=i[1];t+=o.toString()+" "+a.toString()+"\n"}return t+">>"},e.prototype.sizeInBytes=function(){for(var t=5,e=this.entries(),r=0,n=e.length;r<n;r++){var i=e[r],o=i[0],a=i[1];t+=o.sizeInBytes()+a.sizeInBytes()+2}return t},e.prototype.copyBytesInto=function(t,e){var r=e;t[e++]=a.Z.LessThan,t[e++]=a.Z.LessThan,t[e++]=a.Z.Newline;for(var n=this.entries(),i=0,o=n.length;i<o;i++){var s=n[i],u=s[0],c=s[1];e+=u.copyBytesInto(t,e),t[e++]=a.Z.Space,e+=c.copyBytesInto(t,e),t[e++]=a.Z.Newline}return t[e++]=a.Z.GreaterThan,t[e++]=a.Z.GreaterThan,e-r},e.withContext=function(t){return new e(new Map,t)},e.fromMapWithContext=function(t,r){return new e(t,r)},e}(o.Z)},8158:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(7638),i=r(2018),o=r(5842),a=r(1795),s=r(1732);const u=function(t){function e(e){var r=t.call(this)||this;return r.value=e,r}return(0,n.ZT)(e,t),e.prototype.asBytes=function(){for(var t=this.value+(this.value.length%2==1?"0":""),e=t.length,r=new Uint8Array(t.length/2),n=0,i=0;n<e;){var o=parseInt(t.substring(n,n+2),16);r[i]=o,n+=2,i+=1}return r},e.prototype.decodeText=function(){var t=this.asBytes();return(0,a.O0)(t)?(0,a.aB)(t):(0,a.Ji)(t)},e.prototype.decodeDate=function(){var t=this.decodeText(),e=(0,a.sG)(t);if(!e)throw new s.dm(t);return e},e.prototype.asString=function(){return this.value},e.prototype.clone=function(){return e.of(this.value)},e.prototype.toString=function(){return"<"+this.value+">"},e.prototype.sizeInBytes=function(){return this.value.length+2},e.prototype.copyBytesInto=function(t,e){return t[e++]=o.Z.LessThan,e+=(0,a.C1)(this.value,t,e),t[e++]=o.Z.GreaterThan,this.value.length+2},e.of=function(t){return new e(t)},e.fromText=function(t){for(var r=(0,a.nB)(t),n="",i=0,o=r.length;i<o;i++)n+=(0,a.CK)(r[i],4);return new e(n)},e}(i.Z)},314:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(7638);const i=function(t){function e(e){var r=t.call(this)||this;return r.data=e,r}return(0,n.ZT)(e,t),e.prototype.clone=function(){return e.of(this.data.slice())},e.prototype.toString=function(){return"PDFInvalidObject("+this.data.length+" bytes)"},e.prototype.sizeInBytes=function(){return this.data.length},e.prototype.copyBytesInto=function(t,e){for(var r=this.data.length,n=0;n<r;n++)t[e++]=this.data[n];return r},e.of=function(t){return new e(t)},e}(r(2018).Z)},5268:(t,e,r)=>{"use strict";r.d(e,{Z:()=>l});var n=r(7638),i=r(1732),o=r(2018),a=r(5842),s=r(2736),u=r(1795),c={},h=new Map;const l=function(t){function e(e,r){var n=this;if(e!==c)throw new i.Gp("PDFName");n=t.call(this)||this;for(var o,h="/",l=0,f=r.length;l<f;l++){var d=r[l],p=(0,u.GN)(d);h+=(o=p)>=a.Z.ExclamationPoint&&o<=a.Z.Tilde&&!s.m[o]?d:"#"+(0,u.zv)(p)}return n.encodedName=h,n}return(0,n.ZT)(e,t),e.prototype.asBytes=function(){for(var t=[],e="",r=!1,n=function(e){void 0!==e&&t.push(e),r=!1},i=1,o=this.encodedName.length;i<o;i++){var s=this.encodedName[i],c=(0,u.GN)(s),h=this.encodedName[i+1];r?c>=a.Z.Zero&&c<=a.Z.Nine||c>=a.Z.a&&c<=a.Z.f||c>=a.Z.A&&c<=a.Z.F?2!==(e+=s).length&&(h>="0"&&h<="9"||h>="a"&&h<="f"||h>="A"&&h<="F")||(n(parseInt(e,16)),e=""):n(c):c===a.Z.Hash?r=!0:n(c)}return new Uint8Array(t)},e.prototype.decodeText=function(){var t=this.asBytes();return String.fromCharCode.apply(String,Array.from(t))},e.prototype.asString=function(){return this.encodedName},e.prototype.value=function(){return this.encodedName},e.prototype.clone=function(){return this},e.prototype.toString=function(){return this.encodedName},e.prototype.sizeInBytes=function(){return this.encodedName.length},e.prototype.copyBytesInto=function(t,e){return e+=(0,u.C1)(this.encodedName,t,e),this.encodedName.length},e.of=function(t){var r=function(t){return t.replace(/#([\dABCDEF]{2})/g,(function(t,e){return(0,u.Dc)(e)}))}(t),n=h.get(r);return n||(n=new e(c,r),h.set(r,n)),n},e.Length=e.of("Length"),e.FlateDecode=e.of("FlateDecode"),e.Resources=e.of("Resources"),e.Font=e.of("Font"),e.XObject=e.of("XObject"),e.ExtGState=e.of("ExtGState"),e.Contents=e.of("Contents"),e.Type=e.of("Type"),e.Parent=e.of("Parent"),e.MediaBox=e.of("MediaBox"),e.Page=e.of("Page"),e.Annots=e.of("Annots"),e.TrimBox=e.of("TrimBox"),e.ArtBox=e.of("ArtBox"),e.BleedBox=e.of("BleedBox"),e.CropBox=e.of("CropBox"),e.Rotate=e.of("Rotate"),e.Title=e.of("Title"),e.Author=e.of("Author"),e.Subject=e.of("Subject"),e.Creator=e.of("Creator"),e.Keywords=e.of("Keywords"),e.Producer=e.of("Producer"),e.CreationDate=e.of("CreationDate"),e.ModDate=e.of("ModDate"),e}(o.Z)},8430:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(7638),i=r(2018),o=r(5842);const a=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.prototype.asNull=function(){return null},e.prototype.clone=function(){return this},e.prototype.toString=function(){return"null"},e.prototype.sizeInBytes=function(){return 4},e.prototype.copyBytesInto=function(t,e){return t[e++]=o.Z.n,t[e++]=o.Z.u,t[e++]=o.Z.l,t[e++]=o.Z.l,4},e}(i.Z))},3225:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(7638),i=r(1795);const o=function(t){function e(e){var r=t.call(this)||this;return r.numberValue=e,r.stringValue=(0,i.D$)(e),r}return(0,n.ZT)(e,t),e.prototype.asNumber=function(){return this.numberValue},e.prototype.value=function(){return this.numberValue},e.prototype.clone=function(){return e.of(this.numberValue)},e.prototype.toString=function(){return this.stringValue},e.prototype.sizeInBytes=function(){return this.stringValue.length},e.prototype.copyBytesInto=function(t,e){return e+=(0,i.C1)(this.stringValue,t,e),this.stringValue.length},e.of=function(t){return new e(t)},e}(r(2018).Z)},2018:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(1732);const i=function(){function t(){}return t.prototype.clone=function(t){throw new n.iQ(this.constructor.name,"clone")},t.prototype.toString=function(){throw new n.iQ(this.constructor.name,"toString")},t.prototype.sizeInBytes=function(){throw new n.iQ(this.constructor.name,"sizeInBytes")},t.prototype.copyBytesInto=function(t,e){throw new n.iQ(this.constructor.name,"copyBytesInto")},t}()},351:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(7638),i=r(6962),o=r(1795);const a=function(t){function e(e,r){var n=t.call(this,e)||this;return n.contents=r,n}return(0,n.ZT)(e,t),e.prototype.asUint8Array=function(){return this.contents.slice()},e.prototype.clone=function(t){return e.of(this.dict.clone(t),this.contents.slice())},e.prototype.getContentsString=function(){return(0,o.Qo)(this.contents)},e.prototype.getContents=function(){return this.contents},e.prototype.getContentsSize=function(){return this.contents.length},e.of=function(t,r){return new e(t,r)},e}(i.Z)},4911:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n=r(7638),i=r(1732),o=r(2018),a=r(1795),s={},u=new Map;const c=function(t){function e(e,r,n){var o=this;if(e!==s)throw new i.Gp("PDFRef");return(o=t.call(this)||this).objectNumber=r,o.generationNumber=n,o.tag=r+" "+n+" R",o}return(0,n.ZT)(e,t),e.prototype.clone=function(){return this},e.prototype.toString=function(){return this.tag},e.prototype.sizeInBytes=function(){return this.tag.length},e.prototype.copyBytesInto=function(t,e){return e+=(0,a.C1)(this.tag,t,e),this.tag.length},e.of=function(t,r){void 0===r&&(r=0);var n=t+" "+r+" R",i=u.get(n);return i||(i=new e(s,t,r),u.set(n,i)),i},e}(o.Z)},6962:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n=r(7638),i=r(1732),o=r(5268),a=r(3225),s=r(2018),u=r(5842);const c=function(t){function e(e){var r=t.call(this)||this;return r.dict=e,r}return(0,n.ZT)(e,t),e.prototype.clone=function(t){throw new i.iQ(this.constructor.name,"clone")},e.prototype.getContentsString=function(){throw new i.iQ(this.constructor.name,"getContentsString")},e.prototype.getContents=function(){throw new i.iQ(this.constructor.name,"getContents")},e.prototype.getContentsSize=function(){throw new i.iQ(this.constructor.name,"getContentsSize")},e.prototype.updateDict=function(){var t=this.getContentsSize();this.dict.set(o.Z.Length,a.Z.of(t))},e.prototype.sizeInBytes=function(){return this.updateDict(),this.dict.sizeInBytes()+this.getContentsSize()+18},e.prototype.toString=function(){this.updateDict();var t=this.dict.toString();return t+="\nstream\n",(t+=this.getContentsString())+"\nendstream"},e.prototype.copyBytesInto=function(t,e){this.updateDict();var r=e;e+=this.dict.copyBytesInto(t,e),t[e++]=u.Z.Newline,t[e++]=u.Z.s,t[e++]=u.Z.t,t[e++]=u.Z.r,t[e++]=u.Z.e,t[e++]=u.Z.a,t[e++]=u.Z.m,t[e++]=u.Z.Newline;for(var n=this.getContents(),i=0,o=n.length;i<o;i++)t[e++]=n[i];return t[e++]=u.Z.Newline,t[e++]=u.Z.e,t[e++]=u.Z.n,t[e++]=u.Z.d,t[e++]=u.Z.s,t[e++]=u.Z.t,t[e++]=u.Z.r,t[e++]=u.Z.e,t[e++]=u.Z.a,t[e++]=u.Z.m,e-r},e}(s.Z)},4222:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(7638),i=r(2018),o=r(5842),a=r(1795),s=r(1732);const u=function(t){function e(e){var r=t.call(this)||this;return r.value=e,r}return(0,n.ZT)(e,t),e.prototype.asBytes=function(){for(var t=[],e="",r=!1,n=function(e){void 0!==e&&t.push(e),r=!1},i=0,s=this.value.length;i<s;i++){var u=this.value[i],c=(0,a.GN)(u),h=this.value[i+1];r?c===o.Z.Newline||c===o.Z.CarriageReturn?n():c===o.Z.n?n(o.Z.Newline):c===o.Z.r?n(o.Z.CarriageReturn):c===o.Z.t?n(o.Z.Tab):c===o.Z.b?n(o.Z.Backspace):c===o.Z.f?n(o.Z.FormFeed):c===o.Z.LeftParen?n(o.Z.LeftParen):c===o.Z.RightParen?n(o.Z.RightParen):c===o.Z.Backspace?n(o.Z.BackSlash):c>=o.Z.Zero&&c<=o.Z.Seven?3!==(e+=u).length&&h>="0"&&h<="7"||(n(parseInt(e,8)),e=""):n(c):c===o.Z.BackSlash?r=!0:n(c)}return new Uint8Array(t)},e.prototype.decodeText=function(){var t=this.asBytes();return(0,a.O0)(t)?(0,a.aB)(t):(0,a.Ji)(t)},e.prototype.decodeDate=function(){var t=this.decodeText(),e=(0,a.sG)(t);if(!e)throw new s.dm(t);return e},e.prototype.asString=function(){return this.value},e.prototype.clone=function(){return e.of(this.value)},e.prototype.toString=function(){return"("+this.value+")"},e.prototype.sizeInBytes=function(){return this.value.length+2},e.prototype.copyBytesInto=function(t,e){return t[e++]=o.Z.LeftParen,e+=(0,a.C1)(this.value,t,e),t[e++]=o.Z.RightParen,this.value.length+2},e.of=function(t){return new e(t)},e.fromDate=function(t){return new e("D:"+(0,a.Sk)(String(t.getUTCFullYear()),4,"0")+(0,a.Sk)(String(t.getUTCMonth()+1),2,"0")+(0,a.Sk)(String(t.getUTCDate()),2,"0")+(0,a.Sk)(String(t.getUTCHours()),2,"0")+(0,a.Sk)(String(t.getUTCMinutes()),2,"0")+(0,a.Sk)(String(t.getUTCSeconds()),2,"0")+"Z")},e}(i.Z)},2596:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(2018),i=r(5842),o=r(1795);const a=function(){function t(t,e){this.name=t,this.args=e||[]}return t.prototype.clone=function(e){for(var r=new Array(this.args.length),i=0,o=r.length;i<o;i++){var a=this.args[i];r[i]=a instanceof n.Z?a.clone(e):a}return t.of(this.name,r)},t.prototype.toString=function(){for(var t="",e=0,r=this.args.length;e<r;e++)t+=String(this.args[e])+" ";return t+this.name},t.prototype.sizeInBytes=function(){for(var t=0,e=0,r=this.args.length;e<r;e++){var i=this.args[e];t+=(i instanceof n.Z?i.sizeInBytes():i.length)+1}return t+this.name.length},t.prototype.copyBytesInto=function(t,e){for(var r=e,a=0,s=this.args.length;a<s;a++){var u=this.args[a];u instanceof n.Z?e+=u.copyBytesInto(t,e):e+=(0,o.C1)(u,t,e),t[e++]=i.Z.Space}return(e+=(0,o.C1)(this.name,t,e))-r},t.of=function(e,r){return new t(e,r)},t}()},3382:(t,e,r)=>{"use strict";var n;r.d(e,{Z:()=>i}),function(t){t.NonStrokingColor="sc",t.NonStrokingColorN="scn",t.NonStrokingColorRgb="rg",t.NonStrokingColorGray="g",t.NonStrokingColorCmyk="k",t.NonStrokingColorspace="cs",t.StrokingColor="SC",t.StrokingColorN="SCN",t.StrokingColorRgb="RG",t.StrokingColorGray="G",t.StrokingColorCmyk="K",t.StrokingColorspace="CS",t.BeginMarkedContentSequence="BDC",t.BeginMarkedContent="BMC",t.EndMarkedContent="EMC",t.MarkedContentPointWithProps="DP",t.MarkedContentPoint="MP",t.DrawObject="Do",t.ConcatTransformationMatrix="cm",t.PopGraphicsState="Q",t.PushGraphicsState="q",t.SetFlatness="i",t.SetGraphicsStateParams="gs",t.SetLineCapStyle="J",t.SetLineDashPattern="d",t.SetLineJoinStyle="j",t.SetLineMiterLimit="M",t.SetLineWidth="w",t.SetTextMatrix="Tm",t.SetRenderingIntent="ri",t.AppendRectangle="re",t.BeginInlineImage="BI",t.BeginInlineImageData="ID",t.EndInlineImage="EI",t.ClipEvenOdd="W*",t.ClipNonZero="W",t.CloseAndStroke="s",t.CloseFillEvenOddAndStroke="b*",t.CloseFillNonZeroAndStroke="b",t.ClosePath="h",t.AppendBezierCurve="c",t.CurveToReplicateFinalPoint="y",t.CurveToReplicateInitialPoint="v",t.EndPath="n",t.FillEvenOddAndStroke="B*",t.FillEvenOdd="f*",t.FillNonZeroAndStroke="B",t.FillNonZero="f",t.LegacyFillNonZero="F",t.LineTo="l",t.MoveTo="m",t.ShadingFill="sh",t.StrokePath="S",t.BeginText="BT",t.EndText="ET",t.MoveText="Td",t.MoveTextSetLeading="TD",t.NextLine="T*",t.SetCharacterSpacing="Tc",t.SetFontAndSize="Tf",t.SetTextHorizontalScaling="Tz",t.SetTextLineHeight="TL",t.SetTextRenderingMode="Tr",t.SetTextRise="Ts",t.SetWordSpacing="Tw",t.ShowText="Tj",t.ShowTextAdjusted="TJ",t.ShowTextLine="'",t.ShowTextLineAndSpace='"',t.Type3D0="d0",t.Type3D1="d1",t.BeginCompatibilitySection="BX",t.EndCompatibilitySection="EX"}(n||(n={}));const i=n},4580:(t,e,r)=>{"use strict";r.d(e,{Z:()=>h});var n=r(1732),i=r(5842),o=r(986),a=r(9685),s=r(1795),u=i.Z.Newline,c=i.Z.CarriageReturn;const h=function(){function t(t,e){void 0===e&&(e=!1),this.bytes=t,this.capNumbers=e}return t.prototype.parseRawInt=function(){for(var t="";!this.bytes.done();){var e=this.bytes.peek();if(!o.FT[e])break;t+=(0,s.D_)(this.bytes.next())}var r=Number(t);if(!t||!isFinite(r))throw new n.RS(this.bytes.position(),t);return r},t.prototype.parseRawNumber=function(){for(var t="";!this.bytes.done();){var e=this.bytes.peek();if(!o.BE[e])break;if(t+=(0,s.D_)(this.bytes.next()),e===i.Z.Period)break}for(;!this.bytes.done()&&(e=this.bytes.peek(),o.FT[e]);)t+=(0,s.D_)(this.bytes.next());var r=Number(t);if(!t||!isFinite(r))throw new n.RS(this.bytes.position(),t);if(r>Number.MAX_SAFE_INTEGER){if(this.capNumbers){var a="Parsed number that is too large for some PDF readers: "+t+", using Number.MAX_SAFE_INTEGER instead.";return console.warn(a),Number.MAX_SAFE_INTEGER}a="Parsed number that is too large for some PDF readers: "+t+", not capping.",console.warn(a)}return r},t.prototype.skipWhitespace=function(){for(;!this.bytes.done()&&a.a[this.bytes.peek()];)this.bytes.next()},t.prototype.skipLine=function(){for(;!this.bytes.done();){var t=this.bytes.peek();if(t===u||t===c)return;this.bytes.next()}},t.prototype.skipComment=function(){if(this.bytes.peek()!==i.Z.Percent)return!1;for(;!this.bytes.done();){var t=this.bytes.peek();if(t===u||t===c)return!0;this.bytes.next()}return!0},t.prototype.skipWhitespaceAndComments=function(){for(this.skipWhitespace();this.skipComment();)this.skipWhitespace()},t.prototype.matchKeyword=function(t){for(var e=this.bytes.offset(),r=0,n=t.length;r<n;r++)if(this.bytes.done()||this.bytes.next()!==t[r])return this.bytes.moveTo(e),!1;return!0},t}()},6276:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(1732),i=r(5386),o=r(5842);const a=function(){function t(t){this.idx=0,this.line=0,this.column=0,this.bytes=t,this.length=this.bytes.length}return t.prototype.moveTo=function(t){this.idx=t},t.prototype.next=function(){var t=this.bytes[this.idx++];return t===o.Z.Newline?(this.line+=1,this.column=0):this.column+=1,t},t.prototype.assertNext=function(t){if(this.peek()!==t)throw new n.ze(this.position(),t,this.peek());return this.next()},t.prototype.peek=function(){return this.bytes[this.idx]},t.prototype.peekAhead=function(t){return this.bytes[this.idx+t]},t.prototype.peekAt=function(t){return this.bytes[t]},t.prototype.done=function(){return this.idx>=this.length},t.prototype.offset=function(){return this.idx},t.prototype.slice=function(t,e){return this.bytes.slice(t,e)},t.prototype.position=function(){return{line:this.line,column:this.column,offset:this.idx}},t.of=function(e){return new t(e)},t.fromPDFRawStream=function(e){return t.of((0,i.y)(e).decode())},t}()},6234:(t,e,r)=>{"use strict";r.d(e,{Z:()=>F});var n=r(7638),i=r(1732),o=r(4055),a=r(4650),s=r(7802),u=r(8158),c=r(5268),h=r(8430),l=r(3225),f=r(351),d=r(4911),p=r(4222),g=r(4580),v=r(6276),m=r(6613),y=r(4874),b=r(4801),w=r(5842),k=r(2558),x=r(3042),Z=r(986),S=r(9685),C=r(1795);const F=function(t){function e(e,r,n){void 0===n&&(n=!1);var i=t.call(this,e,n)||this;return i.context=r,i}return(0,n.ZT)(e,t),e.prototype.parseObject=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(x.L.true))return a.Z.True;if(this.matchKeyword(x.L.false))return a.Z.False;if(this.matchKeyword(x.L.null))return h.Z;var t=this.bytes.peek();if(t===w.Z.LessThan&&this.bytes.peekAhead(1)===w.Z.LessThan)return this.parseDictOrStream();if(t===w.Z.LessThan)return this.parseHexString();if(t===w.Z.LeftParen)return this.parseString();if(t===w.Z.ForwardSlash)return this.parseName();if(t===w.Z.LeftSquareBracket)return this.parseArray();if(Z.BE[t])return this.parseNumberOrRef();throw new i.EX(this.bytes.position(),t)},e.prototype.parseNumberOrRef=function(){var t=this.parseRawNumber();this.skipWhitespaceAndComments();var e=this.bytes.offset();if(Z.FT[this.bytes.peek()]){var r=this.parseRawNumber();if(this.skipWhitespaceAndComments(),this.bytes.peek()===w.Z.R)return this.bytes.assertNext(w.Z.R),d.Z.of(t,r)}return this.bytes.moveTo(e),l.Z.of(t)},e.prototype.parseHexString=function(){var t="";for(this.bytes.assertNext(w.Z.LessThan);!this.bytes.done()&&this.bytes.peek()!==w.Z.GreaterThan;)t+=(0,C.D_)(this.bytes.next());return this.bytes.assertNext(w.Z.GreaterThan),u.Z.of(t)},e.prototype.parseString=function(){for(var t=0,e=!1,r="";!this.bytes.done();){var n=this.bytes.next();if(r+=(0,C.D_)(n),e||(n===w.Z.LeftParen&&(t+=1),n===w.Z.RightParen&&(t-=1)),n===w.Z.BackSlash?e=!e:e&&(e=!1),0===t)return p.Z.of(r.substring(1,r.length-1))}throw new i.or(this.bytes.position())},e.prototype.parseName=function(){this.bytes.assertNext(w.Z.ForwardSlash);for(var t="";!this.bytes.done();){var e=this.bytes.peek();if(S.a[e]||k.p[e])break;t+=(0,C.D_)(e),this.bytes.next()}return c.Z.of(t)},e.prototype.parseArray=function(){this.bytes.assertNext(w.Z.LeftSquareBracket),this.skipWhitespaceAndComments();for(var t=o.Z.withContext(this.context);this.bytes.peek()!==w.Z.RightSquareBracket;){var e=this.parseObject();t.push(e),this.skipWhitespaceAndComments()}return this.bytes.assertNext(w.Z.RightSquareBracket),t},e.prototype.parseDict=function(){this.bytes.assertNext(w.Z.LessThan),this.bytes.assertNext(w.Z.LessThan),this.skipWhitespaceAndComments();for(var t=new Map;!this.bytes.done()&&this.bytes.peek()!==w.Z.GreaterThan&&this.bytes.peekAhead(1)!==w.Z.GreaterThan;){var e=this.parseName(),r=this.parseObject();t.set(e,r),this.skipWhitespaceAndComments()}this.skipWhitespaceAndComments(),this.bytes.assertNext(w.Z.GreaterThan),this.bytes.assertNext(w.Z.GreaterThan);var n=t.get(c.Z.of("Type"));return n===c.Z.of("Catalog")?m.Z.fromMapWithContext(t,this.context):n===c.Z.of("Pages")?b.Z.fromMapWithContext(t,this.context):n===c.Z.of("Page")?y.Z.fromMapWithContext(t,this.context):s.Z.fromMapWithContext(t,this.context)},e.prototype.parseDictOrStream=function(){var t=this.bytes.position(),e=this.parseDict();if(this.skipWhitespaceAndComments(),!(this.matchKeyword(x.L.streamEOF1)||this.matchKeyword(x.L.streamEOF2)||this.matchKeyword(x.L.streamEOF3)||this.matchKeyword(x.L.streamEOF4)||this.matchKeyword(x.L.stream)))return e;var r,n=this.bytes.offset(),i=e.get(c.Z.of("Length"));i instanceof l.Z?(r=n+i.asNumber(),this.bytes.moveTo(r),this.skipWhitespaceAndComments(),this.matchKeyword(x.L.endstream)||(this.bytes.moveTo(n),r=this.findEndOfStreamFallback(t))):r=this.findEndOfStreamFallback(t);var o=this.bytes.slice(n,r);return f.Z.of(e,o)},e.prototype.findEndOfStreamFallback=function(t){for(var e=1,r=this.bytes.offset();!this.bytes.done()&&(r=this.bytes.offset(),this.matchKeyword(x.L.stream)?e+=1:this.matchKeyword(x.L.EOF1endstream)||this.matchKeyword(x.L.EOF2endstream)||this.matchKeyword(x.L.EOF3endstream)||this.matchKeyword(x.L.endstream)?e-=1:this.bytes.next(),0!==e););if(0!==e)throw new i.Sh(t);return r},e.forBytes=function(t,r,n){return new e(v.Z.of(t),r,n)},e.forByteStream=function(t,r,n){return void 0===n&&(n=!1),new e(t,r,n)},e}(g.Z)},8947:(t,e,r)=>{"use strict";r.d(e,{Z:()=>l});var n=r(7638),i=r(1732),o=r(5268),a=r(3225),s=r(4911),u=r(6276),c=r(6234),h=r(1795);const l=function(t){function e(e,r){var n=t.call(this,u.Z.fromPDFRawStream(e),e.dict.context)||this,i=e.dict;return n.alreadyParsed=!1,n.shouldWaitForTick=r||function(){return!1},n.firstOffset=i.lookup(o.Z.of("First"),a.Z).asNumber(),n.objectCount=i.lookup(o.Z.of("N"),a.Z).asNumber(),n}return(0,n.ZT)(e,t),e.prototype.parseIntoContext=function(){return(0,n.mG)(this,void 0,void 0,(function(){var t,e,r,o,a,u,c,l;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:if(this.alreadyParsed)throw new i.aj("PDFObjectStreamParser","parseIntoContext");this.alreadyParsed=!0,t=this.parseOffsetsAndObjectNumbers(),e=0,r=t.length,n.label=1;case 1:return e<r?(o=t[e],a=o.objectNumber,u=o.offset,this.bytes.moveTo(this.firstOffset+u),c=this.parseObject(),l=s.Z.of(a,0),this.context.assign(l,c),this.shouldWaitForTick()?[4,(0,h.uj)()]:[3,3]):[3,4];case 2:n.sent(),n.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},e.prototype.parseOffsetsAndObjectNumbers=function(){for(var t=[],e=0,r=this.objectCount;e<r;e++){this.skipWhitespaceAndComments();var n=this.parseRawInt();this.skipWhitespaceAndComments();var i=this.parseRawInt();t.push({objectNumber:n,offset:i})}return t},e.forStream=function(t,r){return new e(t,r)},e}(c.Z)},3917:(t,e,r)=>{"use strict";r.d(e,{Z:()=>x});var n=r(7638),i=r(95),o=r(1617),a=r(9176),s=r(1732),u=r(7802),c=r(314),h=r(5268),l=r(351),f=r(4911),d=r(6276),p=r(6234),g=r(8947),v=r(2791),m=r(6834),y=r(5842),b=r(3042),w=r(986),k=r(1795);const x=function(t){function e(e,r,n,i){void 0===r&&(r=1/0),void 0===n&&(n=!1),void 0===i&&(i=!1);var o=t.call(this,d.Z.of(e),m.Z.create(),i)||this;return o.alreadyParsed=!1,o.parsedObjects=0,o.shouldWaitForTick=function(){return o.parsedObjects+=1,o.parsedObjects%o.objectsPerTick==0},o.objectsPerTick=r,o.throwOnInvalidObject=n,o}return(0,n.ZT)(e,t),e.prototype.parseDocument=function(){return(0,n.mG)(this,void 0,void 0,(function(){var t,e;return(0,n.Jh)(this,(function(r){switch(r.label){case 0:if(this.alreadyParsed)throw new s.aj("PDFParser","parseDocument");this.alreadyParsed=!0,this.context.header=this.parseHeader(),r.label=1;case 1:return this.bytes.done()?[3,3]:[4,this.parseDocumentSection()];case 2:if(r.sent(),(e=this.bytes.offset())===t)throw new s.Dr(this.bytes.position());return t=e,[3,1];case 3:return this.maybeRecoverRoot(),this.context.lookup(f.Z.of(0))&&(console.warn("Removing parsed object: 0 0 R"),this.context.delete(f.Z.of(0))),[2,this.context]}}))}))},e.prototype.maybeRecoverRoot=function(){var t=function(t){return t instanceof u.Z&&t.lookup(h.Z.of("Type"))===h.Z.of("Catalog")};if(!t(this.context.lookup(this.context.trailerInfo.Root)))for(var e=this.context.enumerateIndirectObjects(),r=0,n=e.length;r<n;r++){var i=e[r],o=i[0];t(i[1])&&(this.context.trailerInfo.Root=o)}},e.prototype.parseHeader=function(){for(;!this.bytes.done();){if(this.matchKeyword(b.L.header)){var t=this.parseRawInt();this.bytes.assertNext(y.Z.Period);var e=this.parseRawInt(),r=o.Z.forVersion(t,e);return this.skipBinaryHeaderComment(),r}this.bytes.next()}throw new s.ku(this.bytes.position())},e.prototype.parseIndirectObjectHeader=function(){this.skipWhitespaceAndComments();var t=this.parseRawInt();this.skipWhitespaceAndComments();var e=this.parseRawInt();if(this.skipWhitespaceAndComments(),!this.matchKeyword(b.L.obj))throw new s.uu(this.bytes.position(),b.L.obj);return f.Z.of(t,e)},e.prototype.matchIndirectObjectHeader=function(){var t=this.bytes.offset();try{return this.parseIndirectObjectHeader(),!0}catch(e){return this.bytes.moveTo(t),!1}},e.prototype.parseIndirectObject=function(){return(0,n.mG)(this,void 0,void 0,(function(){var t,e;return(0,n.Jh)(this,(function(r){switch(r.label){case 0:return t=this.parseIndirectObjectHeader(),this.skipWhitespaceAndComments(),e=this.parseObject(),this.skipWhitespaceAndComments(),this.matchKeyword(b.L.endobj),e instanceof l.Z&&e.dict.lookup(h.Z.of("Type"))===h.Z.of("ObjStm")?[4,g.Z.forStream(e,this.shouldWaitForTick).parseIntoContext()]:[3,2];case 1:return r.sent(),[3,3];case 2:e instanceof l.Z&&e.dict.lookup(h.Z.of("Type"))===h.Z.of("XRef")?v.Z.forStream(e).parseIntoContext():this.context.assign(t,e),r.label=3;case 3:return[2,t]}}))}))},e.prototype.tryToParseInvalidIndirectObject=function(){var t=this.bytes.position(),e="Trying to parse invalid object: "+JSON.stringify(t)+")";if(this.throwOnInvalidObject)throw new Error(e);console.warn(e);var r=this.parseIndirectObjectHeader();console.warn("Invalid object ref: "+r),this.skipWhitespaceAndComments();for(var n=this.bytes.offset(),i=!0;!this.bytes.done()&&(this.matchKeyword(b.L.endobj)&&(i=!1),i);)this.bytes.next();if(i)throw new s.Ke(t);var o=this.bytes.offset()-b.L.endobj.length,a=c.Z.of(this.bytes.slice(n,o));return this.context.assign(r,a),r},e.prototype.parseIndirectObjects=function(){return(0,n.mG)(this,void 0,void 0,(function(){var t;return(0,n.Jh)(this,(function(e){switch(e.label){case 0:this.skipWhitespaceAndComments(),e.label=1;case 1:if(this.bytes.done()||!w.FT[this.bytes.peek()])return[3,8];t=this.bytes.offset(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,this.parseIndirectObject()];case 3:return e.sent(),[3,5];case 4:return e.sent(),this.bytes.moveTo(t),this.tryToParseInvalidIndirectObject(),[3,5];case 5:return this.skipWhitespaceAndComments(),this.skipJibberish(),this.shouldWaitForTick()?[4,(0,k.uj)()]:[3,7];case 6:e.sent(),e.label=7;case 7:return[3,1];case 8:return[2]}}))}))},e.prototype.maybeParseCrossRefSection=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(b.L.xref)){this.skipWhitespaceAndComments();for(var t=-1,e=i.Z.createEmpty();!this.bytes.done()&&w.FT[this.bytes.peek()];){var r=this.parseRawInt();this.skipWhitespaceAndComments();var n=this.parseRawInt();this.skipWhitespaceAndComments();var o=this.bytes.peek();if(o===y.Z.n||o===y.Z.f){var a=f.Z.of(t,n);this.bytes.next()===y.Z.n?e.addEntry(a,r):e.addDeletedEntry(a,r),t+=1}else t=r;this.skipWhitespaceAndComments()}return e}},e.prototype.maybeParseTrailerDict=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(b.L.trailer)){this.skipWhitespaceAndComments();var t=this.parseDict(),e=this.context;e.trailerInfo={Root:t.get(h.Z.of("Root"))||e.trailerInfo.Root,Encrypt:t.get(h.Z.of("Encrypt"))||e.trailerInfo.Encrypt,Info:t.get(h.Z.of("Info"))||e.trailerInfo.Info,ID:t.get(h.Z.of("ID"))||e.trailerInfo.ID}}},e.prototype.maybeParseTrailer=function(){if(this.skipWhitespaceAndComments(),this.matchKeyword(b.L.startxref)){this.skipWhitespaceAndComments();var t=this.parseRawInt();return this.skipWhitespace(),this.matchKeyword(b.L.eof),this.skipWhitespaceAndComments(),this.matchKeyword(b.L.eof),this.skipWhitespaceAndComments(),a.Z.forLastCrossRefSectionOffset(t)}},e.prototype.parseDocumentSection=function(){return(0,n.mG)(this,void 0,void 0,(function(){return(0,n.Jh)(this,(function(t){switch(t.label){case 0:return[4,this.parseIndirectObjects()];case 1:return t.sent(),this.maybeParseCrossRefSection(),this.maybeParseTrailerDict(),this.maybeParseTrailer(),this.skipJibberish(),[2]}}))}))},e.prototype.skipJibberish=function(){for(this.skipWhitespaceAndComments();!this.bytes.done();){var t=this.bytes.offset(),e=this.bytes.peek();if(e>=y.Z.Space&&e<=y.Z.Tilde&&(this.matchKeyword(b.L.xref)||this.matchKeyword(b.L.trailer)||this.matchKeyword(b.L.startxref)||this.matchIndirectObjectHeader())){this.bytes.moveTo(t);break}this.bytes.next()}},e.prototype.skipBinaryHeaderComment=function(){this.skipWhitespaceAndComments();try{var t=this.bytes.offset();this.parseIndirectObjectHeader(),this.bytes.moveTo(t)}catch(t){this.bytes.next(),this.skipWhitespaceAndComments()}},e.forBytesWithOptions=function(t,r,n,i){return new e(t,r,n,i)},e}(p.Z)},2791:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n=r(1732),i=r(4055),o=r(5268),a=r(3225),s=r(4911),u=r(6276);const c=function(){function t(t){this.alreadyParsed=!1,this.dict=t.dict,this.bytes=u.Z.fromPDFRawStream(t),this.context=this.dict.context;var e=this.dict.lookup(o.Z.of("Size"),a.Z),r=this.dict.lookup(o.Z.of("Index"));if(r instanceof i.Z){this.subsections=[];for(var n=0,s=r.size();n<s;n+=2){var c=r.lookup(n+0,a.Z).asNumber(),h=r.lookup(n+1,a.Z).asNumber();this.subsections.push({firstObjectNumber:c,length:h})}}else this.subsections=[{firstObjectNumber:0,length:e.asNumber()}];var l=this.dict.lookup(o.Z.of("W"),i.Z);for(this.byteWidths=[-1,-1,-1],n=0,s=l.size();n<s;n++)this.byteWidths[n]=l.lookup(n,a.Z).asNumber()}return t.prototype.parseIntoContext=function(){if(this.alreadyParsed)throw new n.aj("PDFXRefStreamParser","parseIntoContext");return this.alreadyParsed=!0,this.context.trailerInfo={Root:this.dict.get(o.Z.of("Root")),Encrypt:this.dict.get(o.Z.of("Encrypt")),Info:this.dict.get(o.Z.of("Info")),ID:this.dict.get(o.Z.of("ID"))},this.parseEntries()},t.prototype.parseEntries=function(){for(var t=[],e=this.byteWidths,r=e[0],n=e[1],i=e[2],o=0,a=this.subsections.length;o<a;o++)for(var u=this.subsections[o],c=u.firstObjectNumber,h=u.length,l=0;l<h;l++){for(var f=0,d=0,p=r;d<p;d++)f=f<<8|this.bytes.next();var g=0;for(d=0,p=n;d<p;d++)g=g<<8|this.bytes.next();var v=0;for(d=0,p=i;d<p;d++)v=v<<8|this.bytes.next();0===r&&(f=1);var m=c+l,y={ref:s.Z.of(m,v),offset:g,deleted:0===f,inObjectStream:2===f};t.push(y)}return t},t.forStream=function(e){return new t(e)},t}()},852:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(7638),i=r(4219),o=function(t){return 32===t||9===t||13===t||10===t};const a=function(t){function e(e,r){var n=t.call(this,r)||this;return n.stream=e,n.input=new Uint8Array(5),r&&(r*=.8),n}return(0,n.ZT)(e,t),e.prototype.readBlock=function(){for(var t=this.stream,e=t.getByte();o(e);)e=t.getByte();if(-1!==e&&126!==e){var r,n,i=this.bufferLength;if(122===e){for(r=this.ensureBuffer(i+4),n=0;n<4;++n)r[i+n]=0;this.bufferLength+=4}else{var a=this.input;for(a[0]=e,n=1;n<5;++n){for(e=t.getByte();o(e);)e=t.getByte();if(a[n]=e,-1===e||126===e)break}if(r=this.ensureBuffer(i+n-1),this.bufferLength+=n-1,n<5){for(;n<5;++n)a[n]=117;this.eof=!0}var s=0;for(n=0;n<5;++n)s=85*s+(a[n]-33);for(n=3;n>=0;--n)r[i+n]=255&s,s>>=8}}else this.eof=!0},e}(i.Z)},821:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(7638);const i=function(t){function e(e,r){var n=t.call(this,r)||this;return n.stream=e,n.firstDigit=-1,r&&(r*=.5),n}return(0,n.ZT)(e,t),e.prototype.readBlock=function(){var t=this.stream.getBytes(8e3);if(t.length){for(var e=t.length+1>>1,r=this.ensureBuffer(this.bufferLength+e),n=this.bufferLength,i=this.firstDigit,o=0,a=t.length;o<a;o++){var s=t[o],u=void 0;if(s>=48&&s<=57)u=15&s;else{if(!(s>=65&&s<=70||s>=97&&s<=102)){if(62===s){this.eof=!0;break}continue}u=9+(15&s)}i<0?i=u:(r[n++]=i<<4|u,i=-1)}i>=0&&this.eof&&(r[n++]=i<<4,i=-1),this.firstDigit=i,this.bufferLength=n}else this.eof=!0},e}(r(4219).Z)},4219:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(1732),i=r(2854),o=new Uint8Array(0);const a=function(){function t(t){if(this.pos=0,this.bufferLength=0,this.eof=!1,this.buffer=o,this.minBufferLength=512,t)for(;this.minBufferLength<t;)this.minBufferLength*=2}return Object.defineProperty(t.prototype,"isEmpty",{get:function(){for(;!this.eof&&0===this.bufferLength;)this.readBlock();return 0===this.bufferLength},enumerable:!1,configurable:!0}),t.prototype.getByte=function(){for(var t=this.pos;this.bufferLength<=t;){if(this.eof)return-1;this.readBlock()}return this.buffer[this.pos++]},t.prototype.getUint16=function(){var t=this.getByte(),e=this.getByte();return-1===t||-1===e?-1:(t<<8)+e},t.prototype.getInt32=function(){return(this.getByte()<<24)+(this.getByte()<<16)+(this.getByte()<<8)+this.getByte()},t.prototype.getBytes=function(t,e){var r;void 0===e&&(e=!1);var n=this.pos;if(t){for(this.ensureBuffer(n+t),r=n+t;!this.eof&&this.bufferLength<r;)this.readBlock();var i=this.bufferLength;r>i&&(r=i)}else{for(;!this.eof;)this.readBlock();r=this.bufferLength}this.pos=r;var o=this.buffer.subarray(n,r);return!e||o instanceof Uint8ClampedArray?o:new Uint8ClampedArray(o)},t.prototype.peekByte=function(){var t=this.getByte();return this.pos--,t},t.prototype.peekBytes=function(t,e){void 0===e&&(e=!1);var r=this.getBytes(t,e);return this.pos-=r.length,r},t.prototype.skip=function(t){t||(t=1),this.pos+=t},t.prototype.reset=function(){this.pos=0},t.prototype.makeSubStream=function(t,e){for(var r=t+e;this.bufferLength<=r&&!this.eof;)this.readBlock();return new i.Z(this.buffer,t,e)},t.prototype.decode=function(){for(;!this.eof;)this.readBlock();return this.buffer.subarray(0,this.bufferLength)},t.prototype.readBlock=function(){throw new n.iQ(this.constructor.name,"readBlock")},t.prototype.ensureBuffer=function(t){var e=this.buffer;if(t<=e.byteLength)return e;for(var r=this.minBufferLength;r<t;)r*=2;var n=new Uint8Array(r);return n.set(e),this.buffer=n},t}()},8029:(t,e,r)=>{"use strict";r.d(e,{Z:()=>h});var n=r(7638),i=r(4219),o=new Int32Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),a=new Int32Array([3,4,5,6,7,8,9,10,65547,65549,65551,65553,131091,131095,131099,131103,196643,196651,196659,196667,262211,262227,262243,262259,327811,327843,327875,327907,258,258,258]),s=new Int32Array([1,2,3,4,65541,65543,131081,131085,196625,196633,262177,262193,327745,327777,393345,393409,459009,459137,524801,525057,590849,591361,657409,658433,724993,727041,794625,798721,868353,876545]),u=[new Int32Array([459008,524368,524304,524568,459024,524400,524336,590016,459016,524384,524320,589984,524288,524416,524352,590048,459012,524376,524312,589968,459028,524408,524344,590032,459020,524392,524328,59e4,524296,524424,524360,590064,459010,524372,524308,524572,459026,524404,524340,590024,459018,524388,524324,589992,524292,524420,524356,590056,459014,524380,524316,589976,459030,524412,524348,590040,459022,524396,524332,590008,524300,524428,524364,590072,459009,524370,524306,524570,459025,524402,524338,590020,459017,524386,524322,589988,524290,524418,524354,590052,459013,524378,524314,589972,459029,524410,524346,590036,459021,524394,524330,590004,524298,524426,524362,590068,459011,524374,524310,524574,459027,524406,524342,590028,459019,524390,524326,589996,524294,524422,524358,590060,459015,524382,524318,589980,459031,524414,524350,590044,459023,524398,524334,590012,524302,524430,524366,590076,459008,524369,524305,524569,459024,524401,524337,590018,459016,524385,524321,589986,524289,524417,524353,590050,459012,524377,524313,589970,459028,524409,524345,590034,459020,524393,524329,590002,524297,524425,524361,590066,459010,524373,524309,524573,459026,524405,524341,590026,459018,524389,524325,589994,524293,524421,524357,590058,459014,524381,524317,589978,459030,524413,524349,590042,459022,524397,524333,590010,524301,524429,524365,590074,459009,524371,524307,524571,459025,524403,524339,590022,459017,524387,524323,589990,524291,524419,524355,590054,459013,524379,524315,589974,459029,524411,524347,590038,459021,524395,524331,590006,524299,524427,524363,590070,459011,524375,524311,524575,459027,524407,524343,590030,459019,524391,524327,589998,524295,524423,524359,590062,459015,524383,524319,589982,459031,524415,524351,590046,459023,524399,524335,590014,524303,524431,524367,590078,459008,524368,524304,524568,459024,524400,524336,590017,459016,524384,524320,589985,524288,524416,524352,590049,459012,524376,524312,589969,459028,524408,524344,590033,459020,524392,524328,590001,524296,524424,524360,590065,459010,524372,524308,524572,459026,524404,524340,590025,459018,524388,524324,589993,524292,524420,524356,590057,459014,524380,524316,589977,459030,524412,524348,590041,459022,524396,524332,590009,524300,524428,524364,590073,459009,524370,524306,524570,459025,524402,524338,590021,459017,524386,524322,589989,524290,524418,524354,590053,459013,524378,524314,589973,459029,524410,524346,590037,459021,524394,524330,590005,524298,524426,524362,590069,459011,524374,524310,524574,459027,524406,524342,590029,459019,524390,524326,589997,524294,524422,524358,590061,459015,524382,524318,589981,459031,524414,524350,590045,459023,524398,524334,590013,524302,524430,524366,590077,459008,524369,524305,524569,459024,524401,524337,590019,459016,524385,524321,589987,524289,524417,524353,590051,459012,524377,524313,589971,459028,524409,524345,590035,459020,524393,524329,590003,524297,524425,524361,590067,459010,524373,524309,524573,459026,524405,524341,590027,459018,524389,524325,589995,524293,524421,524357,590059,459014,524381,524317,589979,459030,524413,524349,590043,459022,524397,524333,590011,524301,524429,524365,590075,459009,524371,524307,524571,459025,524403,524339,590023,459017,524387,524323,589991,524291,524419,524355,590055,459013,524379,524315,589975,459029,524411,524347,590039,459021,524395,524331,590007,524299,524427,524363,590071,459011,524375,524311,524575,459027,524407,524343,590031,459019,524391,524327,589999,524295,524423,524359,590063,459015,524383,524319,589983,459031,524415,524351,590047,459023,524399,524335,590015,524303,524431,524367,590079]),9],c=[new Int32Array([327680,327696,327688,327704,327684,327700,327692,327708,327682,327698,327690,327706,327686,327702,327694,0,327681,327697,327689,327705,327685,327701,327693,327709,327683,327699,327691,327707,327687,327703,327695,0]),5];const h=function(t){function e(e,r){var n=t.call(this,r)||this;n.stream=e;var i=e.getByte(),o=e.getByte();if(-1===i||-1===o)throw new Error("Invalid header in flate stream: "+i+", "+o);if(8!=(15&i))throw new Error("Unknown compression method in flate stream: "+i+", "+o);if(((i<<8)+o)%31!=0)throw new Error("Bad FCHECK in flate stream: "+i+", "+o);if(32&o)throw new Error("FDICT bit set in flate stream: "+i+", "+o);return n.codeSize=0,n.codeBuf=0,n}return(0,n.ZT)(e,t),e.prototype.readBlock=function(){var t,e,r=this.stream,n=this.getBits(3);if(1&n&&(this.eof=!0),0!=(n>>=1)){var i,h;if(1===n)i=u,h=c;else{if(2!==n)throw new Error("Unknown block type in flate stream");var l=this.getBits(5)+257,f=this.getBits(5)+1,d=this.getBits(4)+4,p=new Uint8Array(o.length),g=void 0;for(g=0;g<d;++g)p[o[g]]=this.getBits(3);var v=this.generateHuffmanTable(p);e=0,g=0;for(var m=l+f,y=new Uint8Array(m),b=void 0,w=void 0,k=void 0;g<m;){var x=this.getCode(v);if(16===x)b=2,w=3,k=e;else if(17===x)b=3,w=3,k=e=0;else{if(18!==x){y[g++]=e=x;continue}b=7,w=11,k=e=0}for(var Z=this.getBits(b)+w;Z-- >0;)y[g++]=k}i=this.generateHuffmanTable(y.subarray(0,l)),h=this.generateHuffmanTable(y.subarray(l,m))}for(var S=(t=this.buffer)?t.length:0,C=this.bufferLength;;){var F=this.getCode(i);if(F<256)C+1>=S&&(S=(t=this.ensureBuffer(C+1)).length),t[C++]=F;else{if(256===F)return void(this.bufferLength=C);var T=(F=a[F-=257])>>16;T>0&&(T=this.getBits(T)),e=(65535&F)+T,F=this.getCode(h),(T=(F=s[F])>>16)>0&&(T=this.getBits(T));var A=(65535&F)+T;C+e>=S&&(S=(t=this.ensureBuffer(C+e)).length);for(var O=0;O<e;++O,++C)t[C]=t[C-A]}}}else{var R=void 0;if(-1===(R=r.getByte()))throw new Error("Bad block header in flate stream");var z=R;if(-1===(R=r.getByte()))throw new Error("Bad block header in flate stream");if(z|=R<<8,-1===(R=r.getByte()))throw new Error("Bad block header in flate stream");var P=R;if(-1===(R=r.getByte()))throw new Error("Bad block header in flate stream");if((P|=R<<8)!=(65535&~z)&&(0!==z||0!==P))throw new Error("Bad uncompressed block length in flate stream");this.codeBuf=0,this.codeSize=0;var D=this.bufferLength;t=this.ensureBuffer(D+z);var N=D+z;if(this.bufferLength=N,0===z)-1===r.peekByte()&&(this.eof=!0);else for(var B=D;B<N;++B){if(-1===(R=r.getByte())){this.eof=!0;break}t[B]=R}}},e.prototype.getBits=function(t){for(var e,r=this.stream,n=this.codeSize,i=this.codeBuf;n<t;){if(-1===(e=r.getByte()))throw new Error("Bad encoding in flate stream");i|=e<<n,n+=8}return e=i&(1<<t)-1,this.codeBuf=i>>t,this.codeSize=n-=t,e},e.prototype.getCode=function(t){for(var e,r=this.stream,n=t[0],i=t[1],o=this.codeSize,a=this.codeBuf;o<i&&-1!==(e=r.getByte());)a|=e<<o,o+=8;var s=n[a&(1<<i)-1];"number"==typeof n&&console.log("FLATE:",s);var u=s>>16,c=65535&s;if(u<1||o<u)throw new Error("Bad encoding in flate stream");return this.codeBuf=a>>u,this.codeSize=o-u,c},e.prototype.generateHuffmanTable=function(t){var e,r=t.length,n=0;for(e=0;e<r;++e)t[e]>n&&(n=t[e]);for(var i=1<<n,o=new Int32Array(i),a=1,s=0,u=2;a<=n;++a,s<<=1,u<<=1)for(var c=0;c<r;++c)if(t[c]===a){var h=0,l=s;for(e=0;e<a;++e)h=h<<1|1&l,l>>=1;for(e=h;e<i;e+=u)o[e]=a<<16|c;++s}return[o,n]},e}(i.Z)},8503:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(7638);const i=function(t){function e(e,r,n){var i=t.call(this,r)||this;i.stream=e,i.cachedData=0,i.bitsCached=0;for(var o=4096,a={earlyChange:n,codeLength:9,nextCode:258,dictionaryValues:new Uint8Array(o),dictionaryLengths:new Uint16Array(o),dictionaryPrevCodes:new Uint16Array(o),currentSequence:new Uint8Array(o),currentSequenceLength:0},s=0;s<256;++s)a.dictionaryValues[s]=s,a.dictionaryLengths[s]=1;return i.lzwState=a,i}return(0,n.ZT)(e,t),e.prototype.readBlock=function(){var t,e,r,n=1024,i=this.lzwState;if(i){var o=i.earlyChange,a=i.nextCode,s=i.dictionaryValues,u=i.dictionaryLengths,c=i.dictionaryPrevCodes,h=i.codeLength,l=i.prevCode,f=i.currentSequence,d=i.currentSequenceLength,p=0,g=this.bufferLength,v=this.ensureBuffer(this.bufferLength+n);for(t=0;t<512;t++){var m=this.readBits(h),y=d>0;if(!m||m<256)f[0]=m,d=1;else{if(!(m>=258)){if(256===m){h=9,a=258,d=0;continue}this.eof=!0,delete this.lzwState;break}if(m<a)for(e=(d=u[m])-1,r=m;e>=0;e--)f[e]=s[r],r=c[r];else f[d++]=f[0]}if(y&&(c[a]=l,u[a]=u[l]+1,s[a]=f[0],h=++a+o&a+o-1?h:0|Math.min(Math.log(a+o)/.6931471805599453+1,12)),l=m,n<(p+=d)){do{n+=512}while(n<p);v=this.ensureBuffer(this.bufferLength+n)}for(e=0;e<d;e++)v[g++]=f[e]}i.nextCode=a,i.codeLength=h,i.prevCode=l,i.currentSequenceLength=d,this.bufferLength=g}},e.prototype.readBits=function(t){for(var e=this.bitsCached,r=this.cachedData;e<t;){var n=this.stream.getByte();if(-1===n)return this.eof=!0,null;r=r<<8|n,e+=8}return this.bitsCached=e-=t,this.cachedData=r,r>>>e&(1<<t)-1},e}(r(4219).Z)},2821:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(7638);const i=function(t){function e(e,r){var n=t.call(this,r)||this;return n.stream=e,n}return(0,n.ZT)(e,t),e.prototype.readBlock=function(){var t=this.stream.getBytes(2);if(!t||t.length<2||128===t[0])this.eof=!0;else{var e,r=this.bufferLength,n=t[0];if(n<128){if((e=this.ensureBuffer(r+n+1))[r++]=t[1],n>0){var i=this.stream.getBytes(n);e.set(i,r),r+=n}}else{n=257-n;var o=t[1];e=this.ensureBuffer(r+n+1);for(var a=0;a<n;a++)e[r++]=o}this.bufferLength=r}},e}(r(4219).Z)},2854:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const n=function(){function t(t,e,r){this.bytes=t,this.start=e||0,this.pos=this.start,this.end=e&&r?e+r:this.bytes.length}return Object.defineProperty(t.prototype,"length",{get:function(){return this.end-this.start},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isEmpty",{get:function(){return 0===this.length},enumerable:!1,configurable:!0}),t.prototype.getByte=function(){return this.pos>=this.end?-1:this.bytes[this.pos++]},t.prototype.getUint16=function(){var t=this.getByte(),e=this.getByte();return-1===t||-1===e?-1:(t<<8)+e},t.prototype.getInt32=function(){return(this.getByte()<<24)+(this.getByte()<<16)+(this.getByte()<<8)+this.getByte()},t.prototype.getBytes=function(t,e){void 0===e&&(e=!1);var r=this.bytes,n=this.pos,i=this.end;if(t){var o=n+t;return o>i&&(o=i),this.pos=o,a=r.subarray(n,o),e?new Uint8ClampedArray(a):a}var a=r.subarray(n,i);return e?new Uint8ClampedArray(a):a},t.prototype.peekByte=function(){var t=this.getByte();return this.pos--,t},t.prototype.peekBytes=function(t,e){void 0===e&&(e=!1);var r=this.getBytes(t,e);return this.pos-=r.length,r},t.prototype.skip=function(t){t||(t=1),this.pos+=t},t.prototype.reset=function(){this.pos=this.start},t.prototype.moveStart=function(){this.start=this.pos},t.prototype.makeSubStream=function(e,r){return new t(this.bytes,e,r)},t.prototype.decode=function(){return this.bytes},t}()},5386:(t,e,r)=>{"use strict";r.d(e,{y:()=>g});var n=r(1732),i=r(4055),o=r(7802),a=r(5268),s=r(3225),u=r(852),c=r(821),h=r(8029),l=r(8503),f=r(2821),d=r(2854),p=function(t,e,r){if(e===a.Z.of("FlateDecode"))return new h.Z(t);if(e===a.Z.of("LZWDecode")){var i=1;if(r instanceof o.Z){var d=r.lookup(a.Z.of("EarlyChange"));d instanceof s.Z&&(i=d.asNumber())}return new l.Z(t,void 0,i)}if(e===a.Z.of("ASCII85Decode"))return new u.Z(t);if(e===a.Z.of("ASCIIHexDecode"))return new c.Z(t);if(e===a.Z.of("RunLengthDecode"))return new f.Z(t);throw new n.l(e.asString())},g=function(t){var e=t.dict,r=t.contents,s=new d.Z(r),u=e.lookup(a.Z.of("Filter")),c=e.lookup(a.Z.of("DecodeParms"));if(u instanceof a.Z)s=p(s,u,c);else if(u instanceof i.Z)for(var h=0,l=u.size();h<l;h++)s=p(s,u.lookup(h,a.Z),c&&c.lookupMaybe(h,o.Z));else if(u)throw new n.VX([a.Z,i.Z],u);return s}},6613:(t,e,r)=>{"use strict";r.d(e,{Z:()=>u});var n=r(7638),i=r(7802),o=r(5268),a=r(7244),s=r(8071);const u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.prototype.Pages=function(){return this.lookup(o.Z.of("Pages"),i.Z)},e.prototype.AcroForm=function(){return this.lookupMaybe(o.Z.of("AcroForm"),i.Z)},e.prototype.getAcroForm=function(){var t=this.AcroForm();if(t)return a.PS.fromDict(t)},e.prototype.getOrCreateAcroForm=function(){var t=this.getAcroForm();if(!t){t=a.PS.create(this.context);var e=this.context.register(t.dict);this.set(o.Z.of("AcroForm"),e)}return t},e.prototype.ViewerPreferences=function(){return this.lookupMaybe(o.Z.of("ViewerPreferences"),i.Z)},e.prototype.getViewerPreferences=function(){var t=this.ViewerPreferences();if(t)return s.ZP.fromDict(t)},e.prototype.getOrCreateViewerPreferences=function(){var t=this.getViewerPreferences();if(!t){t=s.ZP.create(this.context);var e=this.context.register(t.dict);this.set(o.Z.of("ViewerPreferences"),e)}return t},e.prototype.insertLeafNode=function(t,e){var r=this.get(o.Z.of("Pages"));return this.Pages().insertLeafNode(t,e)||r},e.prototype.removeLeafNode=function(t){this.Pages().removeLeafNode(t)},e.withContextAndPages=function(t,r){var n=new Map;return n.set(o.Z.of("Type"),o.Z.of("Catalog")),n.set(o.Z.of("Pages"),r),new e(n,t)},e.fromMapWithContext=function(t,r){return new e(t,r)},e}(i.Z)},9153:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(7638),i=r(3238),o=r(5842);const a=function(t){function e(e,r,n){void 0===n&&(n=!0);var i=t.call(this,e,n)||this;return i.operators=r,i}return(0,n.ZT)(e,t),e.prototype.push=function(){for(var t,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];(t=this.operators).push.apply(t,e)},e.prototype.clone=function(t){for(var r=new Array(this.operators.length),n=0,i=this.operators.length;n<i;n++)r[n]=this.operators[n].clone(t);var o=this.dict,a=this.encode;return e.of(o.clone(t),r,a)},e.prototype.getContentsString=function(){for(var t="",e=0,r=this.operators.length;e<r;e++)t+=this.operators[e]+"\n";return t},e.prototype.getUnencodedContents=function(){for(var t=new Uint8Array(this.getUnencodedContentsSize()),e=0,r=0,n=this.operators.length;r<n;r++)e+=this.operators[r].copyBytesInto(t,e),t[e++]=o.Z.Newline;return t},e.prototype.getUnencodedContentsSize=function(){for(var t=0,e=0,r=this.operators.length;e<r;e++)t+=this.operators[e].sizeInBytes()+1;return t},e.of=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(i.Z)},4776:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n,i=r(7638),o=r(5268),a=r(4911),s=r(3238),u=r(1795);!function(t){t[t.Deleted=0]="Deleted",t[t.Uncompressed=1]="Uncompressed",t[t.Compressed=2]="Compressed"}(n||(n={}));const c=function(t){function e(e,r,i){void 0===i&&(i=!0);var a=t.call(this,e,i)||this;return a.computeIndex=function(){for(var t=[],e=0,r=0,n=a.entries.length;r<n;r++){var i=a.entries[r],o=a.entries[r-1];0===r?t.push(i.ref.objectNumber):i.ref.objectNumber-o.ref.objectNumber>1&&(t.push(e),t.push(i.ref.objectNumber),e=0),e+=1}return t.push(e),t},a.computeEntryTuples=function(){for(var t=new Array(a.entries.length),e=0,r=a.entries.length;e<r;e++){var i=a.entries[e];if(i.type===n.Deleted){var o=i.type,s=i.nextFreeObjectNumber,u=i.ref;t[e]=[o,s,u.generationNumber]}if(i.type===n.Uncompressed){o=i.type;var c=i.offset;u=i.ref,t[e]=[o,c,u.generationNumber]}if(i.type===n.Compressed){o=i.type;var h=i.objectStreamRef,l=i.index;t[e]=[o,h.objectNumber,l]}}return t},a.computeMaxEntryByteWidths=function(){for(var t=a.entryTuplesCache.access(),e=[0,0,0],r=0,n=t.length;r<n;r++){var i=t[r],o=i[0],s=i[1],c=i[2],h=(0,u.yJ)(o),l=(0,u.yJ)(s),f=(0,u.yJ)(c);h>e[0]&&(e[0]=h),l>e[1]&&(e[1]=l),f>e[2]&&(e[2]=f)}return e},a.entries=r||[],a.entryTuplesCache=u.Ct.populatedBy(a.computeEntryTuples),a.maxByteWidthsCache=u.Ct.populatedBy(a.computeMaxEntryByteWidths),a.indexCache=u.Ct.populatedBy(a.computeIndex),e.set(o.Z.of("Type"),o.Z.of("XRef")),a}return(0,i.ZT)(e,t),e.prototype.addDeletedEntry=function(t,e){var r=n.Deleted;this.entries.push({type:r,ref:t,nextFreeObjectNumber:e}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},e.prototype.addUncompressedEntry=function(t,e){var r=n.Uncompressed;this.entries.push({type:r,ref:t,offset:e}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},e.prototype.addCompressedEntry=function(t,e,r){var i=n.Compressed;this.entries.push({type:i,ref:t,objectStreamRef:e,index:r}),this.entryTuplesCache.invalidate(),this.maxByteWidthsCache.invalidate(),this.indexCache.invalidate(),this.contentsCache.invalidate()},e.prototype.clone=function(t){var r=this,n=r.dict,i=r.entries,o=r.encode;return e.of(n.clone(t),i.slice(),o)},e.prototype.getContentsString=function(){for(var t=this.entryTuplesCache.access(),e=this.maxByteWidthsCache.access(),r="",n=0,i=t.length;n<i;n++){for(var o=t[n],a=o[0],s=o[1],c=o[2],h=(0,u.GP)((0,u.DV)(a)),l=(0,u.GP)((0,u.DV)(s)),f=(0,u.GP)((0,u.DV)(c)),d=e[0]-1;d>=0;d--)r+=(h[d]||0).toString(2);for(d=e[1]-1;d>=0;d--)r+=(l[d]||0).toString(2);for(d=e[2]-1;d>=0;d--)r+=(f[d]||0).toString(2)}return r},e.prototype.getUnencodedContents=function(){for(var t=this.entryTuplesCache.access(),e=this.maxByteWidthsCache.access(),r=new Uint8Array(this.getUnencodedContentsSize()),n=0,i=0,o=t.length;i<o;i++){for(var a=t[i],s=a[0],c=a[1],h=a[2],l=(0,u.GP)((0,u.DV)(s)),f=(0,u.GP)((0,u.DV)(c)),d=(0,u.GP)((0,u.DV)(h)),p=e[0]-1;p>=0;p--)r[n++]=l[p]||0;for(p=e[1]-1;p>=0;p--)r[n++]=f[p]||0;for(p=e[2]-1;p>=0;p--)r[n++]=d[p]||0}return r},e.prototype.getUnencodedContentsSize=function(){var t=this.maxByteWidthsCache.access();return(0,u.Sm)(t)*this.entries.length},e.prototype.updateDict=function(){t.prototype.updateDict.call(this);var e=this.maxByteWidthsCache.access(),r=this.indexCache.access(),n=this.dict.context;this.dict.set(o.Z.of("W"),n.obj(e)),this.dict.set(o.Z.of("Index"),n.obj(r))},e.create=function(t,r){void 0===r&&(r=!0);var n=new e(t,[],r);return n.addDeletedEntry(a.Z.of(0,65535),0),n},e.of=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(s.Z)},3238:(t,e,r)=>{"use strict";r.d(e,{Z:()=>h});var n=r(7638),i=r(9591),o=r.n(i),a=r(1732),s=r(5268),u=r(6962),c=r(1795);const h=function(t){function e(e,r){var n=t.call(this,e)||this;return n.computeContents=function(){var t=n.getUnencodedContents();return n.encode?o().deflate(t):t},n.encode=r,r&&e.set(s.Z.of("Filter"),s.Z.of("FlateDecode")),n.contentsCache=c.Ct.populatedBy(n.computeContents),n}return(0,n.ZT)(e,t),e.prototype.getContents=function(){return this.contentsCache.access()},e.prototype.getContentsSize=function(){return this.contentsCache.access().length},e.prototype.getUnencodedContents=function(){throw new a.iQ(this.constructor.name,"getUnencodedContents")},e}(u.Z)},4245:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n=r(7638),i=r(5268),o=r(3225),a=r(3238),s=r(5842),u=r(1795);const c=function(t){function e(e,r,n){void 0===n&&(n=!0);var a=t.call(this,e.obj({}),n)||this;return a.objects=r,a.offsets=a.computeObjectOffsets(),a.offsetsString=a.computeOffsetsString(),a.dict.set(i.Z.of("Type"),i.Z.of("ObjStm")),a.dict.set(i.Z.of("N"),o.Z.of(a.objects.length)),a.dict.set(i.Z.of("First"),o.Z.of(a.offsetsString.length)),a}return(0,n.ZT)(e,t),e.prototype.getObjectsCount=function(){return this.objects.length},e.prototype.clone=function(t){return e.withContextAndObjects(t||this.dict.context,this.objects.slice(),this.encode)},e.prototype.getContentsString=function(){for(var t=this.offsetsString,e=0,r=this.objects.length;e<r;e++)t+=this.objects[e][1]+"\n";return t},e.prototype.getUnencodedContents=function(){for(var t=new Uint8Array(this.getUnencodedContentsSize()),e=(0,u.C1)(this.offsetsString,t,0),r=0,n=this.objects.length;r<n;r++)e+=this.objects[r][1].copyBytesInto(t,e),t[e++]=s.Z.Newline;return t},e.prototype.getUnencodedContentsSize=function(){return this.offsetsString.length+(0,u.Z$)(this.offsets)[1]+(0,u.Z$)(this.objects)[1].sizeInBytes()+1},e.prototype.computeOffsetsString=function(){for(var t="",e=0,r=this.offsets.length;e<r;e++){var n=this.offsets[e];t+=n[0]+" "+n[1]+" "}return t},e.prototype.computeObjectOffsets=function(){for(var t=0,e=new Array(this.objects.length),r=0,n=this.objects.length;r<n;r++){var i=this.objects[r],o=i[0],a=i[1];e[r]=[o.objectNumber,t],t+=a.sizeInBytes()+1}return e},e.withContextAndObjects=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(a.Z)},4874:(t,e,r)=>{"use strict";r.d(e,{Z:()=>c});var n=r(7638),i=r(4055),o=r(7802),a=r(5268),s=r(3225),u=r(6962);const c=function(t){function e(e,r,n){void 0===n&&(n=!0);var i=t.call(this,e,r)||this;return i.normalized=!1,i.autoNormalizeCTM=n,i}return(0,n.ZT)(e,t),e.prototype.clone=function(t){for(var r=e.fromMapWithContext(new Map,t||this.context,this.autoNormalizeCTM),n=this.entries(),i=0,o=n.length;i<o;i++){var a=n[i],s=a[0],u=a[1];r.set(s,u)}return r},e.prototype.Parent=function(){return this.lookupMaybe(a.Z.Parent,o.Z)},e.prototype.Contents=function(){return this.lookup(a.Z.of("Contents"))},e.prototype.Annots=function(){return this.lookupMaybe(a.Z.Annots,i.Z)},e.prototype.BleedBox=function(){return this.lookupMaybe(a.Z.BleedBox,i.Z)},e.prototype.TrimBox=function(){return this.lookupMaybe(a.Z.TrimBox,i.Z)},e.prototype.ArtBox=function(){return this.lookupMaybe(a.Z.ArtBox,i.Z)},e.prototype.Resources=function(){var t=this.getInheritableAttribute(a.Z.Resources);return this.context.lookupMaybe(t,o.Z)},e.prototype.MediaBox=function(){var t=this.getInheritableAttribute(a.Z.MediaBox);return this.context.lookup(t,i.Z)},e.prototype.CropBox=function(){var t=this.getInheritableAttribute(a.Z.CropBox);return this.context.lookupMaybe(t,i.Z)},e.prototype.Rotate=function(){var t=this.getInheritableAttribute(a.Z.Rotate);return this.context.lookupMaybe(t,s.Z)},e.prototype.getInheritableAttribute=function(t){var e;return this.ascend((function(r){e||(e=r.get(t))})),e},e.prototype.setParent=function(t){this.set(a.Z.Parent,t)},e.prototype.addContentStream=function(t){var e=this.normalizedEntries().Contents||this.context.obj([]);this.set(a.Z.Contents,e),e.push(t)},e.prototype.wrapContentStreams=function(t,e){var r=this.Contents();return r instanceof i.Z&&(r.insert(0,t),r.push(e),!0)},e.prototype.addAnnot=function(t){this.normalizedEntries().Annots.push(t)},e.prototype.removeAnnot=function(t){var e=this.normalizedEntries().Annots,r=e.indexOf(t);void 0!==r&&e.remove(r)},e.prototype.setFontDictionary=function(t,e){this.normalizedEntries().Font.set(t,e)},e.prototype.setXObject=function(t,e){this.normalizedEntries().XObject.set(t,e)},e.prototype.setExtGState=function(t,e){this.normalizedEntries().ExtGState.set(t,e)},e.prototype.ascend=function(t){t(this);var e=this.Parent();e&&e.ascend(t)},e.prototype.normalize=function(){if(!this.normalized){var t=this.context,e=this.get(a.Z.Contents);this.context.lookup(e)instanceof u.Z&&this.set(a.Z.Contents,t.obj([e])),this.autoNormalizeCTM&&this.wrapContentStreams(this.context.getPushGraphicsStateContentStream(),this.context.getPopGraphicsStateContentStream());var r=this.getInheritableAttribute(a.Z.Resources),n=t.lookupMaybe(r,o.Z)||t.obj({});this.set(a.Z.Resources,n);var i=n.lookupMaybe(a.Z.Font,o.Z)||t.obj({});n.set(a.Z.Font,i);var s=n.lookupMaybe(a.Z.XObject,o.Z)||t.obj({});n.set(a.Z.XObject,s);var c=n.lookupMaybe(a.Z.ExtGState,o.Z)||t.obj({});n.set(a.Z.ExtGState,c);var h=this.Annots()||t.obj([]);this.set(a.Z.Annots,h),this.normalized=!0}},e.prototype.normalizedEntries=function(){this.normalize();var t=this.Annots(),e=this.Resources();return{Annots:t,Resources:e,Contents:this.Contents(),Font:e.lookup(a.Z.Font,o.Z),XObject:e.lookup(a.Z.XObject,o.Z),ExtGState:e.lookup(a.Z.ExtGState,o.Z)}},e.InheritableEntries=["Resources","MediaBox","CropBox","Rotate"],e.withContextAndParent=function(t,r){var n=new Map;return n.set(a.Z.Type,a.Z.Page),n.set(a.Z.Parent,r),n.set(a.Z.Resources,t.obj({})),n.set(a.Z.MediaBox,t.obj([0,0,612,792])),new e(n,t,!1)},e.fromMapWithContext=function(t,r,n){return void 0===n&&(n=!0),new e(t,r,n)},e}(o.Z)},4801:(t,e,r)=>{"use strict";r.d(e,{Z:()=>h});var n=r(7638),i=r(4055),o=r(7802),a=r(5268),s=r(3225),u=r(4874),c=r(1732);const h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(e,t),e.prototype.Parent=function(){return this.lookup(a.Z.of("Parent"))},e.prototype.Kids=function(){return this.lookup(a.Z.of("Kids"),i.Z)},e.prototype.Count=function(){return this.lookup(a.Z.of("Count"),s.Z)},e.prototype.pushTreeNode=function(t){this.Kids().push(t)},e.prototype.pushLeafNode=function(t){var e=this.Kids();this.insertLeafKid(e.size(),t)},e.prototype.insertLeafNode=function(t,r){var n=this.Kids(),i=this.Count().asNumber();if(r>i)throw new c.Y8(r,i);for(var o=r,a=0,s=n.size();a<s;a++){if(0===o)return void this.insertLeafKid(a,t);var h=n.get(a),l=this.context.lookup(h);if(l instanceof e){if(l.Count().asNumber()>o)return l.insertLeafNode(t,o)||h;o-=l.Count().asNumber()}l instanceof u.Z&&(o-=1)}if(0!==o)throw new c.bg(r,"insertLeafNode");this.insertLeafKid(n.size(),t)},e.prototype.removeLeafNode=function(t,r){void 0===r&&(r=!0);var n=this.Kids(),i=this.Count().asNumber();if(t>=i)throw new c.Y8(t,i);for(var o=t,a=0,s=n.size();a<s;a++){var h=n.get(a),l=this.context.lookup(h);if(l instanceof e){if(l.Count().asNumber()>o)return l.removeLeafNode(o,r),void(r&&0===l.Kids().size()&&n.remove(a));o-=l.Count().asNumber()}if(l instanceof u.Z){if(0===o)return void this.removeKid(a);o-=1}}throw new c.bg(t,"removeLeafNode")},e.prototype.ascend=function(t){t(this);var e=this.Parent();e&&e.ascend(t)},e.prototype.traverse=function(t){for(var r=this.Kids(),n=0,i=r.size();n<i;n++){var o=r.get(n),a=this.context.lookup(o);a instanceof e&&a.traverse(t),t(a,o)}},e.prototype.insertLeafKid=function(t,e){var r=this.Kids();this.ascend((function(t){var e=t.Count().asNumber()+1;t.set(a.Z.of("Count"),s.Z.of(e))})),r.insert(t,e)},e.prototype.removeKid=function(t){var e=this.Kids();e.lookup(t)instanceof u.Z&&this.ascend((function(t){var e=t.Count().asNumber()-1;t.set(a.Z.of("Count"),s.Z.of(e))})),e.remove(t)},e.withContext=function(t,r){var n=new Map;return n.set(a.Z.of("Type"),a.Z.of("Pages")),n.set(a.Z.of("Kids"),t.obj([])),n.set(a.Z.of("Count"),t.obj(0)),r&&n.set(a.Z.of("Parent"),r),new e(n,t)},e.fromMapWithContext=function(t,r){return new e(t,r)},e}(o.Z)},5842:(t,e,r)=>{"use strict";var n;r.d(e,{Z:()=>i}),function(t){t[t.Null=0]="Null",t[t.Backspace=8]="Backspace",t[t.Tab=9]="Tab",t[t.Newline=10]="Newline",t[t.FormFeed=12]="FormFeed",t[t.CarriageReturn=13]="CarriageReturn",t[t.Space=32]="Space",t[t.ExclamationPoint=33]="ExclamationPoint",t[t.Hash=35]="Hash",t[t.Percent=37]="Percent",t[t.LeftParen=40]="LeftParen",t[t.RightParen=41]="RightParen",t[t.Plus=43]="Plus",t[t.Minus=45]="Minus",t[t.Dash=45]="Dash",t[t.Period=46]="Period",t[t.ForwardSlash=47]="ForwardSlash",t[t.Zero=48]="Zero",t[t.One=49]="One",t[t.Two=50]="Two",t[t.Three=51]="Three",t[t.Four=52]="Four",t[t.Five=53]="Five",t[t.Six=54]="Six",t[t.Seven=55]="Seven",t[t.Eight=56]="Eight",t[t.Nine=57]="Nine",t[t.LessThan=60]="LessThan",t[t.GreaterThan=62]="GreaterThan",t[t.A=65]="A",t[t.D=68]="D",t[t.E=69]="E",t[t.F=70]="F",t[t.O=79]="O",t[t.P=80]="P",t[t.R=82]="R",t[t.LeftSquareBracket=91]="LeftSquareBracket",t[t.BackSlash=92]="BackSlash",t[t.RightSquareBracket=93]="RightSquareBracket",t[t.a=97]="a",t[t.b=98]="b",t[t.d=100]="d",t[t.e=101]="e",t[t.f=102]="f",t[t.i=105]="i",t[t.j=106]="j",t[t.l=108]="l",t[t.m=109]="m",t[t.n=110]="n",t[t.o=111]="o",t[t.r=114]="r",t[t.s=115]="s",t[t.t=116]="t",t[t.u=117]="u",t[t.x=120]="x",t[t.LeftCurly=123]="LeftCurly",t[t.RightCurly=125]="RightCurly",t[t.Tilde=126]="Tilde"}(n||(n={}));const i=n},2558:(t,e,r)=>{"use strict";r.d(e,{p:()=>i});var n=r(5842),i=new Uint8Array(256);i[n.Z.LeftParen]=1,i[n.Z.RightParen]=1,i[n.Z.LessThan]=1,i[n.Z.GreaterThan]=1,i[n.Z.LeftSquareBracket]=1,i[n.Z.RightSquareBracket]=1,i[n.Z.LeftCurly]=1,i[n.Z.RightCurly]=1,i[n.Z.ForwardSlash]=1,i[n.Z.Percent]=1},2736:(t,e,r)=>{"use strict";r.d(e,{m:()=>a});for(var n=r(5842),i=r(2558),o=r(9685),a=new Uint8Array(256),s=0;s<256;s++)a[s]=o.a[s]||i.p[s]?1:0;a[n.Z.Hash]=1},3042:(t,e,r)=>{"use strict";r.d(e,{L:()=>h});var n=r(7638),i=r(5842),o=i.Z.Space,a=i.Z.CarriageReturn,s=i.Z.Newline,u=[i.Z.s,i.Z.t,i.Z.r,i.Z.e,i.Z.a,i.Z.m],c=[i.Z.e,i.Z.n,i.Z.d,i.Z.s,i.Z.t,i.Z.r,i.Z.e,i.Z.a,i.Z.m],h={header:[i.Z.Percent,i.Z.P,i.Z.D,i.Z.F,i.Z.Dash],eof:[i.Z.Percent,i.Z.Percent,i.Z.E,i.Z.O,i.Z.F],obj:[i.Z.o,i.Z.b,i.Z.j],endobj:[i.Z.e,i.Z.n,i.Z.d,i.Z.o,i.Z.b,i.Z.j],xref:[i.Z.x,i.Z.r,i.Z.e,i.Z.f],trailer:[i.Z.t,i.Z.r,i.Z.a,i.Z.i,i.Z.l,i.Z.e,i.Z.r],startxref:[i.Z.s,i.Z.t,i.Z.a,i.Z.r,i.Z.t,i.Z.x,i.Z.r,i.Z.e,i.Z.f],true:[i.Z.t,i.Z.r,i.Z.u,i.Z.e],false:[i.Z.f,i.Z.a,i.Z.l,i.Z.s,i.Z.e],null:[i.Z.n,i.Z.u,i.Z.l,i.Z.l],stream:u,streamEOF1:(0,n.pr)(u,[o,a,s]),streamEOF2:(0,n.pr)(u,[a,s]),streamEOF3:(0,n.pr)(u,[a]),streamEOF4:(0,n.pr)(u,[s]),endstream:c,EOF1endstream:(0,n.pr)([a,s],c),EOF2endstream:(0,n.pr)([a],c),EOF3endstream:(0,n.pr)([s],c)}},986:(t,e,r)=>{"use strict";r.d(e,{FT:()=>i,BE:()=>a});var n=r(5842),i=new Uint8Array(256);i[n.Z.Zero]=1,i[n.Z.One]=1,i[n.Z.Two]=1,i[n.Z.Three]=1,i[n.Z.Four]=1,i[n.Z.Five]=1,i[n.Z.Six]=1,i[n.Z.Seven]=1,i[n.Z.Eight]=1,i[n.Z.Nine]=1;var o=new Uint8Array(256);o[n.Z.Period]=1,o[n.Z.Plus]=1,o[n.Z.Minus]=1;for(var a=new Uint8Array(256),s=0;s<256;s++)a[s]=i[s]||o[s]?1:0},9685:(t,e,r)=>{"use strict";r.d(e,{a:()=>i});var n=r(5842),i=new Uint8Array(256);i[n.Z.Null]=1,i[n.Z.Tab]=1,i[n.Z.Newline]=1,i[n.Z.FormFeed]=1,i[n.Z.CarriageReturn]=1,i[n.Z.Space]=1},4237:(t,e,r)=>{"use strict";r.d(e,{Z:()=>g});var n=r(7638),i=r(1617),o=r(9176),a=r(314),s=r(5268),u=r(3225),c=r(4911),h=r(6962),l=r(4776),f=r(4245),d=r(2862),p=r(1795);const g=function(t){function e(e,r,n,i){var o=t.call(this,e,r)||this;return o.encodeStreams=n,o.objectsPerStream=i,o}return(0,n.ZT)(e,t),e.prototype.computeBufferSize=function(){return(0,n.mG)(this,void 0,void 0,(function(){var t,e,r,d,g,v,m,y,b,w,k,x,Z,S,C,F,T,A,O;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:t=this.context.largestObjectNumber+1,e=i.Z.forVersion(1,7),r=e.sizeInBytes()+2,d=l.Z.create(this.createTrailerDict(),this.encodeStreams),g=[],v=[],m=[],y=this.context.enumerateIndirectObjects(),x=0,Z=y.length,n.label=1;case 1:return x<Z?(b=y[x],C=b[0],w=b[1],C===this.context.trailerInfo.Encrypt||w instanceof h.Z||w instanceof a.Z||0!==C.generationNumber?(g.push(b),d.addUncompressedEntry(C,r),r+=this.computeIndirectObjectSize(b),this.shouldWaitForTick(1)?[4,(0,p.uj)()]:[3,3]):[3,4]):[3,6];case 2:n.sent(),n.label=3;case 3:return[3,5];case 4:S=(0,p.Z$)(v),k=(0,p.Z$)(m),S&&S.length%this.objectsPerStream!=0||(S=[],v.push(S),k=c.Z.of(t++),m.push(k)),d.addCompressedEntry(C,k,S.length),S.push(b),n.label=5;case 5:return x++,[3,1];case 6:x=0,Z=v.length,n.label=7;case 7:return x<Z?(S=v[x],C=m[x],F=f.Z.withContextAndObjects(this.context,S,this.encodeStreams),d.addUncompressedEntry(C,r),r+=this.computeIndirectObjectSize([C,F]),g.push([C,F]),this.shouldWaitForTick(S.length)?[4,(0,p.uj)()]:[3,9]):[3,10];case 8:n.sent(),n.label=9;case 9:return x++,[3,7];case 10:return T=c.Z.of(t++),d.dict.set(s.Z.of("Size"),u.Z.of(t)),d.addUncompressedEntry(T,r),A=r,r+=this.computeIndirectObjectSize([T,d]),g.push([T,d]),O=o.Z.forLastCrossRefSectionOffset(A),[2,{size:r+=O.sizeInBytes(),header:e,indirectObjects:g,trailer:O}]}}))}))},e.forContext=function(t,r,n,i){return void 0===n&&(n=!0),void 0===i&&(i=50),new e(t,r,n,i)},e}(d.Z)},2862:(t,e,r)=>{"use strict";r.d(e,{Z:()=>l});var n=r(7638),i=r(95),o=r(1617),a=r(9176),s=r(8799),u=r(4245),c=r(5842),h=r(1795);const l=function(){function t(t,e){var r=this;this.parsedObjects=0,this.shouldWaitForTick=function(t){return r.parsedObjects+=t,r.parsedObjects%r.objectsPerTick==0},this.context=t,this.objectsPerTick=e}return t.prototype.serializeToBuffer=function(){return(0,n.mG)(this,void 0,void 0,(function(){var t,e,r,i,o,a,s,l,f,d,p,g,v,m,y,b,w;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return[4,this.computeBufferSize()];case 1:t=n.sent(),e=t.size,r=t.header,i=t.indirectObjects,o=t.xref,a=t.trailerDict,s=t.trailer,l=0,f=new Uint8Array(e),l+=r.copyBytesInto(f,l),f[l++]=c.Z.Newline,f[l++]=c.Z.Newline,d=0,p=i.length,n.label=2;case 2:return d<p?(g=i[d],v=g[0],m=g[1],y=String(v.objectNumber),l+=(0,h.C1)(y,f,l),f[l++]=c.Z.Space,b=String(v.generationNumber),l+=(0,h.C1)(b,f,l),f[l++]=c.Z.Space,f[l++]=c.Z.o,f[l++]=c.Z.b,f[l++]=c.Z.j,f[l++]=c.Z.Newline,l+=m.copyBytesInto(f,l),f[l++]=c.Z.Newline,f[l++]=c.Z.e,f[l++]=c.Z.n,f[l++]=c.Z.d,f[l++]=c.Z.o,f[l++]=c.Z.b,f[l++]=c.Z.j,f[l++]=c.Z.Newline,f[l++]=c.Z.Newline,w=m instanceof u.Z?m.getObjectsCount():1,this.shouldWaitForTick(w)?[4,(0,h.uj)()]:[3,4]):[3,5];case 3:n.sent(),n.label=4;case 4:return d++,[3,2];case 5:return o&&(l+=o.copyBytesInto(f,l),f[l++]=c.Z.Newline),a&&(l+=a.copyBytesInto(f,l),f[l++]=c.Z.Newline,f[l++]=c.Z.Newline),l+=s.copyBytesInto(f,l),[2,f]}}))}))},t.prototype.computeIndirectObjectSize=function(t){var e=t[0],r=t[1];return e.sizeInBytes()+3+(r.sizeInBytes()+9)},t.prototype.createTrailerDict=function(){return this.context.obj({Size:this.context.largestObjectNumber+1,Root:this.context.trailerInfo.Root,Encrypt:this.context.trailerInfo.Encrypt,Info:this.context.trailerInfo.Info,ID:this.context.trailerInfo.ID})},t.prototype.computeBufferSize=function(){return(0,n.mG)(this,void 0,void 0,(function(){var t,e,r,u,c,l,f,d,p,g,v;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:t=o.Z.forVersion(1,7),e=t.sizeInBytes()+2,r=i.Z.create(),u=this.context.enumerateIndirectObjects(),c=0,l=u.length,n.label=1;case 1:return c<l?(f=u[c],d=f[0],r.addEntry(d,e),e+=this.computeIndirectObjectSize(f),this.shouldWaitForTick(1)?[4,(0,h.uj)()]:[3,3]):[3,4];case 2:n.sent(),n.label=3;case 3:return c++,[3,1];case 4:return p=e,e+=r.sizeInBytes()+1,g=s.Z.of(this.createTrailerDict()),e+=g.sizeInBytes()+2,v=a.Z.forLastCrossRefSectionOffset(p),[2,{size:e+=v.sizeInBytes(),header:t,indirectObjects:u,xref:r,trailerDict:g,trailer:v}]}}))}))},t.forContext=function(e,r){return new t(e,r)},t}()},9055:(t,e,r)=>{"use strict";r.d(e,{PDFDocument:()=>n.Rj});var n=r(2902);r(6107),r(1795)},2056:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const n=function(){function t(t){this.populate=t,this.value=void 0}return t.prototype.getValue=function(){return this.value},t.prototype.access=function(){return this.value||(this.value=this.populate()),this.value},t.prototype.invalidate=function(){this.value=void 0},t.populatedBy=function(e){return new t(e)},t}()},2499:(t,e,r)=>{"use strict";r.d(e,{Z$:()=>o,b3:()=>a,M5:()=>s,Jm:()=>u,Qo:()=>c,Yj:()=>h,PF:()=>l,GP:()=>f,Sm:()=>d,w6:()=>p,Jp:()=>g,TE:()=>v,_f:()=>m});var n=r(6617),i=r(2244),o=function(t){return t[t.length-1]},a=function(t){if(t instanceof Uint8Array)return t;for(var e=t.length,r=new Uint8Array(e),n=0;n<e;n++)r[n]=t.charCodeAt(n);return r},s=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=t.length,n=[],i=0;i<r;i++){var o=t[i];n[i]=o instanceof Uint8Array?o:a(o)}var s=0;for(i=0;i<r;i++)s+=t[i].length;for(var u=new Uint8Array(s),c=0,h=0;h<r;h++)for(var l=n[h],f=0,d=l.length;f<d;f++)u[c++]=l[f];return u},u=function(t){for(var e=0,r=0,n=t.length;r<n;r++)e+=t[r].length;var i=new Uint8Array(e),o=0;for(r=0,n=t.length;r<n;r++){var a=t[r];i.set(a,o),o+=a.length}return i},c=function(t){for(var e="",r=0,n=t.length;r<n;r++)e+=(0,i.D_)(t[r]);return e},h=function(t,e){return t.id-e.id},l=function(t,e){for(var r=[],n=0,i=t.length;n<i;n++){var o=t[n],a=t[n-1];0!==n&&e(o)===e(a)||r.push(o)}return r},f=function(t){for(var e=t.length,r=0,n=Math.floor(e/2);r<n;r++){var i=r,o=e-r-1,a=t[r];t[i]=t[o],t[o]=a}return t},d=function(t){for(var e=0,r=0,n=t.length;r<n;r++)e+=t[r];return e},p=function(t,e){for(var r=new Array(e-t),n=0,i=r.length;n<i;n++)r[n]=t+n;return r},g=function(t,e){for(var r=new Array(e.length),n=0,i=e.length;n<i;n++)r[n]=t[e[n]];return r},v=function(t){return t instanceof Uint8Array||t instanceof ArrayBuffer||"string"==typeof t},m=function(t){if("string"==typeof t)return(0,n.Gw)(t);if(t instanceof ArrayBuffer)return new Uint8Array(t);if(t instanceof Uint8Array)return t;throw new TypeError("`input` must be one of `string | ArrayBuffer | Uint8Array`")}},6240:(t,e,r)=>{"use strict";r.d(e,{u:()=>n});var n=function(){return new Promise((function(t){setTimeout((function(){return t()}),0)}))}},6617:(t,e,r)=>{"use strict";r.d(e,{Eo:()=>a,Gw:()=>c});for(var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=new Uint8Array(256),o=0;o<n.length;o++)i[n.charCodeAt(o)]=o;var a=function(t){for(var e="",r=t.length,i=0;i<r;i+=3)e+=n[t[i]>>2],e+=n[(3&t[i])<<4|t[i+1]>>4],e+=n[(15&t[i+1])<<2|t[i+2]>>6],e+=n[63&t[i+2]];return r%3==2?e=e.substring(0,e.length-1)+"=":r%3==1&&(e=e.substring(0,e.length-2)+"=="),e},s=function(t){var e,r,n,o,a,s=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(s--,"="===t[t.length-2]&&s--);var h=new Uint8Array(s);for(e=0;e<u;e+=4)r=i[t.charCodeAt(e)],n=i[t.charCodeAt(e+1)],o=i[t.charCodeAt(e+2)],a=i[t.charCodeAt(e+3)],h[c++]=r<<2|n>>4,h[c++]=(15&n)<<4|o>>2,h[c++]=(3&o)<<6|63&a;return h},u=/^(data)?:?([\w\/\+]+)?;?(charset=[\w-]+|base64)?.*,/i,c=function(t){var e=t.trim(),r=e.substring(0,100).match(u);if(!r)return s(e);var n=r[0],i=e.substring(n.length);return s(i)}},2383:(t,e,r)=>{"use strict";r.d(e,{v:()=>n});var n=function(t){throw new Error(t)}},1795:(t,e,r)=>{"use strict";r.d(e,{Qo:()=>n.Qo,Yj:()=>n.Yj,TE:()=>n.TE,Z$:()=>n.Z$,M5:()=>n.M5,Jm:()=>n.Jm,Jp:()=>n.Jp,w6:()=>n.w6,GP:()=>n.GP,PF:()=>n.PF,Sm:()=>n.Sm,_f:()=>n._f,b3:()=>n.b3,uj:()=>i.u,si:()=>o.si,KU:()=>o.KU,Vk:()=>o.Vk,D_:()=>o.D_,Dc:()=>o.Dc,Qs:()=>o.Qs,FV:()=>o.FV,C1:()=>o.C1,JZ:()=>o.JZ,f7:()=>o.f7,VX:()=>o.VX,Sk:()=>o.Sk,sG:()=>o.sG,GN:()=>o.GN,yq:()=>o.yq,zv:()=>o.zv,CK:()=>o.CK,O0:()=>a.O0,aB:()=>a.aB,nB:()=>a.nB,DV:()=>s.DV,D$:()=>s.D$,yJ:()=>s.yJ,vU:()=>u.v,Eo:()=>c.Eo,Cl:()=>h.Cl,EO:()=>h.EO,pO:()=>l.pO,Qk:()=>l.Qk,ku:()=>l.ku,DA:()=>l.DA,GT:()=>l.GT,k$:()=>l.k$,m_:()=>l.m_,MU:()=>l.MU,z7:()=>l.z7,gI:()=>l.gI,zo:()=>l.zo,Ji:()=>f.J,Ct:()=>d.Z});var n=r(2499),i=r(6240),o=r(2244),a=r(5235),s=r(5398),u=r(2383),c=r(6617),h=r(5041),l=r(9444),f=r(7242),d=r(2056)},5398:(t,e,r)=>{"use strict";r.d(e,{D$:()=>n,yJ:()=>i,DV:()=>o});var n=function(t){var e,r=String(t);if(Math.abs(t)<1){if(e=parseInt(t.toString().split("e-")[1])){var n=t<0;n&&(t*=-1),t*=Math.pow(10,e-1),r="0."+new Array(e).join("0")+t.toString().substring(2),n&&(r="-"+r)}}else(e=parseInt(t.toString().split("+")[1]))>20&&(e-=20,r=(t/=Math.pow(10,e)).toString()+new Array(e+1).join("0"));return r},i=function(t){return Math.ceil(t.toString(2).length/8)},o=function(t){for(var e=new Uint8Array(i(t)),r=1;r<=e.length;r++)e[r-1]=t>>8*(e.length-r);return e}},5041:(t,e,r)=>{"use strict";r.d(e,{VO:()=>i,Cl:()=>a,EO:()=>s});var n=r(6576),i=function(t){return Object.keys(t).map((function(e){return t[e]}))},o=i(n.S4),a=function(t){return o.includes(t)},s=function(t,e){return t.x===e.x&&t.y===e.y&&t.width===e.width&&t.height===e.height}},7242:(t,e,r)=>{"use strict";r.d(e,{J:()=>a});for(var n=r(2244),i=new Uint16Array(256),o=0;o<256;o++)i[o]=o;i[22]=(0,n.GN)(""),i[24]=(0,n.GN)("˘"),i[25]=(0,n.GN)("ˇ"),i[26]=(0,n.GN)("ˆ"),i[27]=(0,n.GN)("˙"),i[28]=(0,n.GN)("˝"),i[29]=(0,n.GN)("˛"),i[30]=(0,n.GN)("˚"),i[31]=(0,n.GN)("˜"),i[127]=(0,n.GN)("�"),i[128]=(0,n.GN)("•"),i[129]=(0,n.GN)("†"),i[130]=(0,n.GN)("‡"),i[131]=(0,n.GN)("…"),i[132]=(0,n.GN)("—"),i[133]=(0,n.GN)("–"),i[134]=(0,n.GN)("ƒ"),i[135]=(0,n.GN)("⁄"),i[136]=(0,n.GN)("‹"),i[137]=(0,n.GN)("›"),i[138]=(0,n.GN)("−"),i[139]=(0,n.GN)("‰"),i[140]=(0,n.GN)("„"),i[141]=(0,n.GN)("“"),i[142]=(0,n.GN)("”"),i[143]=(0,n.GN)("‘"),i[144]=(0,n.GN)("’"),i[145]=(0,n.GN)("‚"),i[146]=(0,n.GN)("™"),i[147]=(0,n.GN)("ﬁ"),i[148]=(0,n.GN)("ﬂ"),i[149]=(0,n.GN)("Ł"),i[150]=(0,n.GN)("Œ"),i[151]=(0,n.GN)("Š"),i[152]=(0,n.GN)("Ÿ"),i[153]=(0,n.GN)("Ž"),i[154]=(0,n.GN)("ı"),i[155]=(0,n.GN)("ł"),i[156]=(0,n.GN)("œ"),i[157]=(0,n.GN)("š"),i[158]=(0,n.GN)("ž"),i[159]=(0,n.GN)("�"),i[160]=(0,n.GN)("€"),i[173]=(0,n.GN)("�");var a=function(t){for(var e=new Array(t.length),r=0,n=t.length;r<n;r++)e[r]=i[t[r]];return String.fromCodePoint.apply(String,e)}},8357:(t,e,r)=>{"use strict";r.d(e,{y:()=>o});var n,i=r(8765);!function(t){t.Greyscale="Greyscale",t.Truecolour="Truecolour",t.IndexedColour="IndexedColour",t.GreyscaleWithAlpha="GreyscaleWithAlpha",t.TruecolourWithAlpha="TruecolourWithAlpha"}(n||(n={}));var o=function(){function t(t){var e=i.Z.decode(t),r=i.Z.toRGBA8(e);if(r.length>1)throw new Error("Animated PNGs are not supported");var o=function(t){for(var e=Math.floor(t.length/4),r=new Uint8Array(3*e),n=new Uint8Array(1*e),i=0,o=0,a=0;i<t.length;)r[o++]=t[i++],r[o++]=t[i++],r[o++]=t[i++],n[a++]=t[i++];return{rgbChannel:r,alphaChannel:n}}(new Uint8Array(r[0])),a=o.rgbChannel,s=o.alphaChannel;this.rgbChannel=a,s.some((function(t){return t<255}))&&(this.alphaChannel=s),this.type=function(t){if(0===t)return n.Greyscale;if(2===t)return n.Truecolour;if(3===t)return n.IndexedColour;if(4===t)return n.GreyscaleWithAlpha;if(6===t)return n.TruecolourWithAlpha;throw new Error("Unknown color type: "+t)}(e.ctype),this.width=e.width,this.height=e.height,this.bitsPerComponent=8}return t.load=function(e){return new t(e)},t}()},2244:(t,e,r)=>{"use strict";r.d(e,{GN:()=>n,yq:()=>i,CK:()=>o,zv:()=>a,D_:()=>s,Dc:()=>u,Sk:()=>c,C1:()=>h,si:()=>l,FV:()=>f,f7:()=>g,VX:()=>v,Vk:()=>m,Qs:()=>y,KU:()=>b,sG:()=>k,JZ:()=>x});var n=function(t){return t.charCodeAt(0)},i=function(t){return t.codePointAt(0)},o=function(t,e){return c(t.toString(16),e,"0").toUpperCase()},a=function(t){return o(t,2)},s=function(t){return String.fromCharCode(t)},u=function(t){return s(parseInt(t,16))},c=function(t,e,r){for(var n="",i=0,o=e-t.length;i<o;i++)n+=r;return n+t},h=function(t,e,r){for(var n=t.length,i=0;i<n;i++)e[r++]=t.charCodeAt(i);return n},l=function(t,e){return void 0===e&&(e=4),t+"-"+Math.floor(Math.random()*Math.pow(10,e))},f=function(t){return t.replace(/\t|\u0085|\u2028|\u2029/g,"    ").replace(/[\b\v]/g,"")},d=["\\n","\\f","\\r","\\u000B"],p=function(t){return/^[\n\f\r\u000B]$/.test(t)},g=function(t){return t.split(/[\n\f\r\u000B]/)},v=function(t){return t.replace(/[\n\f\r\u000B]/g," ")},m=function(t,e){var r,n=t.charCodeAt(e),i=e+1,o=1;return n>=55296&&n<=56319&&t.length>i&&(r=t.charCodeAt(i))>=56320&&r<=57343&&(o=2),[t.slice(e,e+o),o]},y=function(t){for(var e=[],r=0,n=t.length;r<n;){var i=m(t,r),o=i[0],a=i[1];e.push(o),r+=a}return e},b=function(t,e,r,n){for(var i=function(t){for(var e=d.join("|"),r=["$"],n=0,i=t.length;n<i;n++){var o=t[n];if(p(o))throw new TypeError("`wordBreak` must not include "+e);r.push(""===o?".":o.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))}var a=r.join("|");return new RegExp("("+e+")|((.*?)("+a+"))","gm")}(e),o=f(t).match(i),a="",s=0,u=[],c=function(){""!==a&&u.push(a),a="",s=0},h=0,l=o.length;h<l;h++){var g=o[h];if(p(g))c();else{var v=n(g);s+v>r&&c(),a+=g,s+=v}}return c(),u},w=/^D:(\d\d\d\d)(\d\d)?(\d\d)?(\d\d)?(\d\d)?(\d\d)?([+\-Z])?(\d\d)?'?(\d\d)?'?$/,k=function(t){var e=t.match(w);if(e){var r=e[1],n=e[2],i=void 0===n?"01":n,o=e[3],a=void 0===o?"01":o,s=e[4],u=void 0===s?"00":s,c=e[5],h=void 0===c?"00":c,l=e[6],f=void 0===l?"00":l,d=e[7],p=void 0===d?"Z":d,g=e[8],v=void 0===g?"00":g,m=e[9];return new Date(r+"-"+i+"-"+a+"T"+u+":"+h+":"+f+("Z"===p?"Z":""+p+v+":"+(void 0===m?"00":m)))}},x=function(t,e){for(var r,n,i=0;i<t.length;){var o=t.substring(i).match(e);if(!o)return{match:n,pos:i};n=o,i+=(null!==(r=o.index)&&void 0!==r?r:0)+o[0].length}return{match:n,pos:i}}},5235:(t,e,r)=>{"use strict";r.d(e,{nB:()=>o,yo:()=>a,pY:()=>s,D1:()=>u,$O:()=>c,aB:()=>l,O0:()=>y});var n,i=r(2244),o=function(t,e){void 0===e&&(e=!0);var r=[];e&&r.push(65279);for(var n=0,o=t.length;n<o;){var a=t.codePointAt(n);if(a<65536)r.push(a),n+=1;else{if(!(a<1114112))throw new Error("Invalid code point: 0x"+(0,i.zv)(a));r.push(u(a),c(a)),n+=2}}return new Uint16Array(r)},a=function(t){return t>=0&&t<=65535},s=function(t){return t>=65536&&t<=1114111},u=function(t){return Math.floor((t-65536)/1024)+55296},c=function(t){return(t-65536)%1024+56320};!function(t){t.BigEndian="BigEndian",t.LittleEndian="LittleEndian"}(n||(n={}));var h="�".codePointAt(0),l=function(t,e){if(void 0===e&&(e=!0),t.length<=1)return String.fromCodePoint(h);for(var r=e?g(t):n.BigEndian,i=e?2:0,o=[];t.length-i>=2;){var a=p(t[i++],t[i++],r);if(f(a))if(t.length-i<2)o.push(h);else{var s=p(t[i++],t[i++],r);d(s)?o.push(a,s):o.push(h)}else d(a)?(i+=2,o.push(h)):o.push(a)}return i<t.length&&o.push(h),String.fromCodePoint.apply(String,o)},f=function(t){return t>=55296&&t<=56319},d=function(t){return t>=56320&&t<=57343},p=function(t,e,r){if(r===n.LittleEndian)return e<<8|t;if(r===n.BigEndian)return t<<8|e;throw new Error("Invalid byteOrder: "+r)},g=function(t){return v(t)?n.BigEndian:m(t)?n.LittleEndian:n.BigEndian},v=function(t){return 254===t[0]&&255===t[1]},m=function(t){return 255===t[0]&&254===t[1]},y=function(t){return v(t)||m(t)}},9444:(t,e,r)=>{"use strict";r.d(e,{DA:()=>a,GT:()=>s,k$:()=>u,ku:()=>h,MU:()=>l,pO:()=>f,gI:()=>d,zo:()=>p,m_:()=>g,Qk:()=>v,z7:()=>m});var n=r(5041),i=function(t){return"`"+t+"`"},o=function(t){var e=typeof t;return"string"===e?"'"+t+"'":"undefined"===e?i(t):t},a=function(t,e,r){Array.isArray(r)||(r=(0,n.VO)(r));for(var a=0,s=r.length;a<s;a++)if(t===r[a])return;throw new TypeError(function(t,e,r){for(var n=new Array(r.length),a=0,s=r.length;a<s;a++){var u=r[a];n[a]=o(u)}var c=n.join(" or ");return i(e)+" must be one of "+c+", but was actually "+o(t)}(t,e,r))},s=function(t,e,r){Array.isArray(r)||(r=(0,n.VO)(r)),a(t,e,r.concat(void 0))},u=function(t,e,r){Array.isArray(r)||(r=(0,n.VO)(r));for(var i=0,o=t.length;i<o;i++)a(t[i],e,r)},c=function(t,e){return"null"===e?null===t:"undefined"===e?void 0===t:"string"===e?"string"==typeof t:"number"===e?"number"==typeof t&&!isNaN(t):"boolean"===e?"boolean"==typeof t:"symbol"===e?"symbol"==typeof t:"bigint"===e?"bigint"==typeof t:e===Date?t instanceof Date:e===Array?t instanceof Array:e===Uint8Array?t instanceof Uint8Array:e===ArrayBuffer?t instanceof ArrayBuffer:e===Function?t instanceof Function:t instanceof e[0]},h=function(t,e,r){for(var n=0,o=r.length;n<o;n++)if(c(t,r[n]))return;throw new TypeError(function(t,e,r){for(var n=new Array(r.length),o=0,a=r.length;o<a;o++){var s=r[o];"null"===s&&(n[o]=i("null")),"undefined"===s&&(n[o]=i("undefined")),"string"===s?n[o]=i("string"):"number"===s?n[o]=i("number"):"boolean"===s?n[o]=i("boolean"):"symbol"===s?n[o]=i("symbol"):"bigint"===s?n[o]=i("bigint"):s===Array?n[o]=i("Array"):s===Uint8Array?n[o]=i("Uint8Array"):s===ArrayBuffer?n[o]=i("ArrayBuffer"):n[o]=i(s[1])}var u,c=n.join(" or ");return i(e)+" must be of type "+c+", but was actually of type "+i(null===(u=t)?"null":void 0===u?"undefined":"string"==typeof u?"string":isNaN(u)?"NaN":"number"==typeof u?"number":"boolean"==typeof u?"boolean":"symbol"==typeof u?"symbol":"bigint"==typeof u?"bigint":u.constructor&&u.constructor.name?u.constructor.name:u.name?u.name:u.constructor?String(u.constructor):String(u))}(t,e,r))},l=function(t,e,r){h(t,e,r.concat("undefined"))},f=function(t,e,r){for(var n=0,i=t.length;n<i;n++)h(t[n],e,r)},d=function(t,e,r,n){if(h(t,e,["number"]),h(r,"min",["number"]),h(n,"max",["number"]),n=Math.max(r,n),t<r||t>n)throw new Error(i(e)+" must be at least "+r+" and at most "+n+", but was actually "+t)},p=function(t,e,r,n){h(t,e,["number","undefined"]),"number"==typeof t&&d(t,e,r,n)},g=function(t,e,r){if(h(t,e,["number"]),t%r!=0)throw new Error(i(e)+" must be a multiple of "+r+", but was actually "+t)},v=function(t,e){if(!Number.isInteger(t))throw new Error(i(e)+" must be an integer, but was actually "+t)},m=function(t,e){if(![1,0].includes(Math.sign(t)))throw new Error(i(e)+" must be a positive number or 0, but was actually "+t)}},7638:(t,e,r)=>{"use strict";r.d(e,{ZT:()=>i,pi:()=>o,_T:()=>a,mG:()=>s,Jh:()=>u,pr:()=>c});var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},n(t,e)};function i(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var o=function(){return o=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},o.apply(this,arguments)};function a(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(t);i<n.length;i++)e.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(t,n[i])&&(r[n[i]]=t[n[i]])}return r}function s(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}u((n=n.apply(t,e||[])).next())}))}function u(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function c(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n}},8127:t=>{"use strict";t.exports="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"},4139:t=>{"use strict";t.exports="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"},5222:t=>{"use strict";t.exports="eJyFWVtT2zgU/isZP+3OhE5Iy/UtDaHNFhI2IdDS4UGxFUeLbKW6AKHT/77Hhnbb1fnUFw98x9K5fzpyvmZDU1Wy9tlxdnUenChlZ3e//+awc7B32D/Kutmpqf1EVJJeGJpglbQ706VWX4JshEHrX4Wdn4SiUnr7q5jga6nKdaPvXBYqVISMvdAqH9Slpjd3dvuEuFP1KIsL5fN1duxtkN1suBZW5F7auWxWjx69rAtZzEwl6hc73741j9nx553+QXenv9frHr456h729m672YJetVrV8sI45ZWpG0W93k+Cy7XK72rpXHZMK7MraV37WtbrvX7V6/VIxcR4lT87s9naxovOH/mfnd2jw6MuPY967XO3ffbb5+v2edAZFGYpO/Ot87JynXGdG7sxVnhZvOp0Blp3Zs1urjOTTtp7QknbiN4qVF3O87VsQ9huMveiLoQtvkvpxaHYvH+J6d4+Be/j9//e9Pe72cDlTZxsdrzfP+pmJ/LH/zu7ewfdbO6L99e0crf98+rlzybY59JblVM8Pn/Nrj/S+iZeEzLEbQSF4Vv3f7B8zLWoYvxLMOToUseSOlTLJs5lHcsKo7WwMb6RNm/qNRKIikSOogMsaBPG7CesrLVcIRFYJlyzo7tjVungYjSnNhMxvN5u1pLxnlxRhvHEaeHWMfwkrYlRUzNZ8g/Mm35tJfPuipqWQdU9865Tjwwo7znvJB/TWnEG50YbZg8nKwVEuuniWOmXIJgaLK2kPmTcJBJzLVPEuWdsH8TQ2xgaxtBJDI1i6DSG3sXQ+xgax9BfMfQhhs5i6DyGJjE0jaGLGPo7hmYxNI+hyxhaxNBVDF3H0McY+hRDNzG0pJPoTnqeNpYkA336sg5ySq5UrmweGBYNDWk7OjiYFmn5jTeG4Zwl02MM/zIdxHAB01AMy8WQiqF/YoihV6aFmWgxXcvQ3oYJZQwx3MDQCxP7EEP3MfQQQwyTbhnS5+sLFMKSO0zb91PV6JUu4FFfmAcmzvzp3ByXuplX4hJqpjqWZ7fc2bHSxir2PAC75MHSMZ4zAWzbxql27oRTCx/NMiiSVAZQQCNuN/6NGIR+xXTHiil8GuRYmilEWXJH2jPOjmLPA0eTO2kl0/s0C4nSig1HanQJkIwX/4V3KVwiwmkpCNGPBAC51FptnGIalTz1axPQpPh86POlTQHgRh+RB88NLi2Tr7Rk2hn0VSVyy9Xw0kpOcWG8yPl+K+iyJVn/LduFOV3GaOBmuDvUpbCh0iIwakxJQybD0rlg/ZAVX7ADZuQxtljRjMcPhWfggJ0inFdQEckFzWoQfLyb2ZLpTg30GoQzu1Nr0lWWSp5J2hjnU4LyE6BoQjqjEqTuE7agUPeKq+ZPwLJBqjMEWLRILdqCRa69dqEekaktF3yfLHAYBGqGBbAuoAUjrOSECIK7fyQdzb9/r2BUIcrJQR0IPi6TpAEa1Shg1MvkbkO0G2DVUYInHXDTQUJUQLs2T7IuGcEMqHiXdDIkmyQlHKCUWmBIDn29SUTucm0ss9kUaZ+BuM0BXgBrF0hB4Cuz/bbhQjvgMDPRFJTgAOGAVqugvdpoZswMwMFL4CCNWl4JXagVc7vaYmqYAD0qVSyjZJklTh0syoEdNaJBlNAJCNAYbNR8eaOBgfv8trTmTtbsHcjKUjkw9b4DyR6nGCVQV/NXkRGoKQscMigyN2DBDYjYy0cu8Als5JkJZQhJQSd5y6PRD56OSDBA40OiKkGAn1BrIN1TlBF09KBMOaQZOzFNjiXAwxOpPZMrz5O0fzAJRsSmVcwnDQUsMuk5c4RCX4AJp+VxKmBLhcyYNk/UK1+RH5J1fAYS560oZCUsY7lMsMIYRGmMCucMWE1BWwvNnAzNzQQ0uElVVA2mpsVv8gfiI5FDJeBScuglq1xS+SDMk6mbpi0viCW4XzsMSNEQGBEgmxcq59JwAjaySW8mID8G4LN0WSelA7DnAHI0P3NNwT5PiQ4ZodMe6b5LugIGgXGyFYAJPn25MWWT79pw30cwlwYsoq3Qr1XpCy13kD8Bp+rkVhRyfEIo1OOj0PwOedvNPkhbXwhlm1+Pb7/9C/NFF2U="},3533:t=>{"use strict";t.exports="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"},6672:t=>{"use strict";t.exports=""},3211:t=>{"use strict";t.exports=""},9566:t=>{"use strict";t.exports="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"},1182:t=>{"use strict";t.exports=""},1963:t=>{"use strict";t.exports="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"},6065:t=>{"use strict";t.exports=""},4980:t=>{"use strict";t.exports=""},7687:t=>{"use strict";t.exports=""},3470:t=>{"use strict";t.exports=""},3857:t=>{"use strict";t.exports="eJxtmNtu20YQhl+F4FULyMGeD7pz3AY1ChtG7NpFA18w1NomIlECSRcxgrx7SVk7+wOdG8H5OJydf2Z2d5gf9cV+t0v9VK/r+6vXsXlOlbHe28paq229qj/t++m62aXZ4J/m8PRb1z9/baZxefK63Z6eXN5dVMvTCh83u277xr/6kLrnl2XNq7TpXnczuZyabdee98/b2VzM/x4/dd/T5qab2pd6PQ2vaVVfvDRD005puE3Lu7eH1HbN9hTjx4/77/X6y5lcnUmjVzHIVVDicVX/1W/SsO36dLMfu6nb9/X6TAoBD+5euvZbn8axXtuZ36dhPJrVQqgPQoh5hev91LWLkIv94W1Ygq9+aX+tZAx2tfz64284/sblN/rqfLP/mqrbt3FKu7G67Nv9cNgPzZQ2H6rz7bb6vLgZq89pTMO/M/xfEqturJpqSM/d7GJIm2oamk3aNcO3av80O5xh3yyKmm1193ZIT02bqovTKjP+MAf++7zsZvZ3276kYyWWXB0z99S18/PbafPHQ71W4fjn/fxnFO+ZvkrT0LVzTr78qB/+nk38bHM9exgP8zr1z9U7jt6840YW5uSJKcZOCaBBnKgm5mU8MVNYyMwWFvO7Ukagkmgg6sDWQ5yFFqjzUrLEaQ3BEmiwNsMSaZS0vgWfOkPHWQowNeTUc0kumnxZvsgPxlGai6VTGUqAVCTQ6QkWnc77DKEiLktSUBJKqHIQZ86d8gCpHYoiEzMsb1ubYy8vW50DChB5ZhGqrijD0EqUIeiaEHIfCg5Kpuu0ApiToaGPSY0uaQsyr65L2oKi1yFt1PLaQ3lzfXTgXodGoJYzglndSLDMPg1sTPJpQJHJigw0QrGERqD9YhyTOgONQDUyuF1zaxuokc/BW2ztXCMrGZ9WMW1oQZHIXWNBkSCfRZEL5BMUiZw6CzVSFCfUSGZFNjIldoKDkonTKQiJIGzWmFd3BizJJ9SINoLDriOfUCOZS+zg+KGD1qGiLNMLxtJD1/ns00ON6EzyUCM6vbxhoBKaqbG3DFQCNiL1iHccBPV0DHhQH/JW8EW90dkyFKGywCJU0WkVSvSGeiSUODWFFD0HYdPQVoiRgfPMA+/nnRgiAyNYSjpWNQcNSMrtFCUH4ZIRpSCWocFCSuhCEY6hoUClc0WC52BJlCYYLQdhN+hygRRRlo5BKRRLS6oihSqh+ZzzRGG1Mo4Iz1LoP0qsxDGFzk0JE42ji0jCPejomJKCuwil4m5CiRMEUMVSzVLDUstSx1Juc0oVWMpqY295qVltmtWmWW2a1aZZbZrVplltmtWmWW2G1WZYbYbVZlhthtVmWG2G1WZYbYbVZlhtltVmWW2W1WZZbZbVZlltltVmWW2W1QYjQCh7E2aAQHeGhCFgPoNoy8KNb2wxBhmGKBxoUZXlLGsLI6AsftEDHV0wIURVbANLcTKlGGBIKPOAxCmhePCKUwFzAmpDFRQvjA9R06Hq8TONvshgKDCuRAZTXigUxjxNFfKRo3CLhnIJBMFRvMZpqpNBMlQJzGT5WFQMVQI/AikPMIhEU1aDjqJvQwmjSHB05cC9jbYwc5UtAHNLhDw41ha+lEqF4JaH3gmB61SYcqInxTDmQK8v08vjqv4zDf1N0w3Lf4A8/vwPpfK11w=="},8172:t=>{"use strict";t.exports="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"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,