(()=>{"use strict";var e,t,a={536:(e,t,a)=>{var r=a(9055);function n(e,t,a,r){const n=e.getContext("2d");n.clearRect(0,0,e.width,e.height),n.drawImage(t,0,0);const o=r.font,i=`${o.weight} ${o.size}px "${o.family}"`;n.font=i,n.fillStyle=r.color,n.textBaseline="top",n.textAlign="center";for(let t=0;t<a.length;t++){const i=a[t];n.fillText(i,e.width/2,r.position.y+1.5*t*o.size)}}async function o(e){const t=await r.PDFDocument.create(),a=t.addPage([e.width,e.height]),n=await e.convertToBlob({type:"image/png"}),o=await n.arrayBuffer(),i=await t.embedPng(o);return a.drawImage(i,{x:0,y:0,width:i.width,height:i.height}),await t.saveAsBase64()}a(4043),a(3162);const i=a.p+"fonts/34cd748d760d618c54403a69086e4f99.otf";onmessage=async e=>{try{const{guestConfig:t}=e.data,a=t.font.base64||i,r=new FontFace(t.font.family,`url(${a})`);self.fonts.add(r),await r.load(),await async function(e){const{canvas:t,guestList:a,cardImg:r,guestConfig:i}=e;for(let e=0;e<a.length;++e){const s=a[e];if(0===s.length)return;n(t,r,`${i.prefix}${s}${i.suffix}`.toUpperCase().split(i.lineBreakCharacter),i);const c=await o(t);postMessage({type:"progress",current:e+1,guest:s,finalImg:t.transferToImageBitmap(),pdfBase64:c,filename:s.replace(/\W+/g,"_").toLowerCase()})}}(e.data),postMessage({type:"end"})}catch(e){postMessage({type:"error",error:e})}}}},r={};function n(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return a[e].call(o.exports,o,o.exports,n),o.exports}n.m=a,n.x=()=>{var e=n.O(void 0,[841],(()=>n(536)));return n.O(e)},e=[],n.O=(t,a,r,o)=>{if(!a){var i=1/0;for(l=0;l<e.length;l++){for(var[a,r,o]=e[l],s=!0,c=0;c<a.length;c++)(!1&o||i>=o)&&Object.keys(n.O).every((e=>n.O[e](a[c])))?a.splice(c--,1):(s=!1,o<i&&(i=o));if(s){e.splice(l--,1);var f=r();void 0!==f&&(t=f)}}return t}o=o||0;for(var l=e.length;l>0&&e[l-1][2]>o;l--)e[l]=e[l-1];e[l]=[a,r,o]},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce(((t,a)=>(n.f[a](e,t),t)),[])),n.u=e=>e+"."+{536:"1cb35b8fd4135cf259f8",841:"9f845d4e0f943240fb0a"}[e]+".js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.p="",(()=>{n.b=self.location+"";var e={536:1};n.f.i=(t,a)=>{e[t]||importScripts(n.p+n.u(t))};var t=self.webpackChunkinvitation_card_bulk_name_print=self.webpackChunkinvitation_card_bulk_name_print||[],a=t.push.bind(t);t.push=t=>{var[r,o,i]=t;for(var s in o)n.o(o,s)&&(n.m[s]=o[s]);for(i&&i(n);r.length;)e[r.pop()]=1;a(t)}})(),t=n.x,n.x=()=>n.e(841).then(t),n.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,